(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6015],{9079:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/SQLServer/2019-04/copy-database-for-1c-ways",function(){return n(3167)}])},3167:function(e,s,n){"use strict";n.r(s);var r=n(5893),a=n(9305);n(7294);var l=n(850),i=n(7105);s.default=()=>(0,r.jsxs)(a.Xg,{blogcentered:!0,children:[(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Проблема на пустом месте?"}),(0,r.jsx)(a.xv,{p:!0,children:"Отчетность, закрытие месяца, сбор данных для аудиторов, срочный отчет для директора, и так далее и тому подобное. Для этого и предназначены информационные системы, ведь практически всегда конечный результат всех процессов в них - это предоставление бизнесу какой-либо информации в виде отчетов или около того."}),(0,r.jsx)(a.xv,{p:!0,children:"Сами отчеты бывают разные. От простых оборотно-сальдовых ведомостей по счету, до замудренных отчетов с анализом данных за предыдущие года, при этом с применением различных формул и параметров расчета."}),(0,r.jsx)(a.xv,{p:!0,children:"Не удивительно, что в периоды отчетности или закрытия месяца многие компании сталкиваются с замедлением работы своих систем на базе 1С или НЕ 1С. Ведь один тяжелый отчет при формировании может “съесть” больше ресурсов, чем работа всей системы за неделю и даже больше."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/1. OLAP vs OLTP.png",alt:"Файловые группы",size:i.h2.SMALL}),(0,r.jsx)(a.xv,{p:!0,children:"В мире энтерпрайза за пределами экосистемы 1С принято разделять базы на две категории:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Операционные (OLTP), где ведется основная работа бизнеса. Работа этих систем критична для бизнеса, а остановка в случае нештатных ситуаций может стоить компании значительных средств."}),(0,r.jsx)("li",{children:"Отчетные (OLAP), предназначены для сбора различных видов отчетов. За счет изолирования от операционной базы, формирование тяжелой аналитической отчетности не повлияет на производительность и стабильность ее работы. Обычно остановка этих баз не так сильно отзывается на работе компании."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Создать отдельную базу для отчетов можно несколькими путями:"}),(0,r.jsxs)(a.aV,{type:i.RH.number,children:[(0,r.jsx)("li",{children:"Сделать копию операционной базы данных."}),(0,r.jsx)("li",{children:"Организовать хранилище данных."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Мы же сегодня рассмотрим несколько подходов по созданию копии базы 1С для отчетов. Начнем с простого, а закончим чем-нибудь хардкорным."}),(0,r.jsx)(a.xv,{p:!0,children:"Внимание!! Размещать отчетную базу лучше на отдельном сервере, чтобы снизить до минимума влияние ее работы на операционную деятельность. Это актуально для всех способов, что будут описаны ниже."}),(0,r.jsx)(a.xv,{p:!0,children:"Ах да, все примеры для клиент-серверных баз в контексте работы со SQL Server. Что-то будет актуально и для PostgreSQL."}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Классический подход"}),(0,r.jsx)(a.xv,{p:!0,children:"Самый простой способ, который используется для создания копии базы - это разворачивание ее через бэкап. Обычно его используют для создания или актуализации тестовых баз, но и для создания отчетной базы тоже иногда может быть применимо."}),(0,r.jsx)(a.xv,{p:!0,children:"Формирование и последующее разворачивание бэкапа делается через SQL Server Managment Studio в несколько простых шагов."}),(0,r.jsx)(a.xv,{p:!0,children:"Здесь простой пример как вручную создать бэкап, а потом развернуть его и при этом не сломать основную стратегию бэкапирования на сервере. Вы же делаете регулярные бэкапы, не так ли?!"}),(0,r.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Создаем резервную копию"}),(0,r.jsx)(a.xv,{p:!0,children:"Сделать бэкап можно через удобный интерфейс с помощью SQL Managment Studio (SSMS), который также поставляется с некоторыми дистрибутивами SQL Server в комплекте, но можно использовать и последнюю версию с сайта Microsoft."}),(0,r.jsx)(a.xv,{p:!0,children:"Для этого нужно иметь соответствующие права доступа на инстансе SQL Server, зайти в SSMS и перейти к настройкам резервного копирования."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/2. Запуск создания бэкапа.png",alt:"Запуск создания бэкапа",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Откроется окно настроек резервного копирования в разделе “Общие”. Поскольку пример у нас простейший, то тут достаточно указать путь сохранения файла бэкапа и опцию “Архивная копия только для копирования”. Последняя настройка нужна для того, чтобы SQL Server не учитывал этот бэкап в последовательности резервных копий при работе основной стратегии бэкапирования."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/3. Настройка бэкапа.png",alt:"Настройка бэкапа",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Далее запускам и ждем завершения операции создания резервной копии."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/4. Ждем снятия бэкапа.png",alt:"Ждем снятия бэкап",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Когда увидим заветное окно о завершении, то можно говорить о грандиозном успехе! Все получилось!"}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/5. Бэкап снят!.png",alt:"Бэкап снят!",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Разворачиваем резервную копию"}),(0,r.jsx)(a.xv,{p:!0,children:"С помощью SQL Managment Studio (SSMS) также развернем копию базы. Для этого перейдем к разделу “Базы данных” в SQL Managment Studio (SSMS)."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/6. Начало восстановление из бэкапа.png",alt:"Начало восстановление из бэкапа",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Далее укажем основные параметры: путь к файлу резервной копии и имя базы данных. Если база данных уже существует и ее нужно полностью обновить, то на вкладке “Параметры” установите “Перезаписать существующую базу данных (WITH REPLACE)”."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/7. Настройка восстановления бэкапа.png",alt:"Настройка восстановления бэкапа",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Ожидаем процесс восстановления базы."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/8. Ожидаем восстановление базы.png",alt:"Ожидаем восстановление базы",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"И … готово!"}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/9. Копия восстановлена!.png",alt:"Копия восстановлена!",size:i.h2.MEDIUM}),(0,r.jsx)(a.xv,{p:!0,children:"Отлично, копия базы готова!"}),(0,r.jsx)(a.xv,{p:!0,children:"Вот и все! У нас есть актуальная (пока что!) база, для которой можно создать новую информационную базу на сервере 1С и использовать изолированно от рабочего окружения."}),(0,r.jsx)(a.xv,{p:!0,children:"Мы не рассматриваем все настройки для работы с бэкапированием, т.к. цели такой и не было. При такой схеме работы Вам еще может понадобиться указывать путь к файлам базы данных да диске, изменить модель восстановления отчетной базы с “Полный” на “Простой” и другое."}),(0,r.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Небольшой итог"}),(0,r.jsx)(a.xv,{p:!0,children:"Мы акцентируем внимание на клиент-серверном режиме работы, но фактически такой подход можно использовать и для файловых баз. Вот только о какой производительности может идти речь в последнем случае - загадка. То есть для файловых баз это неактуально."}),(0,r.jsx)(a.xv,{p:!0,children:"Плюсы:"}),(0,r.jsx)(a.aV,{children:(0,r.jsx)("li",{children:"Простота реализации и настройки."})}),(0,r.jsx)(a.xv,{p:!0,children:"Минусы:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Копия базы быстро теряет актуальность."}),(0,r.jsx)("li",{children:"Подходит только для формирования отчетов в закрытом периоде, где данные уже не изменяются. В открытом периоде данные могут быть некорректные / неактуальные."}),(0,r.jsx)("li",{children:"Актуализация только по требованию, когда нужны свежие данные “еще вчера”."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Просто, эффективно, но медленно!"}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Скриптуем все!"}),(0,r.jsx)(a.xv,{p:!0,children:"Но что, если нужно обновлять отчетную базу чаще? Например, раз в сутки?"}),(0,r.jsx)(a.xv,{p:!0,children:"В этом случае мы можем заскриптовать процесс формирования бэкапа для отчетной базы, а после ее обновление."}),(0,r.jsx)(a.xv,{p:!0,children:"Например, так мы сформируем бэкап."}),(0,r.jsx)(l.Z,{code:"\nBACKUP DATABASE [SuperDatabase] \n	TO  DISK = N'F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\Backup\\SuperDatabase.bak' \n	-- Указываем флаг \"Архивная копия только для копирования\"\n	-- Подробнее: docs.microsoft.com/ru-ru/sql/relational-databases/backup-restore/copy-only-backups-sql-server?view=sql-server-2017\n	WITH  COPY_ONLY, \n	NOFORMAT, \n	NOINIT,  \n	NAME = N'SuperDatabase-Полная База данных Резервное копирование', \n	SKIP, \n	NOREWIND, \n	NOUNLOAD, \n	STATS = 10\n                ",className:"my-5",language:"sql"}),(0,r.jsx)(a.xv,{p:!0,children:"А потом обновим отчетную базу."}),(0,r.jsx)(l.Z,{code:"\nRESTORE DATABASE [SuperDatabase_ForReports] \n	FROM  DISK = N'F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\Backup\\SuperDatabase.bak' WITH  FILE = 1,  \n	MOVE N'SuperDatabase' TO N'F:\\DBsMSSQL14.MSSQLSERVER\\MSSQL\\DATA\\SuperDatabase_ForReports.mdf',  \n	MOVE N'SuperDatabase_log' TO N'F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\SuperDatabase_ForReports_log.ldf',  \n	NOUNLOAD,\n	-- Перезаписываем базу данных, если она уже была создана ранее\n	REPLACE,\n	STATS = 5\n                ",className:"my-5",language:"sql"}),(0,r.jsx)(a.xv,{p:!0,children:"Чтобы этот процесс выполнялся автоматически раз в сутки создадим задание на SQL Server."}),(0,r.jsx)(a.xv,{p:!0,children:"Просто добавим задание, которое автоматически будет создавать резервную копию и разворачивать вне рабочее время."}),(0,r.jsx)(l.Z,{code:"\nUSE [msdb]\nGO\nDECLARE @jobId BINARY(16)\nEXEC  msdb.dbo.sp_add_job @job_name=N'AutoUpdateDatabaseForReport', \n		@enabled=1, \n		@notify_level_eventlog=0, \n		@notify_level_email=2, \n		@notify_level_page=2, \n		@delete_level=0, \n		@category_name=N'[Uncategorized (Local)]', \n		@owner_login_name=N'sa', @job_id = @jobId OUTPUT\nselect @jobId\nGO\nEXEC msdb.dbo.sp_add_jobserver @job_name=N'AutoUpdateDatabaseForReport', @server_name = N'YY-COMP'\nGO\nUSE [msdb]\nGO\nEXEC msdb.dbo.sp_add_jobstep @job_name=N'AutoUpdateDatabaseForReport', @step_name=N'Сформировать бэкап', \n		@step_id=1, \n		@cmdexec_success_code=0, \n		@on_success_action=3, \n		@on_fail_action=2, \n		@retry_attempts=0, \n		@retry_interval=0, \n		@os_run_priority=0, @subsystem=N'TSQL', \n		@command=N'BACKUP DATABASE [SuperDatabase] \n	TO  DISK = N''F:DBsMSSQL14.MSSQLSERVERMSSQLBackupSuperDatabase.bak'' \n	-- Указываем флаг \"Архивная копия только для копирования\"\n	-- Подробнее: docs.microsoft.com/ru-ru/sql/relational-databases/backup-restore/copy-only-backups-sql-server?view=sql-server-2017\n	WITH  COPY_ONLY, \n	NOFORMAT, \n	NOINIT,  \n	NAME = N''SuperDatabase-Полная База данных Резервное копирование'', \n	SKIP, \n	NOREWIND, \n	NOUNLOAD, \n	STATS = 10', \n		@database_name=N'master', \n		@flags=0\nGO\nUSE [msdb]\nGO\nEXEC msdb.dbo.sp_add_jobstep @job_name=N'AutoUpdateDatabaseForReport', @step_name=N'Обновить базу для отчетности', \n		@step_id=2, \n		@cmdexec_success_code=0, \n		@on_success_action=1, \n		@on_fail_action=2, \n		@retry_attempts=0, \n		@retry_interval=0, \n		@os_run_priority=0, @subsystem=N'TSQL', \n		@command=N'RESTORE DATABASE [SuperDatabase_ForReports] \n	FROM  DISK = N''F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\Backup\\SuperDatabase.bak'' WITH  FILE = 1,  \n	MOVE N''SuperDatabase'' TO N''F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\SuperDatabase_ForReports.mdf'',  \n	MOVE N''SuperDatabase_log'' TO N''F:\\DBs\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\SuperDatabase_ForReports_log.ldf'',  \n	NOUNLOAD,\n	-- Перезаписываем базу данных, если она уже была создана ранее\n	REPLACE,\n	STATS = 5', \n		@database_name=N'master', \n		@flags=0\nGO\nUSE [msdb]\nGO\nEXEC msdb.dbo.sp_update_job @job_name=N'AutoUpdateDatabaseForReport', \n		@enabled=1, \n		@start_step_id=1, \n		@notify_level_eventlog=0, \n		@notify_level_email=2, \n		@notify_level_page=2, \n		@delete_level=0, \n		@description=N'', \n		@category_name=N'[Uncategorized (Local)]', \n		@owner_login_name=N'sa', \n		@notify_email_operator_name=N'', \n		@notify_page_operator_name=N''\nGO\nUSE [msdb]\nGO\nDECLARE @schedule_id int\nEXEC msdb.dbo.sp_add_jobschedule @job_name=N'AutoUpdateDatabaseForReport', @name=N'Каждую ночь', \n		@enabled=1, \n		@freq_type=4, \n		@freq_interval=1, \n		@freq_subday_type=1, \n		@freq_subday_interval=0, \n		@freq_relative_interval=0, \n		@freq_recurrence_factor=1, \n		@active_start_date=20190421, \n		@active_end_date=99991231, \n		@active_start_time=20000, \n		@active_end_time=235959, @schedule_id = @schedule_id OUTPUT\nselect @schedule_id\nGO\n                ",className:"my-5",language:"sql"}),(0,r.jsx)(a.xv,{p:!0,children:"Скрипты для работы с резервными копиями были использованы те же, что и в предыдущих примерах."}),(0,r.jsx)(a.xv,{p:!0,children:"Плюсы:"}),(0,r.jsxs)(a.aV,{type:i.RH.number,children:[(0,r.jsx)("li",{children:"Простота настройки, хоть и чуть сложнее предыдущего примера."}),(0,r.jsx)("li",{children:"Копия базы актуальна на предыдущий день."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Минусы:"}),(0,r.jsxs)(a.aV,{type:i.RH.number,children:[(0,r.jsx)("li",{children:"Не подходит для формирования оперативных отчетов."}),(0,r.jsx)("li",{children:"Не подходит для формирования отчетности по прошлым периодам, если там интенсивно выполняется корректировка данных. Ну никто же так не делает! :)"}),(0,r.jsx)("li",{children:"Быстро, чуть сложнее предыдущего способа, но все еще медленно актуализируются данные."})]}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Реплицируем через репликацию"}),(0,r.jsxs)(a.xv,{p:!0,children:["Другой способ - ",(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-Replication-And-High-Availability",children:"это репликация стандартными средствами SQL Server"})})}),". На самом деле, это не самый подходящий вариант передачи изменений баз 1С в их копию, потому что для его эффективной работы необходимо было бы добавить первичные ключи во все таблицы. Платформа 1С этого не делает. Конечно, можно было бы добавить ключи самостоятельно и, о боже, поддерживать при реструктуризации. Но, даже это бы не помогло, потому что для некоторых таблиц ключ просто невозможно добавить. Например, для таблицы “DBSchema”, в которой только одно поле с типом “varbinary(max)”."]}),(0,r.jsx)(a.xv,{p:!0,children:"Вообще, есть несколько основных видов репликации:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Публикация моментальных снимков - реплицируются все данные целиком, отслеживание изменений не выполняется."}),(0,r.jsx)("li",{children:"Публикация транзакций - передача изменения из базы источника выполняется порциями в виде пакетов транзакций, т.е. при этом ведется отслеживание изменений."}),(0,r.jsx)("li",{children:"Одноранговая публикация - репликация с несколькими источниками. Источник отправляет пакеты транзакций всем узлам. Каждый узел может получать и отправлять изменения."}),(0,r.jsx)("li",{children:"Публикация слиянием - как и репликация транзакций, данные синхронизируются пакетами транзакций. При этом изменения могут вноситься во все базы в репликации."})]}),(0,r.jsx)(a.xv,{p:!0,children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-Replication-And-High-Availability",children:"По этой ссылке можно найти подробную документацию по кажодй из них."})})})}),(0,r.jsx)(a.xv,{p:!0,children:"Из-за отсутствия первичных ключей в таблице может использоваться только публикация моментальных снимков. Но есть ли в этом смысл? Проще использовать актуализацию базы данных через формирование и разворачивание бэкапа."}),(0,r.jsx)(a.xv,{p:!0,children:"Мне удавалось запустить репликацию базы данных 1С через метод “Репликация транзакций”, который был бы идеальным, если бы платформа корректно создавала первичные ключи для таблиц. Но мир не идеален, поэтому пришлось выполнять несколько дополнительных действий:"}),(0,r.jsxs)(a.aV,{type:i.RH.number,children:[(0,r.jsx)("li",{children:"Добавляем первичные ключи во все таблицы где есть кластерный индекс."}),(0,r.jsx)("li",{children:"После добавляем ключи в таблицы “кучи”, если это возможно."}),(0,r.jsx)("li",{children:"Для таблиц, где первичный ключ добавить нельзя (например, та же таблица “DBSchema”) добавляем свое числовое поле “ID” с автоинкрементом, которое и будет первичным ключом. Платформа 1С ничего об этом поле знать не будет."})]}),(0,r.jsxs)(a.xv,{p:!0,children:["Да, репликация работала, но это такая лютая схема, что лучше ее никогда не использовать и не продвигать дальше этапа экспериментов. К тому же, нужно позаботиться о том, чтобы в базе приемнике не изменялись данные. Но Вы можете попробовать ",":)",". Результаты моих экспериментов постепенно выкладываются здесь."]}),(0,r.jsx)(a.xv,{p:!0,children:"И так, что имеем."}),(0,r.jsx)(a.xv,{p:!0,children:"Плюсы:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Быстрая синхронизация при использовании репликации транзакций."}),(0,r.jsx)("li",{children:"Отлаженные механизмы обмена как для хороших каналов связи, так и с низким качеством соединения."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Минусы:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Большие сложности применения для информационных баз 1С."}),(0,r.jsx)("li",{children:"Сопровождение на столько сложное, что для простых обновлений баз 1С может потребоваться администратор БД или эксперт 1С!"}),(0,r.jsx)("li",{children:"Нарушение лицензионного соглашения фирмы 1С в части использования недокументированных возможностей."})]}),(0,r.jsxs)(a.xv,{p:!0,children:["Таким образом, это для лютых извращенцев, которые не ищут легких путей! ",":)"]}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Копия в реальном времени"}),(0,r.jsx)(a.xv,{p:!0,children:"И последний способ создания копии базы для отчетов - это использование групп высокой доступности AlwaysOn. Это очень мощная технология, которая позволяет создавать копию базы данных практически в реальном времени. С ее помощью можно настроить репликацию данных базы на другой инстанс SQL Server, при этом вторая база данных будет только для чтения."}),(0,r.jsx)(a.xv,{p:!0,children:"Репликация при AlwaysOn может быть двух типов:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Синхронная - когда транзакция фиксируется сразу же на двух узлах базы данных."}),(0,r.jsx)("li",{children:"Асинхронная - когда транзакции фиксируются на основной реплике и изменения асинхронно передаются на второй узел с некоторой задержкой."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Синхронная репликация используется в основном для решения задач отказоустойчивости и надежности, т.к. позволяет в случае отказа основной реплики автоматически переключиться на второй узел. Существенным минусом синхронных реплик является потенциальное снижение производительности, т.к. транзакция должна быть зафиксирована на обоих узлах. Таким образом, самый медленный узел будет узким местом производительности. Это может использоваться и для баз 1С, вот только сегодня мы ведем речь о создании копии базы для отчетов, поэтому нам больше подходит асинхронная реплика."}),(0,r.jsx)(a.xv,{p:!0,children:"При асинхронной репликации автоматическое переключение узлов в случае аварий не предусмотрено, нужно это действие выполнять вручную.Так сделано потому что есть риск потери данных. т.к. синхронизация выполняется в фоновом режиме с задержкой и не все данные могут быть переданы на момент нештатной ситуации."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-04/copy-database-for-1c-ways/10. Репликация.png",alt:"Репликация",size:i.h2.SMALL}),(0,r.jsx)(a.xv,{p:!0,children:"Настройка AlwaysOn сама по себе не очень сложная, но вот подготовительные работы могут занять время. Для работы групп доступности необходимо следующее:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsxs)("li",{children:["SQL Server 2012 и выше редакции Enterprise Edition. Также функционал доступен для Standard Edition, но с ограничениями:",(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Максимум 2 реплики (первичная и вторичная)"}),(0,r.jsx)("li",{children:"Нет доступа на чтение для второй реплики"}),(0,r.jsx)("li",{children:"Только одна база в каждой группе доступности."})]})]}),(0,r.jsx)("li",{children:"Операционная система Windows Server 2012 и выше."}),(0,r.jsx)("li",{children:"Настроенный отказоустойчивый кластер Windows (WSFC)."})]}),(0,r.jsx)(a.xv,{p:!0,children:"Таким образом, нужен квалифицированный администратор, лицензии на Windows Server и SQL Server редакции Enterprise. Цена может подходить не для всех. Процесс настройки рассматривать в статье не будем, но ознакомиться с самой простой конфигурацией по шагам Вы можете по следующим ссылкам:"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/blob/master/SQL-Server-AlwaysOn/Windows%20Server%20Failover%20Cluster/%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0%20WSFC.md",children:"Пример настройки отказоустойчивого кластера Windwos Server"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/blob/master/SQL-Server-AlwaysOn/SQL%20Server%20AlwaysOn/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B3%D1%80%D1%83%D0%BF%D0%BF%D1%8B%20%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20AlwaysOn.md",children:"Основные сведений об AlwaysOn и пример настройки"})})})})]}),(0,r.jsx)(a.xv,{p:!0,children:"Сейчас же остановимся на некоторых особенностях работы баз 1С с репликами AlwaysOn. Допустим, у нас сделана настройка асинхронной реплики. База данных на втором узле практически всегда находится в актуальном состоянии. Но находится она в режиме только для чтения! Мы развернули отдельный сервер 1С, добавили эту базу и попытались зайти в нее в режиме 1С:Предприятие. Первое, что мы увидим будет…"}),(0,r.jsx)(a.xv,{p:!0,children:(0,r.jsx)("i",{children:"Невосстановимая ошибка Ошибка при выполнении запроса POST к ресурсу /e1cib/modules/call: по причине: Соединение с сервером баз данных непригодно для использования после разрыва соединения администратором и будет переустановлено. Microsoft SQL Server Native Client 11.0: Failed to update database “YourDatabaseName” because the database is read-only. HRESULT=80004005, SQLSrvr: SQLSTATE=25000, state=2, Severity=10, native=3906, line=1"})}),(0,r.jsx)(a.xv,{p:!0,children:"Платформа 1С не поддерживает работу с базой в режиме “Только для чтения”, т.к. пытается сохранять различные настройки форм, отчетов, историю работы в служебные таблицы. В этом случае есть несколько решений:"}),(0,r.jsxs)(a.aV,{type:i.RH.number,children:[(0,r.jsx)("li",{children:"Использовать толстый клиент обычного приложения с некоторыми модификациями конфигурации."}),(0,r.jsx)("li",{children:"Формировать отчеты через интеграцию (COM-соединение, веб-сервисы, HTTP-сервисы, OData-интерфейс)."})]}),"Готовые решения тут отсутствуют, т.к. случаи очень разные, но общий подход должен быть понятен. Есть и другие нюансы при работе с AlwaysOn, не только в контексте 1С. ",(0,r.jsx)(a.xv,{p:!0,children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/blob/master/SQL-Server-AlwaysOn/SQL%20Server%20AlwaysOn/%D0%9D%D0%B5%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B5%20%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%B8%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B5%20%D1%81%20AlwaysOn.md",children:"Подробнее Вы можете прочитать здесь."})})})}),(0,r.jsxs)(a.xv,{p:!0,children:["Если Вас интересует технология AlwaysOn, то в ",(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-AlwaysOn",children:"репозитории есть специальный раздел"})})})," о нем со скриптами, мануалами и прочим."]}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Мысли напоследок"}),(0,r.jsx)(a.xv,{p:!0,children:"Вы дочитали до конца и задались вопросом: “Почему не использовать стандартные возможности платформы?”. Например, создать базу и наполнять ее через обмены или вообще сделать узел УРБД. Справедливый вопрос! Но и ответ простой - скорость и производительность!"}),(0,r.jsx)(a.xv,{p:!0,children:"Стандартными обменами никогда не достичь передачи данных в реальном времени. Ни конвертация данных, ни даже организация событийного обмена через RabbitMQ никогда не достигнут скорости передачи данных по сравнению с AlwaysOn или репликацией транзакций. С другой стороны, они дешевле. И точно быстрее, чем актуализация отчетной базы через бэкапы."}),(0,r.jsx)(a.xv,{p:!0,children:"Еще вопрос - почему не формировать тяжелые отчеты в основной базе? Тут все просто - аналитические отчеты обычно требуют обработки большого массива данных. В этом случае может быть не важно на сколько оптимально вы написали запрос, ведь если данные анализируются за несколько лет, то никакой индекс или статистика могут не помочь. СУБД просто выберет сканирование таблиц в запросе и придется с этим жить. Все, конечно, зависит от запроса."}),(0,r.jsx)(a.xv,{p:!0,children:"Эта тема более актуальна для больших баз, т.к. там формирование тяжелой аналитической отчетности могут не просто замедлить основную работу, а просто ее остановить."}),(0,r.jsx)(a.xv,{p:!0,children:"На мой взгляд, самым продвинутым способом создания базы для отчетности остается AlwaysOn, но он требует дополнительной квалификации, расходов на лицензии и некоторую адаптацию конфигураций 1С."}),(0,r.jsx)(a.xv,{p:!0,children:"Хорошим и дешевым был бы способ репликации транзакций, но из-за особенностей баз 1С его сложно применять."}),(0,r.jsx)(a.xv,{p:!0,children:"Самым доступным и распространенным остается способ через бэкапирование и разворачивание резервных копий со всеми вытекающими недостатками и ограничениями."}),(0,r.jsx)(a.xv,{p:!0,children:"Все вышеперечисленное не является готовым решением или истиной, а лишь поверхностно отражает накопленный опыт автора."})]})},850:function(e,s,n){"use strict";n.d(s,{Z:function(){return x}});var r=n(5893),a=n(7294),l=n(4965),i=n(4275),t=n(7340);function c(){let e=(0,t._)(["\n  text-align: left;\n  overflow: hidden;\n  font-size: 14px;\n  border-radius: 6px;\n  overflow: auto;\n  max-height: 350px;\n\n  & .token-line {\n    line-height: 1.3em;\n    height: 1.3em;\n  }\n"]);return c=function(){return e},e}let d=n(964).ZP.pre(c());var x=e=>{let{code:s,className:t,language:c}=e;return(void 0!==n.g?n.g:window).Prism=l.p1,n(1354),n(9016),n(5266),n(2927),n(1315),n(7874),n(6862),(0,r.jsx)("div",{className:(0,i.GF)("bg-blue-500 md:p-5 p-2",t),children:(0,r.jsx)("div",{className:"shadow-lg",children:(0,r.jsx)(l.y$,{theme:l.np.vsDark,code:s,language:null!=c?c:c="tsx",children:e=>{let{className:s,style:n,tokens:l,getLineProps:i,getTokenProps:t}=e;return(0,r.jsx)(d,{className:s,style:n,children:l.map((e,s)=>(0,a.createElement)("div",{...i({line:e,key:s}),key:Math.random()},e.map((e,s)=>(0,a.createElement)("span",{...t({token:e,key:s}),key:Math.random()}))))})}})})})}},9305:function(e,s,n){"use strict";n.d(s,{Ee:function(){return t},Xg:function(){return l},aV:function(){return d},e9:function(){return x},o_:function(){return o},ty:function(){return c},xv:function(){return i}});var r=n(5152),a=n.n(r);let l=a()(()=>Promise.all([n.e(4838),n.e(4738),n.e(4817),n.e(1664),n.e(7167)]).then(n.bind(n,7167)),{loadableGenerated:{webpack:()=>[7167]}}),i=a()(()=>n.e(9179).then(n.bind(n,9179)),{loadableGenerated:{webpack:()=>[9179]}}),t=a()(()=>n.e(1974).then(n.bind(n,1974)),{loadableGenerated:{webpack:()=>[1974]}}),c=a()(()=>n.e(8547).then(n.bind(n,8547)),{loadableGenerated:{webpack:()=>[8547]}}),d=a()(()=>n.e(6806).then(n.bind(n,6806)),{loadableGenerated:{webpack:()=>[6806]}}),x=a()(()=>Promise.all([n.e(1664),n.e(1465)]).then(n.bind(n,1465)),{loadableGenerated:{webpack:()=>[1465]}});a()(()=>n.e(567).then(n.bind(n,567)),{loadableGenerated:{webpack:()=>[567]}}),a()(()=>Promise.all([n.e(2004),n.e(4139)]).then(n.bind(n,4139)),{loadableGenerated:{webpack:()=>[4139]}});let o=a()(()=>Promise.all([n.e(5507),n.e(7472),n.e(584),n.e(7870)]).then(n.bind(n,7870)),{loadableGenerated:{webpack:()=>[7870]}})}},function(e){e.O(0,[1102,2888,9774,179],function(){return e(e.s=9079)}),_N_E=e.O()}]);