(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9682],{28836:function(n,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/CPP/2025-07/cpp-path-to-gui",function(){return i(28570)}])},28570:function(n,e,i){"use strict";i.r(e);var l=i(85893),s=i(97037);i(67294);var r=i(13803),t=i(46416),c=i(76092),d=i(93218),a=i(44877),x=i(42967),o=i(47168),h=i(78148);e.default=()=>(0,l.jsxs)(s.Xg,{blogcentered:!0,children:[(0,l.jsxs)(s.xv,{textAlign:t.PH.RIGHT,quote:!0,children:["Мы встречаем свою судьбу на пути, который избираем, чтобы уйти от нее.",(0,l.jsx)("br",{}),"(с) Жан де Лафонтен"]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Сложный путь к созданию графического интерфейса на C++. ImGui с нами!"}),(0,l.jsx)(s.xv,{title:!0,className:"mt-10 md:text",children:"Содержание"}),(0,l.jsxs)(s.aV,{children:[(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#begin",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Погружаемся"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#why",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Почему?"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#ready-solutions",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Готовые решения"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#create-project",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Создаем проект"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#imgui-custom",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Время настройки"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#trainer-func",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Функционал трейнера"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#my-gui",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Время GUI"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#done",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Проверяем работу"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#alter",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Альтернативные решения"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#end",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Вместо заключения"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{href:"#link",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Полезные материалы"})})})})]}),(0,l.jsxs)("section",{id:"section-begin",children:[(0,l.jsx)(s.xv,{id:"begin",title:!0,className:"mt-10 md:text",children:"Погружаемся"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:'C++ - могучий, быстрый и просто прекрасный язык программирования. Применяется во многих областях: от встраиваемых систем до игр. Но стоит только захотеть создать простейшее классическое десктопное приложение, на форме которого должна быть всего лишь одна кнопка, и начинаются "танцы с бубном". Вы как-будто возвращаетесь в конец 90-х годов: WinAPI, дескрипторы, callback-функции и так далее.'}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:'Встает логичный вопрос: "Почему?". Почему при всей мощи C++ такая простая, на первый взгляд, задача становится такой сложной? В поисках ответа на этот вопрос мы и продолжим наш путь в этой статье, а также рассмотрим решение.'})]}),(0,l.jsxs)("section",{id:"section-why",children:[(0,l.jsx)(s.xv,{id:"why",title:!0,className:"mt-10 md:text",children:"Почему?"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:['Вопросы "Почему?" могут привести к безумию. Мы постараемся этого избежать! Причин, почему GUI на C++ - это нестерпимая боль, несколько:',(0,l.jsxs)(s.aV,{type:t.RH.number,children:[(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Нет стандартного решения в виде GUI-фреймворка или чего-то подобного."})}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Стандартная библиотека C++ не содержит ни одного модуля для построения приложений с графическим интерфейсом. Даже самый последний, на момент создания статьи, стандарт C++23 обделен такими полезными частями. Все, что сложнее функционала чтения данных с консоли вида ",(0,l.jsx)("u",{children:'"std::cin"'}),", - это работа для сторонних библиотек."]})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"WinAPI имеет низкоуровневую природу."})}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В контексте операционной системы Windows, для создания графических приложений используется классический WinAPI:",(0,l.jsxs)(s.aV,{children:[(0,l.jsxs)("li",{children:["Ручное создание окон и кнопок через ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nc-winuser-wndproc",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"CreateWindowEx"})})}),"."]}),(0,l.jsxs)("li",{children:["Обработка сообщений через ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nc-winuser-wndproc",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"WndProc"})})}),"."]}),(0,l.jsx)("li",{children:"Отсутствие компоновки по сетке или стилей. Все настройки делаются в коде и в таком виде, что интуитивно с этим разобраться практически невозможно."})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Что касается систем *.nix, то там ситуация не лучше. В зависимости от средств вывода, а их много разных, нужно учитывать множество настроек, версии библиотек и многое другое. В каком-то смысле, такая низкоуровневая работа с GUI в Linux еще страшнее, чем в Windows и обычно этим никто не занимается. Да и в Windows тоже, ведь есть упрощающие работу фреймворки и библиотеки, о которых мы еще поговорим ниже."}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Примеры из десятка строк кода для показа обычной кнопки - дело пугающее. Мне страшно, а Вам?"})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Высокий порог вхождения."})}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Из предыдущих пунктов следует и высокий порог вхождения, ведь для созданий GUI требуется сразу несколько серьезных компетенций:",(0,l.jsxs)(s.aV,{children:[(0,l.jsx)("li",{children:"Понимание событийной модели."}),(0,l.jsx)("li",{children:"Навыки управления ресурсами (окна, буфер, шрифты, изображения, дескрипторы и многое другое)."}),(0,l.jsx)("li",{children:"Опыт работы с системами сборки и линковки нативных библиотек."})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Все это может создать непреодолимые препятствия для создания GUI-приложений на C++."})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Но ничего безнадежного нет! Если есть проблема, то есть и решение. Давайте разбираться дальше."})]})]}),(0,l.jsxs)("section",{id:"section-ready-solutions",children:[(0,l.jsx)(s.xv,{id:"ready-solutions",title:!0,className:"mt-10 md:text",children:"Готовые решения"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Мы поняли, что работать с низкоуровневыми API для создания GUI-приложений дело не очень эффективное. Чтобы жизнь разработчика была более счастливой, нужно воспользоваться готовыми библиотеками / фреймворками, тем более некоторые из них кроссплатформенные."}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Рассмотрим список доступных решений."}),(0,l.jsxs)(c.b,{"aria-label":"Пример данных для APDEX",children:[(0,l.jsxs)(d.J,{children:[(0,l.jsx)(a.j,{children:"Библиотека / Фреймворк"},"Library"),(0,l.jsx)(a.j,{children:"Платформа"},"Platform"),(0,l.jsx)(a.j,{children:"Комментарий"},"Comment")]}),(0,l.jsxs)(x.y,{children:[(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://www.qt.io/",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Qt"})})})}),(0,l.jsx)(h.X,{children:"Windows, macOS, Linux, Android"}),(0,l.jsx)(h.X,{children:"Богатый набор API, визуальный дизайнер, множество готовых решений"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://wxwidgets.org/",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"wxWidgets"})})})}),(0,l.jsx)(h.X,{children:"Windows, macOS, Linux"}),(0,l.jsx)(h.X,{children:"Поддержка нативных виджетов"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/ocornut/imgui",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Dear ImGui"})})})}),(0,l.jsx)(h.X,{children:"Любая с рендерингом"}),(0,l.jsx)(h.X,{children:"Мгновенный UI, идеален для тулзов"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/fltk/fltk",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"FLTK"})})})}),(0,l.jsx)(h.X,{children:"Windows, Linux, macOS"}),(0,l.jsx)(h.X,{children:"Компактная, легковесная, C-стиль"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://gtkmm.gnome.org/en/index.html",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"GTKmm"})})})}),(0,l.jsx)(h.X,{children:"Linux/Windows"}),(0,l.jsx)(h.X,{children:"C++-обёртка над GTK"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/chromiumembedded/cef",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"CEF / Ultralight"})})})}),(0,l.jsx)(h.X,{children:"Windows/Linux/macOS"}),(0,l.jsx)(h.X,{children:"GUI на базе Chromium/HTML (WebView-подход)"})]})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Как видите, выбор есть. Qt, конечно же, самое мощное решение, но стрелять из пушки по воробьям не всегда разумно. Qt подойдет для серьезных приложений, т.к. предоставит удобные инструменты и самый богатый API для работы. Но прежде чем выберем решение для дальнейшего рассмотрения, давайте сравним код на разных библиотеках и фреймворках."}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsxs)(s.aV,{type:t.RH.number,children:[(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Классический WinAPI"})}),(0,l.jsx)(r.Z,{code:'\n#include <windows.h>\n\n#define ID_BUTTON 1001\n\nLRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)\n{\n    switch (msg)\n    {\n    case WM_COMMAND:\n        if (LOWORD(wParam) == ID_BUTTON)\n        {\n            MessageBox(hwnd, L"Кнопка нажата!", L"Сообщение", MB_OK | MB_ICONINFORMATION);\n        }\n        break;\n\n    case WM_DESTROY:\n        PostQuitMessage(0);\n        break;\n\n    default:\n        return DefWindowProc(hwnd, msg, wParam, lParam);\n    }\n    return 0;\n}\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow)\n{\n    const wchar_t CLASS_NAME[] = L"MyWindowClass";\n\n    WNDCLASS wc = {};\n    wc.lpfnWndProc   = WndProc;\n    wc.hInstance     = hInstance;\n    wc.lpszClassName = CLASS_NAME;\n    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);\n    wc.hCursor       = LoadCursor(nullptr, IDC_ARROW);\n\n    RegisterClass(&wc);\n\n    HWND hwnd = CreateWindowEx(\n        0, CLASS_NAME, L"Окно с кнопкой",\n        WS_OVERLAPPEDWINDOW,\n        CW_USEDEFAULT, CW_USEDEFAULT, 400, 200,\n        nullptr, nullptr, hInstance, nullptr\n    );\n\n    if (!hwnd) return 0;\n\n    // Создание кнопки\n    CreateWindow(\n        L"BUTTON", L"Нажми меня",\n        WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,\n        120, 70, 150, 30,\n        hwnd, (HMENU)ID_BUTTON, hInstance, nullptr\n    );\n\n    ShowWindow(hwnd, nCmdShow);\n    UpdateWindow(hwnd);\n\n    MSG msg = {};\n    while (GetMessage(&msg, nullptr, 0, 0))\n    {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return 0;\n}\n                                ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Мало декларативности, много ручного труда."})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Qt, единственный и неповторимый"})}),(0,l.jsx)(r.Z,{code:'\n#include <QApplication>\n#include <QWidget>\n#include <QPushButton>\n#include <QMessageBox>\n\nint main(int argc, char *argv[])\n{\n    QApplication app(argc, argv);\n\n    QWidget window;\n    window.setWindowTitle("Пример Qt");\n    window.resize(300, 150);\n\n    QPushButton *button = new QPushButton("Нажми меня", &window);\n    button->setGeometry(80, 50, 140, 40);\n\n    QObject::connect(button, &QPushButton::clicked, [&]() {\n        QMessageBox::information(&window, "Сообщение", "Кнопка нажата!");\n    });\n\n    window.show();\n    return app.exec();\n}\n                                ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Минимум кода — максимум результата. Поддержка стилей, сигналов и слотов."})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Dear ImGui (инструментальный UI)"})}),(0,l.jsx)(r.Z,{code:'\n#include "imgui.h"\n#include "imgui_impl_glfw.h"\n#include "imgui_impl_opengl3.h"\n#include <GLFW/glfw3.h>\n#include <iostream>\n\nint main()\n{\n    // Инициализация GLFW\n    if (!glfwInit()) return -1;\n    GLFWwindow* window = glfwCreateWindow(800, 600, "ImGui + C++", nullptr, nullptr);\n    glfwMakeContextCurrent(window);\n    glfwSwapInterval(1); // VSync\n\n    // Инициализация Dear ImGui\n    IMGUI_CHECKVERSION();\n    ImGui::CreateContext();\n    ImGuiIO& io = ImGui::GetIO(); (void)io;\n\n    // Настройка стиля\n    ImGui::StyleColorsDark();\n\n    // Инициализация платформы и рендерера\n    ImGui_ImplGlfw_InitForOpenGL(window, true);\n    ImGui_ImplOpenGL3_Init("#version 130");\n\n    // Главный цикл\n    while (!glfwWindowShouldClose(window))\n    {\n        glfwPollEvents();\n\n        // Начало нового кадра\n        ImGui_ImplOpenGL3_NewFrame();\n        ImGui_ImplGlfw_NewFrame();\n        ImGui::NewFrame();\n\n        // Создание окна с кнопкой\n        ImGui::Begin("Пример окна");\n        if (ImGui::Button("Нажми меня"))\n        {\n            std::cout << "Кнопка нажата!" << std::endl;\n        }\n        ImGui::End();\n\n        // Рендеринг\n        ImGui::Render();\n        int display_w, display_h;\n        glfwGetFramebufferSize(window, &display_w, &display_h);\n        glViewport(0, 0, display_w, display_h);\n        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());\n        glfwSwapBuffers(window);\n    }\n\n    // Очистка\n    ImGui_ImplOpenGL3_Shutdown();\n    ImGui_ImplGlfw_Shutdown();\n    ImGui::DestroyContext();\n    glfwDestroyWindow(window);\n    glfwTerminate();\n\n    return 0;\n}\n                                ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Отлично подходит для отладчиков, редакторов, панелей инструментов."})]})]})}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Что же выбрать? Сделаем краткую таблицу с критериями выбора."}),(0,l.jsxs)(c.b,{"aria-label":"Пример данных для APDEX",children:[(0,l.jsxs)(d.J,{children:[(0,l.jsx)(a.j,{children:"Критерий"},"Reason"),(0,l.jsx)(a.j,{children:"Рекомендуемое решение"},"Platform")]}),(0,l.jsxs)(x.y,{children:[(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Нативный вид / интеграция"}),(0,l.jsx)(h.X,{children:"Qt, wxWidgets"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Минимальный размер"}),(0,l.jsx)(h.X,{children:"FLTK"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Инструменты / редакторы"}),(0,l.jsx)(h.X,{children:"Dear ImGui"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Кроссплатформенность"}),(0,l.jsx)(h.X,{children:"Qt, ImGui, wxWidgets"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Мультимедиа и 3D"}),(0,l.jsx)(h.X,{children:"Qt (через Qt3D)"})]}),(0,l.jsxs)(o.g,{children:[(0,l.jsx)(h.X,{children:"Интерфейс на HTML/CSS"}),(0,l.jsx)(h.X,{children:"CEF, Ultralight"})]})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Не принимайте эти критерии как истину, т.к. некоторые вещи здесь не указаны для простоты."}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Что же нам нужно? В статье мы рассмотрим создание простого приложения. Для упрощения мы будем делать трейнер под Windows, значит кроссплатформенность нам не нужна. Трейнер будет для ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://www.moddb.com/mods/cc-red-alert-2-reborn1",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"C&C Red Alert 2: Reborn"})})})," с функциями получения бесконечных денег. В целом ничего сложного там не будет. Акцентировать внимание именно на создании трейнера мы не будем, но вот настройку фреймворка / библиотеки для GUI мы разберем детально."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Таким образом, идеальным вариантом для небольшого инструмента будет использование ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/ocornut/imgui",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Dear ImGui"})})}),". Вот так будет выглядеть готовый трейнер, исходный код которого ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/YPermitin.Ra2yrGod",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Вы можете найти на GitHub"})})}),". Там же Вы сможете увидеть все описанные ниже действия по созданию GUI-приложения с нуля."]}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/1. Готовый трейнер.gif",alt:"Готовый трейнер",size:t.h2.SMALL}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Интерфейс простой, но для сквозного примера самое то! Мы видим форму с кнопками и их обработчиками, надпись, поле ввода, простой вывод графика с динамикой изменения баланса игрока в игре, всплывающие подсказки, а также всплывающее модальное окно."}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Время идти дальше!"})]}),(0,l.jsxs)("section",{id:"section-create-project",children:[(0,l.jsx)(s.xv,{id:"create-project",title:!0,className:"mt-10 md:text",children:"Создаем проект"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["И так, мы выбрали ",(0,l.jsx)("b",{children:"Dear ImGui"}),". Теперь мы можем начать создание собственного проекта. Конечно, можно было бы с нуля создать проект в Visual Studio, настроить все зависимости сборки, компоновку и так далее. Но зачем? Мы можем за основу взять готовые примеры в ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/ocornut/imgui/tree/master/examples",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"в репозитории проекта"})})}),"."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Начнем с простого. Выберем каталог для нашего проекта, например ",(0,l.jsx)("u",{children:'"E:\\Develop\\CppHell"'})," и в нем поработаем в командной строке. Сначала клонируем полностью репозиторий ",(0,l.jsx)("b",{children:"Dear ImGui"}),"."]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"ВНИМАНИЕ!!! Вся работа в терминале в примерах выполняется через PowerShell!"})}),(0,l.jsx)(r.Z,{code:'\ncd "E:\\Develop\\CppHell"\ngit clone --recursive https://github.com/ocornut/imgui.git -b docking\ncd imgui\n                    ',className:"my-5",language:"powershell"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Параметр ",(0,l.jsx)("b",{children:"recursive"})," загрузит все подмодули, использованные в проекте. А параметром ",(0,l.jsx)("b",{children:"b"})," мы указали явную ветку ",(0,l.jsx)("b",{children:"docking"}),", в которой доступны дополнительные функции. Хотя для нашего примера можно использовать и ветку ",(0,l.jsx)("b",{children:"master"}),". В результате будет создан подкаталог ",(0,l.jsx)("b",{children:"imgui"}),", перейдем в него."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В репозитории имеется подкаталог ",(0,l.jsx)("b",{children:"examples"}),", в котором можно найти проекты для Visual Studio с различными типами работы фреймворка: DirectX разных версий, Vulkan, OpenGL и другое."]}),(0,l.jsx)(r.Z,{code:"\ncd .\\examples\nls\n\n<#\n\n    Directory: E:\\Develop\\CppHell\\imgui\\examples\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd----          04.07.2025    13:09                example_allegro5\nd----          04.07.2025    13:09                example_android_opengl3\nd----          04.07.2025    13:09                example_apple_metal\nd----          04.07.2025    13:09                example_apple_opengl2\nd----          04.07.2025    13:09                example_glfw_metal\nd----          04.07.2025    13:09                example_glfw_opengl2\nd----          04.07.2025    13:09                example_glfw_opengl3\nd----          04.07.2025    13:09                example_glfw_vulkan\nd----          04.07.2025    13:09                example_glfw_wgpu\nd----          04.07.2025    13:09                example_glut_opengl2\nd----          04.07.2025    13:09                example_null\nd----          04.07.2025    13:09                example_sdl2_directx11\nd----          04.07.2025    13:09                example_sdl2_metal\nd----          04.07.2025    13:09                example_sdl2_opengl2\nd----          04.07.2025    13:09                example_sdl2_opengl3\nd----          04.07.2025    13:09                example_sdl2_sdlrenderer2\nd----          04.07.2025    13:09                example_sdl2_vulkan\nd----          04.07.2025    13:09                example_sdl3_opengl3\nd----          04.07.2025    13:09                example_sdl3_sdlgpu3\nd----          04.07.2025    13:09                example_sdl3_sdlrenderer3\nd----          04.07.2025    13:09                example_sdl3_vulkan\nd----          04.07.2025    13:09                example_win32_directx10\nd----          04.07.2025    13:09                example_win32_directx11\nd----          04.07.2025    13:09                example_win32_directx12\nd----          04.07.2025    13:09                example_win32_directx9\nd----          04.07.2025    13:09                example_win32_opengl3\nd----          04.07.2025    13:09                example_win32_vulkan\nd----          04.07.2025    13:09                libs\n-a---          04.07.2025    13:09          15143 imgui_examples.sln\n-a---          04.07.2025    13:09            604 README.txt\n#>\n                    ",className:"my-5",language:"powershell"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Какой пример проекта нам выбрать в качестве шаблона? Т.к. мы пишем приложение для Windows, то можно использовать самый логичный, на мой взгляд, вариант это WinAPI + DirectX 12, то есть проект ",(0,l.jsx)("b",{children:"example_win32_directx12"}),". Конечно, вы можете его открыть прямо здесь же через файл решения ",(0,l.jsx)("b",{children:"imgui_examples.sln"}),", но тогда при разработке в IDE мы увидим много мусора. Пойдем другим путем и скопируем нужный проект и решение в свой каталог. Также скопируем все зависимости, необходимые для сборки проекта в соответствующие каталоги."]}),(0,l.jsx)(r.Z,{code:'\n# Переходим в наш корневой каталог\ncd "E:\\Develop\\CppHell"\n# Создаем подкаталог для нашего проекта\nmkdir MyApp\ncd MyApp\n# Сохдаем подкаталог для исходных файлов проекта\nmkdir src\n# Копируем сюда каталог проекта "example_win32_directx12" и файл решения "imgui_examples.sln"\ncp "E:\\Develop\\CppHell\\imgui\\examples\\imgui_examples.sln" "E:\\Develop\\CppHell\\MyApp\\src\\imgui_examples.sln"\ncp -r "E:\\Develop\\CppHell\\imgui\\examples\\example_win32_directx12" "E:\\Develop\\CppHell\\MyApp\\src\\example_win32_directx12"\n# Скопируем зависимости\ncp -r "E:\\Develop\\CppHell\\imgui\\backends" "E:\\Develop\\CppHell\\MyApp\\backends"\ncp -r "E:\\Develop\\CppHell\\imgui\\misc" "E:\\Develop\\CppHell\\MyApp\\misc"\ncp "E:\\Develop\\CppHell\\imgui\\im*" "E:\\Develop\\CppHell\\MyApp"\n                    ',className:"my-5",language:"powershell"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В итоге мы имеем все необходимое для сборки проекта в каталоге ",(0,l.jsx)("b",{children:'"E:\\Develop\\CppHell\\MyApp"'}),", кроме настроек. Да, нужно настроить проект."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Самое важное - это установленная Visual Studio 2022 с компонентами разработки десктопных приложений на C++. Мы не будем рассматривать процесс установки, оставлю лишь ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/cpp/build/vscpp-step-0-installation?view=msvc-170",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"эту ссылку"})})}),". DirectX 12 уже предустановлен в Windows 10 и Windows 11, поэтому дополнительно в этой части ничего устанавливать не придется."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Перейдем в каталог ",(0,l.jsx)("b",{children:"src"})," и переименуем файлы решения и файлы проектов."]}),(0,l.jsx)(r.Z,{code:"\ncd src\n# Переимениуем файл решения\nmv .\\imgui_examples.sln .\\MyApp.sln\n# Переименуем каталог проекта\nmv .\\example_win32_directx12 .\\MyApp\n# Переименуем файлы проекта\nmv .\\MyApp\\example_win32_directx12.vcxproj .\\MyApp\\MyApp.vcxproj\nmv .\\MyApp\\example_win32_directx12.vcxproj.filters .\\MyApp\\MyApp.vcxproj.filters\n# В файле решения заменяем подстроку имени проекта на новое значение\n(Get-Content MyApp.sln) -replace 'example_win32_directx12', 'MyApp' | Set-Content MyApp.sln\n                    ",className:"my-5",language:"powershell"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Теперь откроем файл решения ",(0,l.jsx)("b",{children:"E:\\Develop\\CppHell\\MyApp\\src\\MyApp.sln"})," в Visual Studio 2022. При запуске нас уведомят, что не все проекты были успешно загружены. Это нормально, ведь мы скопировали всего один проект из множества. Далее IDE предложит нам конвертировать проект под более новую версию Visual Studio, т.к. изначально примеры сделаны в Visual Studio 2019."]}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/2. Конвертация проекта.jpg",alt:"Конвертация проекта",size:t.h2.SMALL}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Со всем соглашаемся. Теперь мы видим открытую IDE и список незагруженных успешно проектов, кроме одного (тот что мы и скопировали)."}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/3. Битые проекты.png",alt:"Битые проекты",size:t.h2.FUll}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:'Удаляем все "битые" проекты. После этого структура решения будет выглядеть так.'}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/4. Итоговая структура решения.png",alt:"Итоговая структура решения",size:t.h2.FUll}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Чтож, все готово. Давайте проверим не сделали ли мы ошибок и запустим проект. Если все сделано правильно, то сразу запустится демоприложение."}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/5. Демоприложение Dear ImGui.png",alt:"Демоприложение Dear ImGui",size:t.h2.FUll}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:['Мы видим какое-то фоновое окно "DirectX 12...", несколько внутренних окон, а еще есть окно с консольным выводом, которое я не захватил при создании скриншота. На первый взгляд много лишнего, но все в порядке! Это же шаблон проекта, далее мы будем все настраивать под себя и уберем лишнее. На самом деле мы скопировали много лишнего в проект, но это для простоты примера. В папках ',(0,l.jsx)("b",{children:"backend"})," и ",(0,l.jsx)("b",{children:"misc"})," многие файлы потом можно будет удалить, но делайте это с осторожностью."]})]}),(0,l.jsxs)("section",{id:"section-imgui-custom",children:[(0,l.jsx)(s.xv,{id:"imgui-custom",title:!0,className:"mt-10 md:text",children:"Время настройки"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Рабочий шаблон у нас есть, осталось его настроить под себя. Займемся базовой настройкой."}),(0,l.jsxs)(s.aV,{children:[(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Скроем консольный вывод"})}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Согласитесь, что если при запуске графического приложения будет рядом открываться консоль, то выглядит это не очень корректно. Чтобы избавиться от такого поведения нужно в свойствах проекта ",(0,l.jsxs)("b",{children:['"Компоновщик" ',"->",' "Система"']}),' изменить "Подсистему" с "Console" на "Windows".']}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/6. Изменяем подсистему проекта.png",alt:"Изменяем подсистему проекта",size:t.h2.MEDIUM}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Но это еще не всё! При попытке сборки проекта мы увидим ошибку вида:"}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/7. Ошибка сборки проекта.png",alt:"Ошибка сборки проекта",size:t.h2.MEDIUM}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Так происходит, потому что для подсистемы ",(0,l.jsx)("b",{children:"Windows"})," точка входа должна быть другой. Если для консольного приложения была такая функция."]}),(0,l.jsx)(r.Z,{code:"\n// Main code\nint main(int, char**)\n{\n    // Тут остальной код приложения\n}\n                            ",className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:'То для подсистемы "Window" точка входа уже совсем другая.'}),(0,l.jsx)(r.Z,{code:"\n// Main code\nint WinMain(\n    HINSTANCE hInstance,\n    HINSTANCE hPrevInstance,\n    LPSTR lpCmdLine,\n    int hShowCmd\n)\n{\n    // Тут остальной код приложения\n}\n                            ",className:"my-5",language:"cpp"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Выполним эту замену в файле ",(0,l.jsx)("b",{children:"main.cpp"})," и после запуска консольного окна мы больше не увидим. Ура!"]})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Убираем служебное окно DirectX 12"})}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Фактически избавиться от этого окна полностью нельзя. Это окно и используется для отрисовки всего интерфейса. Но то, от чего нельзя избавиться - можно скрыть!"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В файле ",(0,l.jsx)("b",{children:"main.cpp"})," нужно сделать несколько изменений. Первое - заменяем использование ",(0,l.jsx)("b",{children:"CreateWindowW"})," на ",(0,l.jsx)("b",{children:"CreateWindowEx"}),", передав туда соответствующие параметры для скрытия служебного окна и невозможности его вывода или активации в интерфейсе."]}),(0,l.jsx)(r.Z,{code:'\n// Этот вызов отключаем \n// HWND hwnd = ::CreateWindowW(wc.lpszClassName, L"Dear ImGui DirectX12 Example", WS_OVERLAPPEDWINDOW, 100, 100, (int)(1280 * main_scale), (int)(800 * main_scale), nullptr, nullptr, wc.hInstance, nullptr);\n// Создаем окно по своим правилам\nHWND hwnd = ::CreateWindowEx(\n    // Настройки стиля окна\n    WS_EX_LAYERED // Многоуровневое окно\n        | WS_EX_TOPMOST // Окно должно быть помещено над всеми самыми верхними окнами и должно оставаться над ними, даже если окно деактивировано.\n        | WS_EX_NOACTIVATE, // Окно верхнего уровня, созданное с помощью этого стиля, не становится окном переднего плана, когда пользователь щелкает его.\n    wc.lpszClassName,\n    NULL,\n    WS_POPUP,\n    0,\n    0,\n    0,\n    0,\n    NULL,\n    NULL,\n    wc.hInstance,\n    NULL\n);\nSetLayeredWindowAttributes(hwnd, RGB(0, 0, 0), 0, ULW_COLORKEY);\n                            ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Но это еще не все! Нужно откорректировать цвета, чтобы сделать окно окончательно невидимым."}),(0,l.jsx)(r.Z,{code:"\n// Render Dear ImGui graphics\n// Убираем\n// const float clear_color_with_alpha[4] = { clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w };\n// Заполняем черым цветом\nconst float clear_color_with_alpha[4] = { 0.0f, 0.0f, 0.0f, 0.0f };\n                            ",className:"my-5",language:"cpp"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["После внесения изменений в файл ",(0,l.jsx)("b",{children:"main.cpp"})," запустим проект и увидим, что родительского фонового окна больше нет! Теперь фоном на скриншоте служит Visual Studio ",":)"]}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/8. Дочернее окно скрыто!.png",alt:"Дочернее окно скрыто!",size:t.h2.FUll}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Идем дальше!"})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Убираем демо окно"})}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Те окна, что по умолчанию открываются при запуске проекта, это лишь демонстрация функционала библиотеки ",(0,l.jsx)("b",{children:"Dear ImGui"}),". Они очень полезны для изучения работы библиотеки, т.к. в них показана работа большой части функционала компонентов, самой разметки, обработки событий и так далее. Поэтому удалять файлы этих форм из проекта сразу не стоит, они могут пригодиться. Но вот скрыть их отображение и заменить своей отрисовкой нужно."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Как обычно идем в файл ",(0,l.jsx)("b",{children:"main.cpp"})," и комментируем все, что есть между строками."]}),(0,l.jsx)(r.Z,{code:"\n// ...\nImGui::NewFrame();\n\n// Тут все убираем\n\n// Rendering\nImGui::Render();\n// ...\n                            ",className:"my-5",language:"cpp"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Если теперь запустить приложение, то мы вообще ничего не увидим! Добавим реализацию отрисовки своего интерфейса в простейшем виде. Добавим два файла:",(0,l.jsxs)(s.aV,{children:[(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"Application.h"}),(0,l.jsx)(r.Z,{code:'\n#pragma once\n\n#include "windows.h"\n\nnamespace MyApp\n{\n    void renderUI(HWND hwnd);\n}\n                                        ',className:"my-5",language:"cpp"})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"Application.cpp"}),(0,l.jsx)(r.Z,{code:'\n#include "Application.h"\n\n#include "imgui.h"\n\nnamespace MyApp\n{\n    void renderUI(HWND hwnd)\n    {\n        ImGui::Begin("MyApp");\n\n        ImGui::Text("Hello World!");\n\n        ImGui::End();\n    }\n}\n                                        ',className:"my-5",language:"cpp"})]})]})]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Теперь модифицируем файл ",(0,l.jsx)("b",{children:"main.cpp"}),", чтобы в приложении вызывался новый методов ",(0,l.jsx)("b",{children:"renderUI(HWND hwnd)"}),", который теперь и будет отвечать за отрисовку интерфейса нашего приложения."]}),(0,l.jsx)(r.Z,{code:'\n// ...\n// Не забываем включить заголовочный файл\n#include "Application.h"\n// ...\nImGui::NewFrame();\n\n// Вызываем функцию отрисовки интерфейса\nMyApp::renderUI(hwnd);\n\n// Rendering\nImGui::Render();\n// ...\n                             ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Запустим приложение и полюбуемся на эту красоту!"}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/9. Отрисовка работает.png",alt:"Отрисовка работает",size:t.h2.SMALL}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Первоначальная настройка почти готова!"})]}),(0,l.jsxs)("li",{children:[(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:(0,l.jsx)("b",{children:"Кириллицы нам не хватает!"})}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"При попытке использовать кириллицу мы столкнемся с ошибкой."}),(0,l.jsx)(r.Z,{code:'\n#include "Application.h"\n\n#include "imgui.h"\n\nnamespace MyApp\n{\n    void renderUI(HWND hwnd)\n    {\n        ImGui::Begin("MyApp");\n\n        ImGui::Text("Привет Мир!");\n\n        ImGui::End();\n    }\n}\n                            ',className:"my-5",language:"cpp"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Проект просто не соберется и выдаст ошибку вида:",(0,l.jsx)(r.Z,{code:"\nОшибка  C2001   newline в константе\n                            ",className:"my-5",language:"text"})]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Исправить эту проблему достаточно просто. Нужно сохранить проблемный файл с подходящей кодировкой, т.к. текущая стандартная ",(0,l.jsx)("b",{children:"windows-1251"})," (скорее всего она используется при добавлении нового файла в проект) и создает такую проблему."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В Visual Studio открываем нужный файл, а дальше ",(0,l.jsxs)("b",{children:["Файл ","->"," Сохранить как ","->"," Сохранить с кодировкой"]})," (возле кнопки ",(0,l.jsx)("b",{children:"Сохранить"})," нажмите стрелочку). В качестве кодировки выберете ",(0,l.jsx)("b",{children:"UTF-8 с подписью"}),". После этого сборка выполнится успешно."]}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/10. Конвертируем кодировку.png",alt:"Конвертируем кодировку",size:t.h2.MEDIUM}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"После этого сборка выполнится успешно. Но радоваться рано, т.к. после запуска мы увидим это."}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/11. Где же буквы.png",alt:"Где же буквы?",size:t.h2.MEDIUM}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Все дело в том, что подключенный по умолчанию к приложению шрифт не содержит необходимые символы кириллицы. Исправим это! В файле ",(0,l.jsx)("b",{children:"main.cpp"})," найдем комментарий ",(0,l.jsx)("b",{children:'"// Load Fonts"'})," и ниже добавим следующую строку."]}),(0,l.jsx)(r.Z,{code:'\nio.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\arial.ttf", 20, NULL, io.Fonts->GetGlyphRangesCyrillic());\n                            ',className:"my-5",language:"cpp"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Запустим проект еще раз и убедимся, что с кириллицей теперь все в порядке!"}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/12. Кириллица готова.png",alt:"Кириллица готова",size:t.h2.MEDIUM})]})]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Все готово для непосредственной работы над приложением. Вы еще не устали? ",":)"]})]}),(0,l.jsxs)("section",{id:"section-trainer-func",children:[(0,l.jsx)(s.xv,{id:"trainer-func",title:!0,className:"mt-10 md:text",children:"Функционал трейнера"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Надеюсь Вы еще не забыли, что мы создаем трейнер? Мы не будем описывать здесь как все это работает в части взаимодействия с процессом игры, т.к. тема эта другая. В статье ",(0,l.jsx)(s.e9,{newTab:!0,href:"/pages/blog/.NET/2024-05/game-trainer-on-csharp-or-cpp.tsx",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Управляем игровым миром с помощью C++ / C#"})})})," мы подробно рассматривали как реализовать подобное на C++ / C#."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Поэтому кратко опишем что из себя представляет класс трейнера. Заголовочный файл представляет из себя следующее:",(0,l.jsx)(r.Z,{code:'\n// Ra2yrGodImpl.h\n\n#pragma once\n#include <string>\n#include "windows.h"\n\nnamespace Ra2yrGodImpl\n{\n    class Ra2yrGod\n    {\n        std::string processName;\n        int processId;\n        HANDLE processHandle;\n        time_t lastProcessHandleCheck;\n        bool processHandleValid;\n        HMODULE processBaseModule;\n\n        bool playerMoneyFrozen;\n    public:\n        Ra2yrGod();\n        ~Ra2yrGod();\n\n        bool initProcess();\n        bool processConnected(bool forceCheck = false);\n\n        int getProcessId();\n        std::string getProcessName();\n\n        int getPlayerMoney();\n        void setPlayerMoney(int money);\n        bool playerMoneyFrozenState();\n        void freezePlayerMoney(bool enable, int targetMoney);\n\n    private:\n        void resetState();\n        void freezePlayerMoneyTask(int targetMoney);\n    };\n}\n                        ',className:"my-5",language:"cpp"})]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В этом классе имеются следующие методы:",(0,l.jsxs)(s.aV,{children:[(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"initProcess"})," - подключение к процессу игры."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"processConnected"})," - проверка состояния подключения к процессу игры."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"getProcessId"})," - получить PID процесса игры."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"getProcessName"})," - получить имя процесса игры."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"getPlayerMoney"})," - получить текущий денежный баланс игрока."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"setPlayerMoney"})," - установить денежный баланс игрока."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"playerMoneyFrozenState"})," - признак, что баланс игрока заморожен."]}),(0,l.jsxs)("li",{children:[(0,l.jsx)("b",{children:"freezePlayerMoney"})," - заморозка / разморозка денежного баланса игрока."]})]})]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Полную реализацию функционала трейнера Вы можете посмотреть в репозитории ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/YPermitin.Ra2yrGod/tree/main/src/Ra2yrGod",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Ra2yrGod"})})}),"."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Сейчас же достаточно добавить в свой проект файлы ",(0,l.jsx)("b",{children:"Ra2yrGodImpl.h"})," и ",(0,l.jsx)("b",{children:"Ra2yrGodImpl.cpp"}),", а также вспомогательные функции в файлах ",(0,l.jsx)("b",{children:"Ra2yrGodHelper.h"})," и ",(0,l.jsx)("b",{children:"Ra2yrGodHelper.cpp"}),"."]})]}),(0,l.jsxs)("section",{id:"section-my-gui",children:[(0,l.jsx)(s.xv,{id:"my-gui",title:!0,className:"mt-10 md:text",children:"Время GUI"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Мы ранее добавляли алгоритм отрисовки GUI в файле ",(0,l.jsx)("b",{children:"Application.cpp"}),". Настало время реализовать отрисовку целевого интерфейса и всей логики его работы. Внесем изменения в файл ",(0,l.jsx)("b",{children:"Application.cpp"}),":"]}),(0,l.jsx)(r.Z,{code:'\n// Application.cpp\n\n#include "Application.h"\n#include "Ra2yrGodImpl.h"\n#include <ctime>\n#include "imgui.h"\n\nnamespace Ra2yrGod\n{\n    // Инициализация объекта для управления процессом игры\n    static Ra2yrGodImpl::Ra2yrGod god;\n    // Флаг, что окно открыто\n    static bool windowsShow = true;\n    // Текущее значение баланса игрока для отображения на форме\n    static int playerMoney = -1;\n    // Время последней проверки баланса игрока.\n    // Автоматически значение обновляется раз в секунду.\n    static time_t lastMoneyCheck;\n    // Данные для отрисовки на графике. Обновляются раз в секунду и отображают только данные\n    // за последние 60 секунд.\n    static float balanceHistory[60] = {};\n    static int balanceHistoryItem = 0;\n\n    void renderUI(HWND hwnd)\n    {\n        // Если флаг открытого окна сброшен, то значит была нажата кнопка закрытия окна.\n        // В этом случае выходим из приложения\n        if (!windowsShow)\n        {\n            exit(0);\n        }\n\n        // Проверяем есть ли подключение к процессы игры\n        bool processConnected = god.processConnected();\n\n        // Начинаем описание открытия формы\n        ImGui::Begin("Ra2yr God", &windowsShow);\n\n        // Определяем заголовок главной кнопки\n        std::string mainCommandLabel;\n        if (processConnected)\n        {\n            mainCommandLabel = "Переподключиться к процессу игры";\n        }\n        else\n        {\n            mainCommandLabel = "Подключиться к процессу игры";\n        }\n\n        // Инициализация кнопки подключения к процессу игры и обработчика ее нажатия\n        if (ImGui::Button(mainCommandLabel.c_str()))\n        {\n            // Подключение к процессу\n            god.initProcess();\n            // Проверяем успешность подключения к процессу игры\n            processConnected = god.processConnected(true);\n\n            // Считываем текущий баланс игрока\n            playerMoney = god.getPlayerMoney();\n            time(&lastMoneyCheck);\n\n            // Показываем уведомление о найденном процессе во всплывающем модальном окне\n            ImGui::OpenPopup("Подключение##ProcessConnect");\n        }\n\n        // Модальное окно открываем по центру родительского\n        ImVec2 parentPos = ImGui::GetWindowPos();\n        ImVec2 parentSize = ImGui::GetWindowSize();\n        ImVec2 modalSize(300, 150);\n        ImVec2 modalPos = ImVec2(\n            parentPos.x + (parentSize.x - modalSize.x) * 0.5f,\n            parentPos.y + (parentSize.y - modalSize.y) * 0.5f\n        );\n        ImGui::SetNextWindowPos(modalPos, ImGuiCond_Appearing);\n        ImGui::SetNextWindowSize(modalSize, ImGuiCond_Appearing);\n        // Описание модального окна\n        if (ImGui::BeginPopupModal("Подключение##ProcessConnect", NULL, ImGuiWindowFlags_AlwaysAutoResize))\n        {\n            int processId = god.getProcessId();\n            std::string processName = god.getProcessName();\n            if (processId > 0)\n            {\n                ImGui::Text("Процесс игры успешно подключен!\n\n%s (%d)", processName.c_str(), processId);\n            }\n            else\n            {\n                ImGui::Text("Не удалось найти процесс игры!");\n            }\n\n            ImGui::Separator();\n\n            if (ImGui::Button("OK", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }\n            ImGui::SetItemDefaultFocus();\n            ImGui::SameLine();\n\n            ImGui::EndPopup();\n        }\n\n        // Если подключение к процессу установлено, то отрисовываем остальной интерфейс\n        if (processConnected)\n        {\n            // Надпись с информацией о процессе игры\n            ImGui::Text("Процесс: %s (%d)", god.getProcessName().c_str(), god.getProcessId());\n                        \n            // Кнопка для обновления баланса игрока на форме и подсказка к ней\n            if (ImGui::Button("Обновить##UpdateBalance"))\n            {\n                playerMoney = god.getPlayerMoney();\n                time(&lastMoneyCheck);\n            }\n            if (ImGui::IsItemHovered())\n                ImGui::SetTooltip("Обновить данные о текущем балансе игрока.");\n\n            // Следующий элемент на той же линии\n            ImGui::SameLine();\n\n            // Кнопка заморозки / разморозки баланса игрока\n            std::string frozenBalanceLabel;\n            if (god.playerMoneyFrozenState())\n            {\n                frozenBalanceLabel = "Разморозить";\n            }\n            else\n            {\n                frozenBalanceLabel = "Заморозить";\n            }\n            frozenBalanceLabel += "##FreezeBalance";\n            if (ImGui::Button(frozenBalanceLabel.c_str()))\n            {\n                bool playerMoneyFrozen = !god.playerMoneyFrozenState();\n                god.freezePlayerMoney(playerMoneyFrozen, playerMoney);\n            }\n            if (ImGui::IsItemHovered())\n                ImGui::SetTooltip(""Заморозить" текущий баланс игрока.");\n                        \n            // Поле ввода с балансом игрока\n            if (ImGui::InputInt("##Balance", &playerMoney, 1, 1000))\n            {\n                god.setPlayerMoney(playerMoney);\n            };\n\n            // Если поле с балансом игрока не активно и не редактируется,\n            // а также с последнего обновления баланса прошло больше секунды,\n            // то считываем новое значение.\n            if (!ImGui::IsItemActivated() && !ImGui::IsItemFocused())\n            {\n                // Раз в секунду обновляем информацию о текущем балансе,\n                // если элемент не активен в данный момент.\n                time_t currentDateTime;\n                time(&currentDateTime);\n                int lastCheckTimeLeftSec = std::difftime(currentDateTime, lastMoneyCheck);\n                if (lastCheckTimeLeftSec >= 1)\n                {\n                    playerMoney = god.getPlayerMoney();\n                    time(&lastMoneyCheck);\n\n                    balanceHistoryItem++;\n                    if (balanceHistoryItem > 60)\n                        balanceHistoryItem = 1;\n                    balanceHistory[balanceHistoryItem - 1] = playerMoney;                    \n                }\n            }\n            if (ImGui::IsItemHovered())\n                ImGui::SetTooltip("Денежный баланс игрока.");\n\n            // Отображаем график с динамикой изменения баланса игрока\n            ImGui::PlotLines("##BalanceStatistic", balanceHistory, 60);\n        }\n\n        // Завершение отрисовки формы\n        ImGui::End();\n    }    \n}\n                    ',className:"my-5",language:"cpp"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["В листинге кода максимально прокомментировал каждый шаг по отрисовке элементов и добавлению обработчиков. Стоит отметить очень важную деталь! Отрисовка интерфейса выполняется в цикле ",(0,l.jsx)("b",{children:"while"})," в ",(0,l.jsx)("b",{children:"main.cpp"}),". Реализовано это так, что обновление кадров выполняется до 60 раз в секунду. То есть до 60 FPS. Поэтому в ",(0,l.jsx)("b",{children:"Application.cpp"})," есть проверки частоту обновления баланса игрока и некоторые другие уже в самом классе трейнера."]}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Более подробно о реализации интерфейса Вы можете посмотреть в ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/ocornut/imgui/wiki",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Dear ImGui"})})}),"."]})]}),(0,l.jsxs)("section",{id:"section-done",children:[(0,l.jsx)(s.xv,{id:"done",title:!0,className:"mt-10 md:text",children:"Проверяем работу"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Мы закончили работу с приложением и можно проверять его работу. Мы прошли путь длинный путь:",(0,l.jsxs)(s.aV,{children:[(0,l.jsx)("li",{children:"Выбор фреймворка / библиотеки на C++ для создания GUI."}),(0,l.jsx)("li",{children:"Создание каркаса проекта на основе шаблона WinAPI + DirectX 12."}),(0,l.jsx)("li",{children:"Адаптация проекта под наши нужны."}),(0,l.jsx)("li",{children:"Добавление функционала трейнера для игры Red Alert 2: Reborn."}),(0,l.jsx)("li",{children:"Описание интерфейса с логикой обработчиков элементов и отрисовкой."}),(0,l.jsx)("li",{children:"Сборка и запуск приложения, проверка работы."})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"На самом деле работа готового трейнера не сильно отличается от того, что мы видели в самом начале."}),(0,l.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/CPP/2025-07/cpp-path-to-gui/1. Готовый трейнер.gif",alt:"Готовый трейнер",size:t.h2.SMALL}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["При появлении интереса, Вы можете самостоятельно ознакомиться с результатами труда, что мы сегодня сделали. В ",(0,l.jsx)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/YPermitin.Ra2yrGod",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"экспериментальном проекте трейнера Ra2yrGod"})})})," Вы сможете найти весь код из примеров, а также запустить приложение у себя на компьютере собственными руками."]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Удачи с этим!"})]}),(0,l.jsxs)("section",{id:"section-alter",children:[(0,l.jsx)(s.xv,{id:"alter",title:!0,className:"mt-10 md:text",children:"Альтернативные решения"}),(0,l.jsxs)(s.xv,{textAlign:t.PH.JUSTIFY,children:["Мы хорошо поработали сегодня, но можно ли пойти другим путем? Вот несколько альтернативных путей.",(0,l.jsxs)(s.aV,{children:[(0,l.jsx)("li",{children:"C++ backend + WPF - логика на C++, UI на WPF (.NET, C#)"}),(0,l.jsx)("li",{children:"C++ backend + Blazor WebView / MAUI UI пишется на .NET, логика — на C++"}),(0,l.jsx)("li",{children:"CEF + React — визуализация на HTML, логика может быть в C++"}),(0,l.jsx)("li",{children:"C++ + Python GUI (через PyBind) — GUI на PyQt, бизнес-логика на C++"})]})]}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Эти варианты проще в разработке, но ничто не обгонит C++ в производительности, в т.ч. при построении GUI. Не зря разработка игр до сих пор использует C++."})]}),(0,l.jsxs)("section",{id:"section-end",children:[(0,l.jsx)(s.xv,{id:"end",title:!0,className:"mt-10 md:text",children:"Вместо заключения"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Графические приложения на C++ это возможно, и в целом даже не сложно, если знать куда смотреть и что делать. Порог вхождения высокий, но и результаты в части производительности достигаются наилучшие."}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"Мы рассмотрели все базовые вопросы по теме создания GUI на C++. Идти этим путем или создавать GUI более дружелюбными инструментами решать Вам, разработчикам!"}),(0,l.jsx)(s.xv,{textAlign:t.PH.JUSTIFY,children:"А на сегодня все! Увидимся в мире разработки позже, ведь еще столько всего интересного!"})]}),(0,l.jsxs)("section",{id:"section-link",children:[(0,l.jsx)(s.xv,{id:"link",title:!0,className:"mt-10 md:text",children:"Полезные ссылки"}),(0,l.jsxs)(s.aV,{children:[(0,l.jsx)("li",{children:(0,l.jsxs)(s.e9,{newTab:!0,href:"https://github.com/ocornut/imgui",children:[(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Dear ImGui"})})," - библиотека для создания GUI на C++."]})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://tproger.ru/digest/cpp-best-gui",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Обзор графических библиотек C++"})})})}),(0,l.jsx)("li",{children:(0,l.jsx)(s.e9,{newTab:!0,href:"https://historian.by/learning/programming/cplusplus/500/cplusplus_500.php",children:(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:"Создание программы с графическим интерфейсом на C++ с использованием WinAPI"})})})})]})]})]})},12250:function(n,e,i){"use strict";var l,s;i.d(e,{b:function(){return l}}),(s=l||(l={})).Min="350px",s.Standard="700px",s.Large="1000x",s.Unlimited=""},13803:function(n,e,i){"use strict";var l=i(37340),s=i(85893),r=i(67294),t=i(14965),c=i(54951),d=i(41686),a=i(12250);function x(){let n=(0,l._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return x=function(){return n},n}function o(){let n=(0,l._)(["\n        max-height: ","\n    "]);return o=function(){return n},n}e.Z=n=>{let{code:e,className:l,language:h,maxHeight:p=a.b.Standard}=n;(void 0!==i.g?i.g:window).Prism=t.p1,i(61354),i(79016),i(2731),i(35266),i(92927),i(51315),i(57874),i(86862);let m=null!=p?p:a.b.Standard,j=d.ZP.pre(x()),u=(0,d.ZP)(j)(o(),m);return(0,s.jsx)("div",{className:(0,c.GF)("bg-blue-500 md:p-1 p-2",l),children:(0,s.jsx)("div",{className:"shadow-lg",children:(0,s.jsx)(t.y$,{theme:t.np.vsDark,code:e.trim(),language:null!=h?h:h="tsx",children:n=>{let{className:e,style:i,tokens:l,getLineProps:t,getTokenProps:c}=n;return(0,s.jsx)(u,{className:e,style:i,children:l.map((n,e)=>(0,r.createElement)("div",{...t({line:n,key:e}),key:Math.random()},n.map((n,e)=>(0,r.createElement)("span",{...c({token:n,key:e}),key:Math.random()}))))})}})})})}},97037:function(n,e,i){"use strict";i.d(e,{Ee:function(){return c},Xg:function(){return r},Y7:function(){return o},aV:function(){return a},e9:function(){return x},o_:function(){return h},tf:function(){return p},ty:function(){return d},xv:function(){return t}});var l=i(5152),s=i.n(l);let r=s()(()=>Promise.all([i.e(549),i.e(4738),i.e(4838),i.e(1664),i.e(1274)]).then(i.bind(i,91274)),{loadableGenerated:{webpack:()=>[91274]}}),t=s()(()=>Promise.all([i.e(4454),i.e(7897)]).then(i.bind(i,97897)),{loadableGenerated:{webpack:()=>[97897]}}),c=s()(()=>Promise.all([i.e(3536),i.e(2726)]).then(i.bind(i,2726)),{loadableGenerated:{webpack:()=>[2726]}}),d=s()(()=>Promise.all([i.e(549),i.e(378)]).then(i.bind(i,90378)),{loadableGenerated:{webpack:()=>[90378]}}),a=s()(()=>Promise.all([i.e(9300),i.e(7200)]).then(i.bind(i,7200)),{loadableGenerated:{webpack:()=>[7200]}}),x=s()(()=>Promise.all([i.e(1664),i.e(8681)]).then(i.bind(i,28681)),{loadableGenerated:{webpack:()=>[28681]}});s()(()=>i.e(2857).then(i.bind(i,22857)),{loadableGenerated:{webpack:()=>[22857]}});let o=s()(()=>Promise.all([i.e(2004),i.e(3070)]).then(i.bind(i,63070)),{loadableGenerated:{webpack:()=>[63070]}}),h=s()(()=>Promise.all([i.e(162),i.e(4380),i.e(3959),i.e(6050),i.e(239),i.e(8568)]).then(i.bind(i,32215)),{loadableGenerated:{webpack:()=>[32215]}}),p=s()(()=>Promise.all([i.e(162),i.e(1664),i.e(3959),i.e(6050),i.e(4205)]).then(i.bind(i,84205)),{loadableGenerated:{webpack:()=>[84205]}})}},function(n){n.O(0,[4104,162,7810,4380,4612,2888,9774,179],function(){return n(n.s=28836)}),_N_E=n.O()}]);