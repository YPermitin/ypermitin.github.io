(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6670],{4883:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/.NET/2024-03/deploy-asp-net-core-on-linux",function(){return s(2747)}])},2747:function(e,n,s){"use strict";s.r(n);var r=s(5893),a=s(4853);s(7294);var i=s(4313),l=s(9209);n.default=()=>(0,r.jsxs)(a.Xg,{blogcentered:!0,children:[(0,r.jsx)(a.xv,{children:"Последовательность действий для развертывания ASP.NET Core сервиса в Ubuntu Linux. От создания и адаптации приложения, до его развертывания и запуска. Рассматриваются вопросы регистрации репозиториев Microsoft, установка Apache и .NET, реверс-прокси и некоторая диагностика."}),(0,r.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Содержание"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p1-lets-start",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Мы начинаем"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p2-ready-to-start",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Сервис готов к запуску"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p3-project-preparation",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Подготовка проекта"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p4-install-and-configure-apache",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Установка веб-сервера"})})})}),(0,r.jsxs)("li",{children:[(0,r.jsx)(a.e9,{href:"#p5-dot-net-env",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Подготовка среды .NET"})})}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p5-1-ms-repo",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Настройка репозитория Microsoft"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p5-2-install-packages",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Установка пакетов"})})})})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)(a.e9,{href:"#p6-deploy-app",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Публикация приложения"})})}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p6-1-deploy-dot-net-app",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:".NET-приложение"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p6-2-deploy-as-daemon",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Настройка демона *.nix"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p6-3-reverse-proxy",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Реверс-прокси"})})})})]})]}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p7-check",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Проверка работы"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p8-final",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Это еще не конец"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{href:"#p9-links",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Полезные ссылки"})})})})]}),(0,r.jsx)(a.xv,{id:"p1-lets-start",title:!0,className:"mt-10 md:text",children:"Мы начинаем"}),(0,r.jsx)(a.xv,{children:"Минули те времена, когда платформа .NET (в те времена .NET Framework) фактически была без поддержки кроссплатформенности, и вся ее жизнь вертелась вокруг экосистемы Microsoft Windows. Начиная с 2016 года, компания Microsoft выпустила .NET Core, новую ветку развития экосистемы .NET с поддержкой кроссплатформенной разработки и развертывания приложений различных видов. На начало 2024 года .NET Core уже эволюционировал в .NET 9 с огромным количеством улучшений, расширений функционала и прочим."}),(0,r.jsx)(a.xv,{children:"С тех пор мы получили более обширные возможности в части создания и построения приложений. В том числе, теперь мы можем создавать веб-службы на базе ASP.NET Core, фактически API с поддержкой архитектуры REST, полностью на кроссплатформенных рельсах."}),(0,r.jsx)(a.xv,{children:"Но сегодня мы не будем делать обзор на все возможности платформы .NET, а лишь рассмотрим шаги по развертыванию готовых приложений ASP.NET Core Web API в *.nix-системах на примере Ubuntu Linux. В официальной документации есть исчерпывающая информация по этой теме, однако, мы попытаемся представить более наглядный, сквозной пример, начиная от установки веб-сервера, настройки репозиториев пакетов, установки окружения .NET и добавления демона для работы сервиса."}),(0,r.jsxs)(a.xv,{children:["Для более подробного изучения материала Вы также можете обратиться к следующим ссылкам:",(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://dotnet.microsoft.com",children:(0,r.jsx)("b",{children:".NET is the free, open-source, cross-platform framework for building modern apps and powerful cloud services."})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/first-web-api",children:(0,r.jsx)("b",{children:"Руководство по созданию веб-API с помощью ASP.NET Core"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/host-and-deploy/linux-apache",children:(0,r.jsx)("b",{children:"Размещение ASP.NET Core в операционной системе Linux с Apache"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/host-and-deploy/linux-nginx",children:(0,r.jsx)("b",{children:"Среда размещения ASP.NET Core в операционной системе Linux с Nginx"})})})]}),(0,r.jsx)(a.xv,{children:"Итак, вступление законечно. Поехали!"})]}),(0,r.jsx)(a.xv,{id:"p2-ready-to-start",title:!0,className:"mt-10 md:text",children:"Сервис готов к запуску"}),(0,r.jsx)(a.xv,{children:"В рамках публикации мы создадим минималистичный API для развертывания, но никто не мешает Вам использовать свой какой-либо проект в качестве подопытного при публикации."}),(0,r.jsxs)(a.xv,{children:["В случае, если Вам нужно создать какое-то минимальное API для развертывания, то можно воспользоваться отличным руководством ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/min-web-api",children:(0,r.jsx)("b",{children:"Руководство. Создание минимального API с помощью ASP.NET Core"})}),", либо воспользоваться простой командой в консоли:"]}),(0,r.jsx)(i.Z,{code:"\ndotnet new webapi -n SimpleApiToDeploy\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/1. Создание проекта API.png",alt:"Создание проекта API",size:l.h2.MEDIUM}),(0,r.jsxs)(a.xv,{children:[(0,r.jsx)("u",{children:(0,r.jsx)("b",{children:"SimpleApiToDeploy"})})," - имя проекта проекта API, которое мы будем использовать в дальнейшем. Переходим непосредственно в каталог проекта и проверяем содержимое."]}),(0,r.jsx)(i.Z,{code:"\ncd SimpleApiToDeploy\nls -lt\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Мы должны увидеть несколько файлов / каталогов. Что-то вроде этого."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/2. Содержимое простейшего проекта.png",alt:"Содержимое простейшего проекта",size:l.h2.MEDIUM}),(0,r.jsxs)(a.xv,{children:["Вся логика работы этого минималистичного проекта API содержится в файле ",(0,r.jsx)("b",{children:"Program.cs"}),":"]}),(0,r.jsx)(i.Z,{code:'\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\nvar summaries = new[]\n{\n    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n};\n\napp.MapGet("/weatherforecast", () =>\n{\n    var forecast =  Enumerable.Range(1, 5).Select(index =>\n        new WeatherForecast\n        (\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n        ))\n        .ToArray();\n    return forecast;\n})\n.WithName("GetWeatherForecast")\n.WithOpenApi();\n\napp.Run();\n\nrecord WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n                ',className:"my-5",language:"csharp"}),(0,r.jsxs)(a.xv,{children:["Фактически API имеет единственный метод GET по адресу ",(0,r.jsx)("b",{children:"/weatherforecast"}),", который возвращает случайную информацию о погоде в 5 городах из списка. Нам этот проект подходит для демонстрации."]}),(0,r.jsx)(a.xv,{children:"Соберем проект и запустим его."}),(0,r.jsx)(i.Z,{code:"\ndotnet restore\ndotnet run\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Сервис будет запущен на случайном порту, который будет указан в логах в самом начале при старте приложения. В нашем случае это порт 5297."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/3. Проверочный запуск минимального API.png",alt:"Проверочный запуск минимального API",size:l.h2.MEDIUM}),(0,r.jsx)(a.xv,{children:"При обращении к сервису по следующему URL (http://localhost:5297/weatherforecast) мы получим ожидаемый результат (ну или почти ожидаемый, ведь он формируется случайными образом)."}),(0,r.jsx)(i.Z,{code:'\n[\n    {\n        "date": "2024-03-10",\n        "temperatureC": 37,\n        "summary": "Hot",\n        "temperatureF": 98\n    },\n    {\n        "date": "2024-03-11",\n        "temperatureC": 25,\n        "summary": "Sweltering",\n        "temperatureF": 76\n    },\n    {\n        "date": "2024-03-12",\n        "temperatureC": 54,\n        "summary": "Warm",\n        "temperatureF": 129\n    },\n    {\n        "date": "2024-03-13",\n        "temperatureC": 2,\n        "summary": "Hot",\n        "temperatureF": 35\n    },\n    {\n        "date": "2024-03-14",\n        "temperatureC": -11,\n        "summary": "Balmy",\n        "temperatureF": 13\n    }\n]\n                ',className:"my-5",language:"json"}),(0,r.jsxs)(a.xv,{children:["Итого, у нас есть готовый API-сервис для запуска на Linux! На самом деле подойдет и любой другой сервис на современных версиях ASP.NET Core, поэтому дальнейшие инструкции по развертыванию будут в некотором смысле универсальными. Напоследок отметим, что весь пример будет выполняться в следующем окружении:",(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:".NET 8"}),(0,r.jsx)("li",{children:"Веб-сервер Apache"}),(0,r.jsx)("li",{children:"Ubuntu Server 22.04"})]}),"Однако инструкция актуальна и для более ранних версий .NET, веб-сервера Apache и Ubuntu Server."]}),(0,r.jsx)(a.xv,{id:"p3-project-preparation",title:!0,className:"mt-10 md:text",children:"Подготовка проекта"}),(0,r.jsx)(a.xv,{children:"У нас есть документация и некоторый проект для публикации. Но на самом деле проект еще не готов! Да, он запустится в окружении разработчика, но если мы его опубликуем в таком виде как есть, то заставить его работать не получится. Сервис просто не будет обрабатывать наши запросы при использовании веб-сервера Apache (или Nginx) в качестве реверс-прокси."}),(0,r.jsxs)(a.xv,{children:["Все дело в том, что при запуске API-сервиса на базе ASP.NET Core в *.nix-системах (да в целом и в других тоже), платформа .NET использует встроенный высокопроизводительный веб-сервер Kestrel, который может обособленно работать. Но обычно ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/fundamentals/servers/kestrel",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Kestrel"})})})," не используется явно для публикации сервиса. Вместо этого используется конфигурация реверс-прокси, когда запросы извне сначала поступают на внешний веб-сервер (Apache, Nginx), а уже далее переадресуются непосредственно на веб-сервер Kestrel и сам сервис для обработки запроса."]}),(0,r.jsxs)(a.xv,{children:["Причины, по которым чаще всего используется схема с реверс-прокси:",(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:"Без реверс-прокси, совместное использование одного и того же IP-адреса и порта несколькими процессами не поддерживается."}),(0,r.jsx)("li",{children:"Реверс-прокси дает возможность ограничивать общедоступную область приложений."}),(0,r.jsx)("li",{children:"Обеспечивает дополнительный уровень конфигурации и защиты."}),(0,r.jsx)("li",{children:"Значительно упрощает настройку балансировщика нагрузки."}),(0,r.jsx)("li",{children:"И многое другое."})]})]}),(0,r.jsxs)(a.xv,{children:["Более подробную информацию об использовании Kestrel в конфигурации реверс-прокси можно посмотреть ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache?view=aspnetcore-8.0#configure-a-proxy-server",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"в официальной документации"})})}),"."]}),(0,r.jsx)(a.xv,{children:"Мы не будем исключением и также будем использовать схему реверс-прокси при развертывании. В нашем случае в качестве веб-сервера будет Apache. Но прежде чем перейти к настройкам веб-сервера нам необходимо адаптировать наше решение, чтобы оно могло корректно обрабатывать запросы, присланные через ревеверс-прокси."}),(0,r.jsxs)(a.xv,{children:["Модифицируем файл ",(0,r.jsx)("b",{children:"Program.cs"}),", добавив поддержку обработки пересылаемых заголовков через реверс-прокси. Новые строки выделены через ",(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"!!!"})}),"."]}),(0,r.jsx)(i.Z,{code:'\nusing Microsoft.AspNetCore.HttpOverrides;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// !!! Конфигурируем обработку пересылаемых заголовков запросов\nbuilder.Services.Configure<ForwardedHeadersOptions>(options =>\n{\n    options.ForwardedHeaders =\n        ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;\n});\n// !!! Конфигурируем обработку пересылаемых заголовков запросов\n\n// Add services to the container.\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// !!! Добавляем в конвеер обработки HTTP-запроса компонент работы с пересылаемыми заголовками\napp.UseForwardedHeaders();\n// !!! Добавляем в конвеер обработки HTTP-запроса компонент работы с пересылаемыми заголовками\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\nvar summaries = new[]\n{\n    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n};\n\napp.MapGet("/weatherforecast", () =>\n{\n    var forecast =  Enumerable.Range(1, 5).Select(index =>\n        new WeatherForecast\n        (\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n        ))\n        .ToArray();\n    return forecast;\n})\n.WithName("GetWeatherForecast")\n.WithOpenApi();\n\napp.Run();\n\nrecord WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n                ',className:"my-5",language:"csharp"}),(0,r.jsx)(a.xv,{children:"Фактически, сначала мы добавили конфигурацию обработки пересылаемых заголовков."}),(0,r.jsx)(i.Z,{code:"\n// ...\n\n// !!! Конфигурируем обработку пересылаемых заголовков запросов\nbuilder.Services.Configure<ForwardedHeadersOptions>(options =>\n{\n    options.ForwardedHeaders =\n        ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;\n});\n// !!! Конфигурируем обработку пересылаемых заголовков запросов\n\n// ...\n                ",className:"my-5",language:"csharp"}),(0,r.jsx)(a.xv,{children:"А после добавили использование компонента с указанными выше настройками в конвеер обработки HTTP-запросов."}),(0,r.jsx)(i.Z,{code:"\n// ...\n\n// !!! Добавляем в конвеер обработки HTTP-запроса компонент работы с пересылаемыми заголовками\napp.UseForwardedHeaders();\n// !!! Добавляем в конвеер обработки HTTP-запроса компонент работы с пересылаемыми заголовками\n\n// ...\n                ",className:"my-5",language:"csharp"}),(0,r.jsxs)(a.xv,{children:["Не забываем добавлять все необходимые пространства имен, но это Вам уже подскажет IDE. Более подробную информацию о настройке реверс-прокси Вы можете узнать ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"в официальной документации"})})}),", в том числе о работе с конфигурацией IIS, HTTP.sys, Kestrel + IIS, Nginx и др."]}),(0,r.jsx)(a.xv,{children:"После проделанных изменений проект готов к сборке и публикации. Продолжим мы с установки и настройки веб-сервера."}),(0,r.jsx)(a.xv,{id:"p4-install-and-configure-apache",title:!0,className:"mt-10 md:text",children:"Установка веб-сервера"}),(0,r.jsxs)(a.xv,{children:["Как уже говорилось ранее, для реверс-прокси будем использовать Apache. Подробную информацию Вы можете посмотреть в ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache?view=aspnetcore-8.0#configure-apache",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"официальной документации"})})}),"."]}),(0,r.jsx)(a.xv,{children:"Подключимся к нашему серверу и установим все необходимые пакеты. В нашем примере это Ubuntu Server 22.04, но в целом подход будет одинаковый практически для всех *.nix-дистрибутивов."}),(0,r.jsxs)(a.xv,{children:["Ниже команда для установки как самого веб-сервера Apache, так и модуля ",(0,r.jsx)("b",{children:"mod_proxy"})," для него с другими необходимыми компонентами."]}),(0,r.jsx)(i.Z,{code:"\nsudo apt install apache2\n \nsudo a2enmod rewrite\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod headers\nsudo a2enmod ssl\n \nsudo systemctl restart apache2\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"На этом базовая установка Apache для публикации нашего приложения завершена. Позже мы еще вернемся к настройкам публикации, но это после настройки .NET-окружения."}),(0,r.jsx)(a.xv,{id:"p5-dot-net-env",title:!0,className:"mt-10 md:text",children:"Подготовка среды .NET"}),(0,r.jsx)(a.xv,{children:"Для работы нашего приложения нужно, чтобы на сервере были установлены компоненты платформы .NET. Выше мы уже упоминали, что приложение использует .NET 8. Эту версию и установим в два шага. На первом - настроим репозитории Microsoft, чтобы устанавливать пакеты последних версий из официального репозитория. На втором - установим уже непосредственно пакеты нужных версий."}),(0,r.jsx)(a.xv,{id:"p5-1-ms-repo",subtitle:!0,className:"mt-10 md:text",children:"Настройка репозитория Microsoft"}),(0,r.jsx)(a.xv,{children:"Многие дистрибутивы уже имеют в репозиториях пакеты платформы .NET, но они могут быть устаревших версий и с задержкой получать обновления. Поэтому мне более предпочтительно использовать официальный репозиторий Microsoft, т.к. кроме .NET из него получаю и другие пакеты (PowerShell, например)."}),(0,r.jsxs)(a.xv,{children:["Добавить официальный репозиторий пакетов Microsoft можно ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"по следующей инструкции"})})}),". Для нашей ситуации на Ubuntu 22.04 регистрация нового источника пакетов будет выглядеть следующим образом."]}),(0,r.jsx)(i.Z,{code:"\n# Определяем версию Ubuntu Server\ndeclare repo_version=$(if command -v lsb_release &> /dev/null; then lsb_release -r -s; else grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '\"'; fi)\n\n# Загружаем ключ и пакет для регистрации репозитория Microsoft\nwget https://packages.microsoft.com/config/ubuntu/$repo_version/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n\n# Устанавливаем\nsudo dpkg -i packages-microsoft-prod.deb\n\n# Удаляем загруженный пакет, т.к. он уже больше не понадобится\nrm packages-microsoft-prod.deb\n\n# Обновляем список доступных пакетов с учетом нового источника\nsudo apt update\n                ",className:"my-5",language:"bash"}),(0,r.jsxs)(a.xv,{children:["Но радоваться рано, т.к. пакеты в репозитории Microsoft и в репозитории дистрибутива могут быть одни и те же, то часто можно встретиться с конфликтами при установке и обновлении пакетов. Чтобы избежать подобных проблем, необходимо настроить приоритеты источников пакетов. Выполним для этого следующие команды, создающие файлы настроек приоритетов для пакетов ",(0,r.jsx)("b",{children:"dotnet*"})," и ",(0,r.jsx)("b",{children:"aspnet*"}),"."]}),(0,r.jsx)(i.Z,{code:"\nsudo sh -c \"cat > /etc/apt/preferences.d/dotnet <<'EOF'\nPackage: dotnet*\nPin: origin packages.microsoft.com\nPin-Priority: 1001\nEOF\"\n\nsudo sh -c \"cat > /etc/apt/preferences.d/aspnet <<'EOF'\nPackage: aspnet*\nPin: origin packages.microsoft.com\nPin-Priority: 1001\nEOF\"\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"На этом регистрация репозитория пакетов Microsoft завершена, можно переходить к установке .NET 8."}),(0,r.jsx)(a.xv,{id:"p5-2-install-packages",subtitle:!0,className:"mt-10 md:text",children:"Установка пакетов"}),(0,r.jsxs)(a.xv,{children:["Для работы нашего приложения достаточно установить пакет ",(0,r.jsx)("b",{children:"aspnetcore-runtime-8.0"}),", в котором содержится ",(0,r.jsx)("b",{children:".NET Runtime 8"}),"и часть платформы ",(0,r.jsx)("b",{children:"ASP.NET Core"})," для работы веб-приложений."]}),(0,r.jsx)(a.xv,{children:"Не будем ходить вокруг да около, установим нужный пакет."}),(0,r.jsx)(i.Z,{code:"\nsudo apt install aspnetcore-runtime-8.0\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"После завершения процесса скачивания и установки пакетов, мы можем проверить корректность установки. Выполним команду получения списка установленных версий .NET."}),(0,r.jsx)(i.Z,{code:"\ndotnet --list-runtimes\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"В результате мы получим список установленных пакетов, который будет выглядеть примерно так."}),(0,r.jsx)(i.Z,{code:"\nMicrosoft.AspNetCore.App 8.0.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\nMicrosoft.NETCore.App 8.0.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\n                ",className:"my-5",language:"text"}),(0,r.jsx)(a.xv,{children:"Теперь все готово для публикации непосредственно приложения и дальнейшей настройки веб-сервера."}),(0,r.jsxs)(a.xv,{children:["Подробнее про установку .NET на различные дистрибутивы *.nix и в разных вариантах можно ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#install-net",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"узнать в официальной документации"})})}),"."]}),(0,r.jsx)(a.xv,{id:"p6-deploy-app",title:!0,className:"mt-10 md:text",children:"Публикация приложения"}),(0,r.jsx)(a.xv,{children:"Публикация нашего сервиса будет в три этапа. Сначала мы разместим файлы приложения. После этого настроим демона, чтобы приложение работала в фоне и им было удобно управлять. И на последнем этапе настроим Apache для работы в качестве реверс-прокси, о чем уже говорилось ранее. Все подготовительные работы на данный момент уже выполнены, поэтому проблем быть не должно."}),(0,r.jsx)(a.xv,{id:"p6-1-deploy-dot-net-app",subtitle:!0,className:"mt-10 md:text",children:".NET-приложение"}),(0,r.jsx)(a.xv,{children:"Сначала подготовим файлы публикации приложения. Вернемся на нашу машину разработчика, где в самом начале мы создавали и запускали наш сервис. Выполним следующую команду для создания дистрибутива файлов приложения для публикации."}),(0,r.jsx)(i.Z,{code:"\ndotnet publish -c Release\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"В результате мы получим версию дистрибутива приложения, готовую для публикации. Сформированные файлы можно найти по пути:"}),(0,r.jsx)(i.Z,{code:"\n./SimpleApiToDeploy/bin/Release/net8.0/publish\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Нам нужно упаковать эти файлы и отправить на сервер для публикации. Сделаем это через SFTP, но Вы можете сделать любым другим удобным способом."}),(0,r.jsx)(i.Z,{code:"\n# Помещаем каталог с файлами публикации в архив\nzip -r publish.zip publish\n\n# Подключаемся к серверу по SFTP (в нашем случае это srv-dev-02, он же 192.168.88.41)\nsftp srv-dev-02.yy.corp\n\n# Отправляем архив на сервер для развертывания\n# sftp>\nput publish.zip\n\n# Выходим из сессии SFTP\nexit\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"При этом передача архива с файлами публикации выглядит так."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/4. Передача файлов по SFTP.png",alt:"Передача файлов по SFTP",size:l.h2.MEDIUM}),(0,r.jsxs)(a.xv,{children:["Теперь архив с файлами приложения на конечном сервере, можно продолжать настройку. Создадим каталог ",(0,r.jsx)("b",{children:"api"})," по пути ",(0,r.jsx)("b",{children:"/var/www/api"})," и дадим на каталог права для пользователя ",(0,r.jsx)("b",{children:"www-data"}),"."]}),(0,r.jsx)(i.Z,{code:"\n# Создаем каталог для файлов приложения сервиса\nsudo mkdir /var/www/api\n\n# Установим unzip для распаковки архива, если не был установлен ранее\nsudo apt-get install unzip\n\n# Распаковываем архив с файлами приложения\nunzip publish.zip\n\n# Переносим файлы приложения в каталог приложения\nsudo cp /home/ypermitin/publish/* /var/www/api\n\n# Настраиваем права доступа для возможности веб-сервера работать с ними\nsudo chown -R www-data:www-data /var/www/api\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"На данном этапе мы можем вручную запустить приложение для проверки. Выполняем команду."}),(0,r.jsx)(i.Z,{code:"\ndotnet SimpleApiToDeploy.dll\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/5. Ручной запуск сервиса на сервере.png",alt:"Ручной запуск сервиса на сервере",size:l.h2.MEDIUM}),(0,r.jsx)(a.xv,{children:"Конечно, сервис после запуска недоступен извне, но он уже запускается и даже работает. Для теста можно отправить запрос непосредственно с сервера, из другой SSH-сессии."}),(0,r.jsx)(i.Z,{code:"\ncurl http://localhost:5000/weatherforecast\n                ",className:"my-5",language:"bash"}),(0,r.jsxs)(a.xv,{children:["В ответ мы также получим данные метода ",(0,r.jsx)("b",{children:"/weatherforecast"})," (пример JSON смотрите выше), значит, все работает штатно. Ура!"]}),(0,r.jsx)(a.xv,{children:"Но запускать сервис вручную и сидеть с открытой сессией и запущенным сервисом - дело неблагодарное. Пора настроить запуск сервиса в виде демона."}),(0,r.jsx)(a.xv,{id:"p6-2-deploy-as-daemon",subtitle:!0,className:"mt-10 md:text",children:"Настройка демона *.nix"}),(0,r.jsxs)(a.xv,{children:["Для запуска нашего сервиса в виде демона используем ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://ru.wikipedia.org/wiki/Systemd",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"systemd"})})}),", который позволит управлять процессом сервиса (запуск, остановка и перезапуск и др.)."]}),(0,r.jsx)(a.xv,{children:"Первым делом создадим файл конфигурации демона."}),(0,r.jsx)(i.Z,{code:"\nsudo nano /etc/systemd/system/api.service\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Содержимое файла настроек следующее."}),(0,r.jsx)(i.Z,{code:"\n[Unit]\n# Описание\nDescription=SimpleApiToDeploy\n \n[Service]\n# Каталог с файлами приложения\nWorkingDirectory=/var/www/api/\n# Команда запуска процесса\nExecStart=/usr/bin/dotnet /var/www/api/SimpleApiToDeploy.dll\n# Перезапускать всегда\nRestart=always\n# При аварийном завершении процесса перезапускаем его через 10 секунд\nRestartSec=10\nKillSignal=SIGINT\n# Идентификатор\nSyslogIdentifier=api\n# Пользователь для запуска\nUser=www-data\n# Имя окружения для приложения\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\n \n[Install]\nWantedBy=multi-user.target\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"В файле конфигурации даны комментарии на каждый элемент."}),(0,r.jsx)(a.xv,{children:"Стандартно Kestrel запускается и слушает порт 5000 и только с localhost (то есть непосредственно с самого сервера). Это поведение можно изменить, поменяв порт или открыв прослушивание вне сервера. Изменить настройку можно двумя способами."}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsxs)(a.xv,{children:["В файл ",(0,r.jsx)("b",{children:"appsettings.json"})," нужно добавить секцию с настройками точек подключения для Kestrel.",(0,r.jsx)(i.Z,{code:'\n"Kestrel": {\n  "Endpoints": {\n    "Http": {\n      "Url": "http://localhost:5000"\n    }\n  }\n}\n                            ',className:"my-5",language:"json"}),(0,r.jsx)(a.xv,{children:"Это настройка по умолчанию. Если необходимо изменить порт, например, на 5555 и при этом разрешить подключение извне, то настройка будет выглядеть следующим образом."}),(0,r.jsx)(i.Z,{code:'\n"Kestrel": {\n  "Endpoints": {\n    "Http": {\n      "Url": "http://*:5555"\n    }\n  }\n}\n                            ',className:"my-5",language:"json"})]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(a.xv,{children:["Альтернативный способ - это прописать настройки в параметрах запуска приложения. Например, если само приложение мы запускаем такой командой.",(0,r.jsx)(i.Z,{code:"\ndotnet SimpleApiToDeploy.dll\n                            ",className:"my-5",language:"bash"}),(0,r.jsxs)(a.xv,{children:["То добавив соответствующие параметры запуска мы получим тот же результат, что и добавление конфигурации в ",(0,r.jsx)("b",{children:"appsettings.json"}),"."]}),(0,r.jsx)(i.Z,{code:'\ndotnet SimpleApiToDeploy.dll --urls "http://*:5555"\n                            ',className:"my-5",language:"bash"})]})})]}),(0,r.jsxs)(a.xv,{children:["По правде говоря, существует гораздо больше способов настройки Kestrel с различными опциями, но рассматривать тут это мы не будем. Вместо этого Вы можете обратиться ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints?view=aspnetcore-8.0#configure-endpoints",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"к официальной документации"})})}),"."]}),(0,r.jsx)(a.xv,{children:"Тем более что в нашем примере нет никакой необходимости изменять настройки точек подключения Kestrel - мы оставим параметры по умолчанию. Приложение будет прослушивать порт 5000 и только внутри сервера. Веб-сервер Apache, выступающий реверс-прокси, будет переадресовать весь трафик по этим настройкам подключения."}),(0,r.jsx)(a.xv,{children:"Итак, приложение мы опубликовали, добавили файл настроек демона systemd. Осталось включить его и запустить, после чего проверить состояние."}),(0,r.jsx)(i.Z,{code:"\n# Включаем\nsudo systemctl enable api.service\n# Запускаем\nsudo systemctl start api.service\n# Проверяем\nsudo systemctl status api.service\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/6. Проверка работы демона systemd.png",alt:"Проверка работы демона systemd",size:l.h2.MEDIUM}),(0,r.jsxs)(a.xv,{children:["Теперь управление состоянием сервиса проще простого, ",(0,r.jsx)("b",{children:"systemd"})," сделает всю работу за нас. Остался последний вопрос - это открыть доступ к сервису извне, чтобы он мог принимать запросы не только непосредственно с сервера, но и с других машин в сети. То есть остается настроить реверс-прокси."]}),(0,r.jsx)(a.xv,{id:"p6-3-reverse-proxy",subtitle:!0,className:"mt-10 md:text",children:"Реверс-прокси"}),(0,r.jsxs)(a.xv,{children:["Настроить реверс-прокси не так уж и сложно. Может потребоваться время для изучения документации веб-сервера, который Вы используете, но в целом процесс и логика настройки везде одинаковая. ",(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache?view=aspnetcore-8.0",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"В официальной документации"})})})," этот процесс достаточно подробно расписан."]}),(0,r.jsx)(a.xv,{children:"Мы же сейчас пройдемся по основным шагам настройки. Выше мы уже установили сам веб-сервер Apache и все необходимые модули для поддержки режима работы как реверс-прокси. Осталось добавить настройки сайта."}),(0,r.jsx)(a.xv,{children:"Создадим файл настроек сайта."}),(0,r.jsx)(i.Z,{code:"\nsudo nano /etc/apache2/sites-available/api.conf\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Содержимое файла настроек будет следующее."}),(0,r.jsx)(i.Z,{code:"\n<VirtualHost *:80>\n    ProxyPreserveHost On\n    ProxyPass / http://localhost:5000/\n    ProxyPassReverse / http://localhost:5000/\n    ServerName api\n    ServerAlias *.api\n    ErrorLog ${APACHE_LOG_DIR}api-error.log\n    CustomLog ${APACHE_LOG_DIR}api-access.log common\n</VirtualHost>\n                ",className:"my-5",language:"text"}),(0,r.jsx)(a.xv,{children:"Суть настройки в том, что запросы, поступающие на сервер и порт 80 (стандартный порт для HTTP) будут переадресованы на наш сервис, который прослушивает порт 5000. Также в файле настроек определены файлы логов для сайта и имена, которые в нашем примере не играют никакой роли."}),(0,r.jsx)(a.xv,{children:"После сделанных настроек включаем новый сайт."}),(0,r.jsx)(i.Z,{code:"\nsudo a2ensite api\nsudo systemctl reload apache2\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Т.к. у нас простейший пример, и мы не привязали DNS-имя к сайту, то для работы нужно отключить сайт по умолчанию для Apache, чтобы только наша добавленная конфигурация прослушивала 80-й порт."}),(0,r.jsx)(i.Z,{code:"\nsudo a2dissite 000-default.conf\nservice apache2 reload\n                ",className:"my-5",language:"bash"}),(0,r.jsx)(a.xv,{children:"Теперь сервис доступен извне. На скриншоте ниже мы обращаемся напрямую через IP-адрес и порт 80 (по умолчанию, поэтому явно не задается)."}),(0,r.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/7. Сервис доступен из вне.png",alt:"Сервис доступен из вне",size:l.h2.SMALL}),(0,r.jsx)(a.xv,{children:"В рабочем окружении отключать сайт по умолчанию у Apache обычно не практикуется, т.к. он используется как заглушка для сервера. Вся переадресация на нужный сайт на одном и том же порту идет через DNS-имя. Но, чтобы не усложнять пример, мы сайт по умолчанию просто отключили."}),(0,r.jsx)(a.xv,{children:"Фактически, мы уже прошли весь путь по подготовке и настройке сервиса, реверс-прокси для него и публикации на сервере. Поздравляю!"}),(0,r.jsx)(a.xv,{id:"p7-check",title:!0,className:"mt-10 md:text",children:"Проверка работы"}),(0,r.jsxs)(a.xv,{children:["На самом деле саму работу мы уже проверили, перейдя по ссылке метода ",(0,r.jsx)("b",{children:"/weatherforecast"})," выше на скриншоте. Но мы можем проверить работу и более технологичным способом ",":)",". Сделаем несколько таких же запросов, но через Postman, ведь именно его чаще всего используют для отладки работы различных API."]}),(0,r.jsx)(a.Y7,{className:"margin: 5px",url:"/public/imp_assets/.NET/2024-03/deploy-asp-net-core-on-linux/8. Тестируем API в Postman.webm"}),(0,r.jsx)(a.xv,{children:"Оно живое! Оно работает!"}),(0,r.jsx)(a.xv,{id:"p8-final",title:!0,className:"mt-10 md:text",children:"Это еще не конец"}),(0,r.jsx)(a.xv,{children:"На этом наш путь по подготовке и публикации API-сервиса на базе ASP.NET Core WebAPI закончен. Мы настроили Ubuntu Server 22.04 для установки пакетов Microsoft и установили .NET 8 для запуска приложения, установили веб-сервер Apache и настроили реверс прокси."}),(0,r.jsx)(a.xv,{children:"На самом деле на рабочем окружении редко приходится все это проделывать вручную, т.к. приложение либо публикуется в контейнере (где все подобное уже настроено через yaml-файл Docker Compose), либо публикация автоматизирована через, например, Jenkins. Но иногда и ручной процесс применяется, плюс он важен для понимания происходящего."}),(0,r.jsx)(a.xv,{children:"Ниже оставлю полезные ссылки по теме для более детального изучения."}),(0,r.jsx)(a.xv,{children:"Удачи в делах и успехов!"}),(0,r.jsx)(a.xv,{id:"p9-links",title:!0,className:"mt-10 md:text",children:"Полезные ссылки"}),(0,r.jsxs)(a.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://dotnet.microsoft.com",children:(0,r.jsx)("b",{children:".NET is the free, open-source, cross-platform framework for building modern apps and powerful cloud services."})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/first-web-api",children:(0,r.jsx)("b",{children:"Руководство по созданию веб-API с помощью ASP.NET Core"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/host-and-deploy/linux-apache",children:(0,r.jsx)("b",{children:"Размещение ASP.NET Core в операционной системе Linux с Apache"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/host-and-deploy/linux-nginx",children:(0,r.jsx)("b",{children:"Среда размещения ASP.NET Core в операционной системе Linux с Nginx"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/min-web-api",children:(0,r.jsx)("b",{children:"Руководство. Создание минимального API с помощью ASP.NET Core"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/aspnet/core/fundamentals/servers/kestrel",children:(0,r.jsx)("b",{children:"Веб-севрер Kestrel"})})}),(0,r.jsx)("li",{children:(0,r.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer",children:(0,r.jsx)("b",{children:"Настройка прокси и балансировщика нагрузки для ASP.NET Core"})})})]})]})},7855:function(e,n,s){"use strict";var r,a;s.d(n,{b:function(){return r}}),(a=r||(r={})).Min="350px",a.Standard="700px",a.Large="1000x",a.Unlimited=""},4313:function(e,n,s){"use strict";var r=s(7340),a=s(5893),i=s(7294),l=s(4965),t=s(1240),c=s(1686),d=s(7855);function o(){let e=(0,r._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return o=function(){return e},e}function h(){let e=(0,r._)(["\n        max-height: ","\n    "]);return h=function(){return e},e}n.Z=e=>{let{code:n,className:r,language:x,maxHeight:p=d.b.Standard}=e;(void 0!==s.g?s.g:window).Prism=l.p1,s(1354),s(9016),s(5266),s(2927),s(1315),s(7874),s(6862);let m=null!=p?p:d.b.Standard,u=c.ZP.pre(o()),j=(0,c.ZP)(u)(h(),m);return(0,a.jsx)("div",{className:(0,t.GF)("bg-blue-500 md:p-1 p-2",r),children:(0,a.jsx)("div",{className:"shadow-lg",children:(0,a.jsx)(l.y$,{theme:l.np.vsDark,code:n.trim(),language:null!=x?x:x="tsx",children:e=>{let{className:n,style:s,tokens:r,getLineProps:l,getTokenProps:t}=e;return(0,a.jsx)(j,{className:n,style:s,children:r.map((e,n)=>(0,i.createElement)("div",{...l({line:e,key:n}),key:Math.random()},e.map((e,n)=>(0,i.createElement)("span",{...t({token:e,key:n}),key:Math.random()}))))})}})})})}},4853:function(e,n,s){"use strict";s.d(n,{Ee:function(){return t},Xg:function(){return i},Y7:function(){return h},aV:function(){return d},e9:function(){return o},o_:function(){return x},tf:function(){return p},ty:function(){return c},xv:function(){return l}});var r=s(5152),a=s.n(r);let i=a()(()=>Promise.all([s.e(9686),s.e(4738),s.e(4838),s.e(1664),s.e(8765)]).then(s.bind(s,8765)),{loadableGenerated:{webpack:()=>[8765]}}),l=a()(()=>Promise.all([s.e(9511),s.e(935)]).then(s.bind(s,935)),{loadableGenerated:{webpack:()=>[935]}}),t=a()(()=>Promise.all([s.e(328),s.e(7651)]).then(s.bind(s,7651)),{loadableGenerated:{webpack:()=>[7651]}}),c=a()(()=>Promise.all([s.e(9686),s.e(6979)]).then(s.bind(s,6979)),{loadableGenerated:{webpack:()=>[6979]}}),d=a()(()=>Promise.all([s.e(4159),s.e(7355)]).then(s.bind(s,7355)),{loadableGenerated:{webpack:()=>[7355]}}),o=a()(()=>Promise.all([s.e(1664),s.e(3220)]).then(s.bind(s,3220)),{loadableGenerated:{webpack:()=>[3220]}});a()(()=>s.e(3140).then(s.bind(s,3140)),{loadableGenerated:{webpack:()=>[3140]}});let h=a()(()=>Promise.all([s.e(2004),s.e(736)]).then(s.bind(s,736)),{loadableGenerated:{webpack:()=>[736]}}),x=a()(()=>Promise.all([s.e(8331),s.e(2877),s.e(2660),s.e(9718),s.e(5090),s.e(9606)]).then(s.bind(s,9606)),{loadableGenerated:{webpack:()=>[9606]}}),p=a()(()=>Promise.all([s.e(8331),s.e(1664),s.e(2660),s.e(9718),s.e(8496)]).then(s.bind(s,8496)),{loadableGenerated:{webpack:()=>[8496]}})}},function(e){e.O(0,[6443,2888,9774,179],function(){return e(e.s=4883)}),_N_E=e.O()}]);