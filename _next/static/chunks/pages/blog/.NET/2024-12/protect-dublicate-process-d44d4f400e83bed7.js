(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2894],{28661:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/.NET/2024-12/protect-dublicate-process",function(){return i(47895)}])},47895:function(e,n,i){"use strict";i.r(n);var t=i(85893),l=i(97037);i(67294);var r=i(13803),s=i(46416);n.default=()=>(0,t.jsxs)(l.Xg,{blogcentered:!0,children:[(0,t.jsxs)(l.xv,{textAlign:s.PH.RIGHT,quote:!0,children:["Копия об оригинале: — это моя вторая натура!",(0,t.jsx)("br",{}),"(с) Владимир Михайлович Хочинский"]}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Небольшая заметка по контролю запуска дубликатов процесса"}),(0,t.jsx)(l.xv,{title:!0,className:"mt-10 md:text",children:"Содержание"}),(0,t.jsxs)(l.aV,{children:[(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#about",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"О чём речь?"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#control-windows",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Контроль под Windows"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#control-linux",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Контроль под *.nix"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#alternatives",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Альтернативы"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#endgame",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Вот и всё"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)(l.e9,{href:"#link",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Полезные материалы"})})})})]}),(0,t.jsxs)("section",{id:"section-about",children:[(0,t.jsx)(l.xv,{id:"about",title:!0,className:"mt-10 md:text",children:"О чём речь?"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Сегодня мы рассмотрим простейший пример решения простейшей задачи. При разработке приложений может понадобиться сделать защиту, чтобы приложение нельзя было запускать несколько раз."}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Такое может понадобится, если параллельный запуск нескольких экземпляров процесса потенциально приводит к поломкам работы приложения или всей операционной системы (да, такое тоже бывает)."}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["По сравнению с предыдущими темами, которые мы рассматривали в контексте управления процессами в C# / C++, эта тема довольно простая. Вот те самые предыдущие публикации:",(0,t.jsxs)(l.aV,{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)(l.e9,{newTab:!0,href:"/pages/blog/.NET/2024-07/processes-under-control.tsx",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Берем процессы под контроль в .NET"})})})," "]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(l.e9,{newTab:!0,href:"/pages/blog/CPP/2024-11/cpp-control-child-processes-with-winapi.tsx",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Контроль дочерних процессов с помощью C++ и WinAPI"})})})," "]})]})]}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Время начинать!"})]}),(0,t.jsxs)("section",{id:"section-control-windows",children:[(0,t.jsx)(l.xv,{id:"control-windows",title:!0,className:"mt-10 md:text",children:"Контроль под Windows"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Наш пример контроля под Windows будет в контексте работы с консольным приложением. Вот весь итоговый листинг кода с контролем запуска дубля приложения."}),(0,t.jsx)(r.Z,{code:'\nusing System.Threading;\n\nnamespace ProcessControl\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            // Создаем объект синхронизации типа мьютекс (mutex),\n            // с помощью которого можно контролировать доступ к ресурсам между\n            // потоками или отдельными процессами.\n            bool createdNew;\n            Mutex appMutex = new Mutex(\n                // Вызывающий поток должен быть владельцем мьютекса.\n                // То есть мы не сможем получить объект мьютекса, если он был создан\n                // другими процессами или потоками.\n                true,\n                // Уникальное имя мьютекса. Для примера используем имя приложения.\n                AppDomain.CurrentDomain.FriendlyName, \n                // Возвращает признак того, что предоставлено владением мьютексом.\n                out createdNew);\n\n            if (createdNew)\n            {\n                // Мьютекс был успешно создан и предоставлено право владения.\n                // То есть это первый уникальный запущенный процесс приложения.\n\n                Console.WriteLine("Это первый запуск приложения. Продолжаем работу...");\n\n                Console.WriteLine("Для выхода нажмите любую клавишу...");\n                Console.ReadKey();\n\n                // Освобождаем мьютекс\n                appMutex.ReleaseMutex();\n            }\n            else\n            {\n                // Создать и получить право владения мьютексом не удалось.\n                // Значит объект занят другими процессами.\n\n                Console.WriteLine("Это дубликат запущенного приложения. Прерываем работу...");\n\n                // Эмуляция работы по завершению приложения.\n                Thread.Sleep(5000);\n\n                // Завершаем процесс с кодом возврата 1, что говорит об ошибке.\n                Environment.Exit(1);\n            }\n        }\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["В целом все довольно просто. Создаем объект мьютекса (",(0,t.jsx)(l.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/dotnet/api/system.threading.mutex?view=net-8.0",children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Mutex"})})}),"). Это объект ядра операционной системы, позволяющий синхронизировать доступ к ресурсами между потоками и даже между процессами. Последняя возможность нам как раз и нужна, ведь контроль работает между несколькими процессами."]}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Мы создаем объект мьютекса с указанем получения права владения. Это позволяет определить, что мы не получим мьютекс, созданный другими процессами. Если в итоге мы получаем флаг, что мьютекс был создан успешно, то это означает уникальный первый запуск приложения. В противном случае это дубликат и нам нужно завершить работу."}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Но это работает только под Windows, т.к. поведение объектов Mutex в *.nix будет иным."})]}),(0,t.jsxs)("section",{id:"section-control-linux",children:[(0,t.jsx)(l.xv,{id:"control-linux",title:!0,className:"mt-10 md:text",children:"Контроль под *.nix"}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["При решении той же задачи под *.nix поведение объектов ",(0,t.jsx)("b",{children:"Mutex"})," будетм другим и приведенное выше решение уже не будет корректно работать."]}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["Но есть решение и в этом случае, которое больше походит на настоящий *.nix-way. В Linux все это файлы, значит и объект синхронизации у нас тоже может быть файлом. Создадим вспомогательный класс ",(0,t.jsx)("b",{children:"LockfileMutex"}),', с помощью которого будем устанавливать эксклюзивную блокировку файла. Именно это и будем нашим "мьютексом".']}),(0,t.jsx)(r.Z,{code:'\npublic class LockfileMutex : IDisposable {\n    private readonly string _fileName;\n\n    private FileStream? _stream;\n\n    public LockfileMutex(string name) \n    {\n        var assemblyDir = Path.GetDirectoryName(typeof(LockfileMutex).Assembly.Location) ?? throw new FileNotFoundException("cannot determine assembly location");\n        var file = Path.GetFullPath(Path.Combine(assemblyDir, name));\n        _fileName = file;\n    }\n\n    public bool Acquire() {\n        try {\n            _stream = new FileStream(_fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None);\n            return true;\n        } catch (IOException ex) when (ex.Message.Contains(_fileName)) {\n            return false;\n        }\n    }\n\n    public void Dispose() {\n        if (_stream != null) {\n            _stream.Dispose();\n\n            try {\n                File.Delete(_fileName);\n            } catch {\n                // ignored\n            }\n        }\n\n        GC.SuppressFinalize(this);\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Класс используется для создания файла блокировки (он же Lock-файл) с последующей установкой эксклюзивного доступа к нему. Пока прилоежние будет активно, эта блокировка файла будет сохраняться и не позволит его заблокировать другим процессам или потокам."}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Ниже пример консольного прилоежния под *.nix, которое будет использовать описанный выше класс."}),(0,t.jsx)(r.Z,{code:'\nnamespace ProcessControl;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string controlFileName = $"{AppDomain.CurrentDomain.FriendlyName}Lock";\n        using (var mutex = new LockfileMutex(controlFileName))\n        {\n            if (mutex.Acquire())\n            {\n                // Мьютекс был успешно создан и предоставлено право владения.\n                // То есть это первый уникальный запущенный процесс приложения.\n\n                Console.WriteLine("Это первый запуск приложения. Продолжаем работу...");\n\n                Console.WriteLine("Для выхода нажмите любую клавишу...");\n                Console.ReadKey();\n            }\n            else\n            {\n                // Создать и получить право владения мьютексом не удалось.\n                // Значит, объект занят другими процессами.\n\n                Console.WriteLine("Это дубликат заппущенного приложения. Прерываем работу...");\n\n                // Эмуляция работы по завершению приложения.\n                Thread.Sleep(5000);\n\n                // Завершаем процесс с кодом возврата 1, что говорит об ошибке.\n                Environment.Exit(1);\n            }\n        }\n    }\n\n    public class LockfileMutex : IDisposable {\n        private readonly string _fileName;\n\n        private FileStream? _stream;\n\n        public LockfileMutex(string name) {\n            var assemblyDir = Path.GetDirectoryName(typeof(LockfileMutex).Assembly.Location) ?? throw new FileNotFoundException("cannot determine assembly location");\n            var file = Path.GetFullPath(Path.Combine(assemblyDir, name));\n            _fileName = file;\n        }\n\n        public bool Acquire() {\n            try {\n                _stream = new FileStream(_fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None);\n                return true;\n            } catch (IOException ex) when (ex.Message.Contains(_fileName)) {\n                return false;\n            }\n        }\n\n        public void Dispose() {\n            if (_stream != null) {\n                _stream.Dispose();\n\n                try {\n                    File.Delete(_fileName);\n                } catch {\n                    // ignored\n                }\n            }\n\n            GC.SuppressFinalize(this);\n        }\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"В целом этот подход будет работать и под Windows, но там у нас есть объект ядра Mutex. А если нет разницы, то зачем городить костыли?"})]}),(0,t.jsxs)("section",{id:"section-alternatives",children:[(0,t.jsx)(l.xv,{id:"alternatives",title:!0,className:"mt-10 md:text",children:"Альтернативы"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"На самом деле есть множество других способов контроля дубликата запущенного процесса. Мы лишь рассмотрели самые простые и надежные."}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["К альтернативным способам контроля можно отнести:",(0,t.jsxs)(l.aV,{children:[(0,t.jsx)("li",{children:"Проверка списка запущенных процессов и поиск в нем дубликата процессов по имени."}),(0,t.jsx)("li",{children:"Сохранение файла во временный каталог и проверка его наличия или его блокировка. В целом этот способ чем-то похож на предложенный выше путь для Linux, но реализуется проще."}),(0,t.jsx)("li",{children:"Поиск существующего процесса по открытым сетевым портам для прослушивания."}),(0,t.jsx)("li",{children:"Проверка служебных записей в базе данных приложения, если такая присутствует."}),(0,t.jsx)("li",{children:"И многие другие."})]})]}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Все как обычно зависит от конкретной задачи. Ознакомлен - значит вооружен!"})]}),(0,t.jsxs)("section",{id:"section-endgame",children:[(0,t.jsx)(l.xv,{id:"endgame",title:!0,className:"mt-10 md:text",children:"Вот и всё"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"В этой министатье мы рассмотрели способы контроля дубликата запущенного приложения (и его процесса) двумя самыми распостраненными способами."}),(0,t.jsxs)(l.xv,{textAlign:s.PH.JUSTIFY,children:["Первый был под Windows и использовал объект ядра ",(0,t.jsx)("b",{children:"мьютекс (mutex)"}),", а второй больше подходил под *.nix системы и использовал файл блокировки."]}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Конечно, это лишь поверхностное освещение темы. Есть множество альтернативных способов решения той же задачи. В многообразии сила!"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"Спасибо за интерес к теме и удачи в делах!"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"А самое главное - с наступающим Новым 2025 Годом!"}),(0,t.jsx)(l.xv,{textAlign:s.PH.JUSTIFY,children:"P.S. Если же вы читаете это уже в наступившем Новом году, то с Новым Годом!"})]}),(0,t.jsxs)("section",{id:"section-link",children:[(0,t.jsx)(l.xv,{id:"link",title:!0,className:"mt-10 md:text",children:"Полезные ссылки"}),(0,t.jsxs)(l.aV,{children:[(0,t.jsx)("li",{children:(0,t.jsxs)(l.e9,{newTab:!0,href:"https://metanit.com/sharp/tutorial/11.7.php",children:[(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Мьютексы"})})," - инструмент управления синхронизацией потоков."]})}),(0,t.jsx)("li",{children:(0,t.jsxs)(l.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/dotnet/api/system.threading.mutex?view=net-8.0",children:[(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:"Mutex"})})," - примитив синхронизации, который также может использоваться в межпроцессной синхронизации."]})})]})]})]})},12250:function(e,n,i){"use strict";var t,l;i.d(n,{b:function(){return t}}),(l=t||(t={})).Min="350px",l.Standard="700px",l.Large="1000x",l.Unlimited=""},13803:function(e,n,i){"use strict";var t=i(37340),l=i(85893),r=i(67294),s=i(14965),a=i(54951),c=i(41686),d=i(12250);function x(){let e=(0,t._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return x=function(){return e},e}function o(){let e=(0,t._)(["\n        max-height: ","\n    "]);return o=function(){return e},e}n.Z=e=>{let{code:n,className:t,language:h,maxHeight:u=d.b.Standard}=e;(void 0!==i.g?i.g:window).Prism=s.p1,i(61354),i(79016),i(2731),i(35266),i(92927),i(51315),i(57874),i(86862);let m=null!=u?u:d.b.Standard,j=c.ZP.pre(x()),b=(0,c.ZP)(j)(o(),m);return(0,l.jsx)("div",{className:(0,a.GF)("bg-blue-500 md:p-1 p-2",t),children:(0,l.jsx)("div",{className:"shadow-lg",children:(0,l.jsx)(s.y$,{theme:s.np.vsDark,code:n.trim(),language:null!=h?h:h="tsx",children:e=>{let{className:n,style:i,tokens:t,getLineProps:s,getTokenProps:a}=e;return(0,l.jsx)(b,{className:n,style:i,children:t.map((e,n)=>(0,r.createElement)("div",{...s({line:e,key:n}),key:Math.random()},e.map((e,n)=>(0,r.createElement)("span",{...a({token:e,key:n}),key:Math.random()}))))})}})})})}},97037:function(e,n,i){"use strict";i.d(n,{Ee:function(){return a},Xg:function(){return r},Y7:function(){return o},aV:function(){return d},e9:function(){return x},o_:function(){return h},tf:function(){return u},ty:function(){return c},xv:function(){return s}});var t=i(5152),l=i.n(t);let r=l()(()=>Promise.all([i.e(549),i.e(4738),i.e(4838),i.e(1664),i.e(1274)]).then(i.bind(i,91274)),{loadableGenerated:{webpack:()=>[91274]}}),s=l()(()=>Promise.all([i.e(4454),i.e(7897)]).then(i.bind(i,97897)),{loadableGenerated:{webpack:()=>[97897]}}),a=l()(()=>Promise.all([i.e(3536),i.e(2726)]).then(i.bind(i,2726)),{loadableGenerated:{webpack:()=>[2726]}}),c=l()(()=>Promise.all([i.e(549),i.e(378)]).then(i.bind(i,90378)),{loadableGenerated:{webpack:()=>[90378]}}),d=l()(()=>Promise.all([i.e(9300),i.e(7200)]).then(i.bind(i,7200)),{loadableGenerated:{webpack:()=>[7200]}}),x=l()(()=>Promise.all([i.e(1664),i.e(8681)]).then(i.bind(i,28681)),{loadableGenerated:{webpack:()=>[28681]}});l()(()=>i.e(2857).then(i.bind(i,22857)),{loadableGenerated:{webpack:()=>[22857]}});let o=l()(()=>Promise.all([i.e(2004),i.e(3070)]).then(i.bind(i,63070)),{loadableGenerated:{webpack:()=>[63070]}}),h=l()(()=>Promise.all([i.e(162),i.e(4380),i.e(3959),i.e(6050),i.e(239),i.e(8568)]).then(i.bind(i,32215)),{loadableGenerated:{webpack:()=>[32215]}}),u=l()(()=>Promise.all([i.e(162),i.e(1664),i.e(3959),i.e(6050),i.e(4205)]).then(i.bind(i,84205)),{loadableGenerated:{webpack:()=>[84205]}})}},function(e){e.O(0,[4104,2888,9774,179],function(){return e(e.s=28661)}),_N_E=e.O()}]);