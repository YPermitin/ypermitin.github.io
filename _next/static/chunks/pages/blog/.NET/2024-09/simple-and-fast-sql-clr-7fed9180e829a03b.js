(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9527],{7143:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/.NET/2024-09/simple-and-fast-sql-clr",function(){return t(2807)}])},2807:function(e,n,t){"use strict";t.r(n);var r=t(5893),s=t(4853);t(7294);var l=t(4313),a=t(9209);n.default=()=>(0,r.jsxs)(s.Xg,{blogcentered:!0,children:[(0,r.jsxs)(s.xv,{textAlign:a.PH.RIGHT,quote:!0,children:["Если вы сможете изменить самих себя, то вы измените мир вокруг себя.",(0,r.jsx)("br",{}),"(с) Уэйн Дайер"]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Создаем расширение SQLCLR для SQL Server на .NET Framework (C#). Разберем некоторые практические примеры. Простые и не очень простые."}),(0,r.jsx)(s.xv,{title:!0,className:"mt-10 md:text",children:"Содержание"}),(0,r.jsxs)(s.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#sqlserver-and-dotnet",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"SQL Server и .NET"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#SQLCLR",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Обзор SQLCLR"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#start-with-simple",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Начинаем с простого"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#http",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Отправляем HTTP-запросы"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#new",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Новые фичи"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#theend",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Конец или не конец?"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{href:"#link",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Полезные материалы"})})})})]}),(0,r.jsxs)("section",{id:"section-sqlserver-and-dotnet",children:[(0,r.jsx)(s.xv,{id:"sqlserver-and-dotnet",title:!0,className:"mt-10 md:text",children:"SQL Server и .NET"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'Жизнь - сложная штука. И разработка тоже. Вы можете быть мастером работы со SQL Server, иметь безупречные навыки создания запросов любой сложности, разбираться в оптимизации запросов и чтении планов запросов. Но! Выше головы не прыгнешь и средствами T-SQL решить любую задачу не выйдет. А если и выйдет, то решения часто выглядят "корявыми костылями" со сложной поддержкой и сопровождением.'}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Однако, выход есть всегда! В нашем случае выход заключается в использовании расширений для SQL Server, которые доступны в виде:"}),(0,r.jsxs)(s.aV,{type:a.RH.number,children:[(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/language-extensions/language-extensions-whats-new?view=sql-server-ver16&tabs=mlext",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Расширения языка Python и R"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/language-extensions/language-extensions-whats-new?view=sql-server-ver16&tabs=javaext",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Расширения языка Java"})})})}),(0,r.jsx)("li",{children:(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/language-extensions/language-extensions-whats-new?view=sql-server-ver16&tabs=csharpext",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Расширения языка C#"})})})})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Сегодня мы остановимся на последнем пункте и рассмотрим процесс создания расширения SQLCLR на платформе .NET (C#). Но какую задачу выбрать?"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Самые частые задачи, для которых используют SQLCLR:"}),(0,r.jsxs)(s.aV,{children:[(0,r.jsx)("li",{children:"Регулярные выражения."}),(0,r.jsx)("li",{children:"Отправка и обработка почты."}),(0,r.jsx)("li",{children:"Работа с HTTP-запросами."}),(0,r.jsx)("li",{children:"Интеграция со сторонними приложениями."}),(0,r.jsx)("li",{children:"Особые обработки данных. Даже, например, JSON до версии SQL Server 2016."}),(0,r.jsx)("li",{children:"И многое другое."})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Не будем придумывать что-то особое. Для нашего примера возьмем задачу создания удобного и функционального расширения SQLCLR для работы с HTTP-запросами из T-SQL. Вот пример использования этого расширения для получения вашего IP-адреса в интернете:"}),(0,r.jsx)(l.Z,{code:"\nSELECT \n	[IP]\nFROM OPENJSON([dbo].[fn_HttpGet](N'https://api.tinydevtools.ru/myip')) WITH (\n	IP nvarchar(max) '$.IP'\n)\n                    ",className:"my-5",language:"sql"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["В примере мы обратились к открытому API ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://api.tinydevtools.ru/index.html",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"TinyDevTools"})})})," для получения IP-адреса клиента в глобальной сети. Этот же API используется в инструменте ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://ypermitin.github.io/instruments/myip/",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Информация обо мне"})})}),". Ниже поэтапно будет описан процесс разработки такого расширения. Если понадобиться готовый вариант расширения с документацией по развертыванию, то все можно найти ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-SQLCLR/Projects/HttpHelper",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"в разделе SQLCLR в проекте HttpHelper"})})}),"."]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Таким образом, мы создадим расширение SQLCLR для работы с HTTP-запросами. Но все по порядку. Поехали!"})]}),(0,r.jsxs)("section",{id:"section-SQLCLR",children:[(0,r.jsx)(s.xv,{id:"SQLCLR",title:!0,className:"mt-10 md:text",children:"Обзор SQLCLR"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Прежде чем начать разработку нужно получить небольшую порцию теории. SQL CLR или SQLCLR (SQL Common Language Runtime) - это технология для размещения среды .NET CLR в SQL Server, что позволяет размещать и запускать код в среде SQL Server. Подробную информацию Вы можете узнать в ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/relational-databases/clr-integration/common-language-runtime-integration-overview?view=sql-server-ver16",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"официальной документации"})})}),"."]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Технология была представлена в еще в старой версии SQL Server 2005, но используется в целом до сих пор. В конечном счете код платформы .NET (C#) можно использовать для создания следующих объектов:"}),(0,r.jsxs)(s.aV,{children:[(0,r.jsx)("li",{children:"Хранимые процедуры"}),(0,r.jsx)("li",{children:"Триггеры"}),(0,r.jsx)("li",{children:"Пользовательские функции"}),(0,r.jsx)("li",{children:"Пользовательские агрегаты"}),(0,r.jsx)("li",{children:"Пользовательские типы"})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"SQLCLR базируется на создании, развертывании и регистрации сборок, которые физически представляют собой файлы библиотеки *.DLL. Сборки содержат в себе пространства имен, классы, функции и свойства. Все это может быть использовано в итоге из T-SQL."}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Особенностью при разработке расширений SQLCLR является использование платформы .NET Framework 4.x, которая в данный момент уже не развивается и считается устаревшей. То есть использовать версии  .NET Core 2/3, .NET 6, .NET 8 и другие современные версии для SQLCLR-разработки не получится."}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Причина такой ситуации простая - для работы SQLCLR в SQL Server используется технология ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/dotnet/framework/app-domains/application-domains/",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"доменов приложений"})})}),". С ее помощью SQL Server подгружает внешние библиотеки приложений изолированно от основного процесса, тем самым обеспечивая безопасный и надежный запуск сторонних расширений."]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Однако, технология доменов приложений в современные версии .NET не переносилась и не планируется переноситься в будущем, т.к. этот шаг был бы не целесообразным, подходы в разработке уже изменились и изоляция кода в современных приложениях достигается другими средствами (контейнеры и т.д.). Подробнее Вы можете ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/dotnet/core/porting/net-framework-tech-unavailable#application-domains",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"узнать здесь"})})}),"."]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"В завершении посмотрим на код простейшего расширения, которое выводит текстовое сообщение:"}),(0,r.jsx)(l.Z,{code:'\nusing System;\nusing System.Data;\nusing Microsoft.SqlServer.Server;\nusing System.Data.SqlTypes;\n  \npublic class LetsFunProc\n{\n    [Microsoft.SqlServer.Server.SqlProcedure]\n    public static void LetsFun()\n    {\n        SqlContext.Pipe.Send("Let\'s fun!" + Environment.NewLine);\n    }\n}\n...\n                    ',className:"my-5",language:"csharp"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Все просто как раз, два, конь! Главное теперь понять как это использовать на стороне T-SQL, но об этом далее."})]}),(0,r.jsxs)("section",{id:"section-start-with-simple",children:[(0,r.jsx)(s.xv,{id:"start-with-simple",title:!0,className:"mt-10 md:text",children:"Начинаем с простого"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'Начнем с простого и создадим проект "Библиотека классов (.NET Framework)". Нам понадобится Visual Studio 2022 и установленный .NET Framework 4.8. Назовем проект и решение "HttpHelper".'}),(0,r.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-09/simple-and-fast-sql-clr/1. Создаем проект.png",alt:"Создаем проект",size:a.h2.MEDIUM}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'Файл "Class1.cs" переименуем в "EntryHttpClient.cs". Для простоты примера добавим сначала скалярную функцию (возвращающее одно значение) для получения идентификатора объекта расширения. Этот идентификатор создается при первом обращении к расширению. Исходный код модуля будет очень простым:'}),(0,r.jsx)(l.Z,{code:"\nusing Microsoft.SqlServer.Server;\nusing System;\nusing System.Data.SqlTypes;\n\nnamespace HttpHelper\n{\n    public class EntryHttpClient\n    {\n        private static readonly Guid InstanceId = Guid.NewGuid();\n\n        [SqlFunction(DataAccess = DataAccessKind.Read)]\n        public static SqlGuid GetHttpHelperInstanceId()\n        {\n            return new SqlGuid(InstanceId.ToByteArray());\n        }\n    }\n}\n                    ",className:"my-5",language:"csharp"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'Далее соберем проект, а полученный файл "HttpHelper.dll" поместим, например, в каталог "C:\\Share\\SQLCLR". Теперь уйдем из Visual Studio 2022 в SQL Server Managment Studio и выполним следующие скрипты для регистрации расширения. Новое расширение добавим, например, в базе "PowerCLR".'}),(0,r.jsx)(l.Z,{code:"\n-- Включаем использование SQLCLR на сервере\nEXEC sp_configure 'clr enabled', 1;  \nRECONFIGURE;  \nGO\n-- Разрешаем использование сборок\nALTER DATABASE PowerCLR SET TRUSTWORTHY ON;\nGO\n\nUSE [PowerCLR]\nGO\n\n-- Удаляем существующую функцию\nIF(OBJECT_ID('dbo.fn_GetHttpHelperInstanceId') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpHelperInstanceId];\nEND\n\n-- Удаляем и заново регистрируем сборку\nif(EXISTS(select * from sys.assemblies WHERE [name] = 'HttpHelper'))\nBEGIN\n	DROP ASSEMBLY [HttpHelper];\nEND\nCREATE ASSEMBLY [HttpHelper]\n	FROM 'C:\\Share\\SQLCLR\\HttpHelper.dll'\n	WITH PERMISSION_SET = UNSAFE;\nGO\n\n-- Создаем функции для использование метода из сборки\nCREATE FUNCTION fn_GetHttpHelperInstanceId() \nRETURNS uniqueidentifier   \nAS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpHelperInstanceId];   \nGO\n                    ",className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'В скрипте мы сначала включаем использование SQLCLR, разрешаем использовать сборки, очищаем базу от старых объектов и сборки, а после регистрируем заново. На последнем этапе регистрации функции мы указываем в параметре "EXTERNAL NAME" путь к методу сборки в виде:'}),(0,r.jsx)(l.Z,{code:"\n[ИмяСборки].[ПолныйПутьККлассуВместеСПространствомИмен].[ИмяМетода]\n                    ",className:"my-5",language:"text"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"После этого мы можем использовать созданную нами функцию легко и просто:"}),(0,r.jsx)(l.Z,{code:"\nSELECT \n    [dbo].[fn_GetHttpHelperInstanceId]() AS [SQLCLRInstanceId]\nGO\n                    ",className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Выглядит несложно, не правда ли? Усложним наше расширение, добавив новые простые методы. В том числе методы, возвращающие целые таблицы."}),(0,r.jsx)(l.Z,{code:'\nusing Microsoft.SqlServer.Server;\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlTypes;\nusing HttpHelper.Models;\nusing System.Collections;\n\nnamespace HttpHelper\n{\n    public class EntryHttpClient\n    {\n        private static readonly Guid InstanceId = Guid.NewGuid();\n        private static readonly DateTime InstanceCreateDateUtc = DateTime.UtcNow;\n\n        #region Service\n\n        [SqlFunction(DataAccess = DataAccessKind.Read)]\n        public static SqlGuid GetHttpHelperInstanceId()\n        {\n            return new SqlGuid(InstanceId.ToByteArray());\n        }\n\n        [SqlFunction(DataAccess = DataAccessKind.Read)]\n        public static SqlDateTime GetHttpHelperInstanceCreateDateUtc()\n        {\n            return new SqlDateTime(InstanceCreateDateUtc);\n        }\n\n        [SqlFunction(DataAccess = DataAccessKind.Read)]\n        public static SqlChars GetClrVersion()\n        {\n            var version = Environment.Version.ToString();\n\n            return new SqlChars(version);\n        }\n\n        #endregion\n\n        #region GetHttpMethods\n\n        [SqlFunction(\n            FillRowMethodName = "GetHttpMethodsFillRow",\n            SystemDataAccess = SystemDataAccessKind.Read,\n            DataAccess = DataAccessKind.Read)]\n        public static IEnumerable GetHttpMethods()\n        {\n            List<string> httpMethods = new List<string>\n            {\n                "GET",\n                "HEAD",\n                "POST",\n                "PUT",\n                "DELETE",\n                "CONNECT",\n                "OPTIONS",\n                "TRACE",\n                "PATCH",\n            };\n\n            return httpMethods;\n        }\n        public static void GetHttpMethodsFillRow(object methodNameAsString, out SqlChars methodName)\n        {\n            methodName = new SqlChars((string)methodNameAsString);\n        }\n\n        #endregion\n\n        #region GetUserAgentExamples\n\n        [SqlFunction(\n            FillRowMethodName = "GetUserAgentExamplesFillRow",\n            SystemDataAccess = SystemDataAccessKind.Read,\n            DataAccess = DataAccessKind.Read)]\n        public static IEnumerable GetUserAgentExamples()\n        {\n            List<UserAgentExample> httpMethods = new List<UserAgentExample>\n            {\n                new UserAgentExample()\n                {\n                    Browser = "Microsoft Edge",\n                    OperationSystem = "Windows",\n                    UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Google Chrome",\n                    OperationSystem = "Mac OS X",\n                    UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Google Chrome",\n                    OperationSystem = "WindowsWindows",\n                    UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Mozilla Firefox",\n                    OperationSystem = "Windows",\n                    UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Safari",\n                    OperationSystem = "iPhone (iOS)",\n                    UserAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Safari",\n                    OperationSystem = "iPad (iPadOS)",\n                    UserAgent = "Mozilla/5.0 (iPad; CPU OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Chrome",\n                    OperationSystem = "Android",\n                    UserAgent = "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36",\n                },\n                new UserAgentExample()\n                {\n                    Browser = "Chrome (on Samsung Galaxy S22 5G)",\n                    OperationSystem = "Android",\n                    UserAgent = "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",\n                }\n            };\n\n            return httpMethods;\n        }\n        public static void GetUserAgentExamplesFillRow(object userAgentExample,\n            out SqlChars browser, out SqlChars operationSystem, out SqlChars userAgent)\n        {\n            var userAgentExampleObject = (UserAgentExample)userAgentExample;\n            browser = new SqlChars(userAgentExampleObject.Browser);\n            operationSystem = new SqlChars(userAgentExampleObject.OperationSystem);\n            userAgent = new SqlChars(userAgentExampleObject.UserAgent);\n        }\n\n        #endregion\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Теперь у нас есть следующие методы:"}),(0,r.jsxs)(s.aV,{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetHttpHelperInstanceId"})," - метод для получения идентификатора объекта расширения. Мы его добавляли ранее."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetHttpHelperInstanceCreateDateUtc"})," - дата создания объекта расширения. Это тоже скалярная функция, возвращающая дату и время создания объекта."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetClrVersion"})," - возвращает строку с версией среды CLR. Для SQL Server это почти всегда будет версия 4.x."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetHttpMethods"})," - это функция, возвращающая таблицу всех доступных методов HTTP-запросов."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetUserAgentExamples"})," - это функция, возвращающая таблицу примеров заголовков ",(0,r.jsx)("b",{children:"User-Agent"}),". Метод использует объект класса ",(0,r.jsx)("b",{children:"UserAgentExample"})," для хранения данных. Но это не так важно для понимания работы функций.",(0,r.jsx)(l.Z,{code:"\nnamespace HttpHelper.Models\n{\n    public class UserAgentExample\n    {\n        public string Browser { get; set; }\n\n        public string OperationSystem { get; set; }\n\n        public string UserAgent { get; set; }\n    }\n}\n\n                    ",className:"my-5",language:"csharp"})]})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Самое важное изменение на данном этапе - это появление функций, возвращающих таблицы (GetHttpMethods и GetUserAgentExamples). Рассмотрим детальней метод ",(0,r.jsx)("b",{children:"GetHttpMethods"}),". Для его работы созданы фактически два метода класса:",(0,r.jsxs)(s.aV,{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetHttpMethods"})," - метод фактически получает набор данных для дальнейшего вывода. В атрибуте ",(0,r.jsx)("b",{children:"SqlFunction"})," мы указываем уровни доступа (в примере все уровни только на чтение) и метод заполнения строк (",(0,r.jsx)("b",{children:"FillRowMethodName"}),"). Этот метод вызывается для каждой полученной строки и отвечает за вывод данных для результата запроса."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"GetHttpMethodsFillRow"})," - метод заполнения строки. Первым параметром передается значение из набора данных, который сформирован методом выше. Второй и остальные параметры - это значение для колонок результатирующего набора запроса. Их мы здесь и заполняем."]})]})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Остается зарегистрировать новые функции, и вот как это будет выглядеть. Дополним наш скрипт регистрации расширения."}),(0,r.jsx)(l.Z,{code:"\n-- Включаем использование SQLCLR на сервере\nEXEC sp_configure 'clr enabled', 1;  \nRECONFIGURE;  \nGO\n-- Разрешаем использование сборок\nALTER DATABASE PowerCLR SET TRUSTWORTHY ON;\nGO\n\nUSE [PowerCLR]\nGO\n\n-- Удаляем существующую функцию\nIF(OBJECT_ID('dbo.fn_GetUserAgentExamples') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetUserAgentExamples];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetHttpHelperInstanceCreateDateUtc') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpHelperInstanceCreateDateUtc];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetHttpHelperInstanceId') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpHelperInstanceId];\nEND\nIF(OBJECT_ID('dbo.fn_GetHttpMethods') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpMethods];\nEND\nIF(OBJECT_ID('dbo.fn_GetClrVersion') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetClrVersion];\nEND\n\n-- Удаляем и заново регистрируем сборку\nif(EXISTS(select * from sys.assemblies WHERE [name] = 'HttpHelper'))\nBEGIN\n	DROP ASSEMBLY [HttpHelper];\nEND\nCREATE ASSEMBLY [HttpHelper]\n	FROM 'C:\\Share\\SQLCLR\\HttpHelper.dll'\n	WITH PERMISSION_SET = UNSAFE;\nGO\n\n-- Создаем функции для использование метода из сборки\n	CREATE FUNCTION fn_GetHttpHelperInstanceCreateDateUTC() \n	RETURNS datetime   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpHelperInstanceCreateDateUtc];   \n	GO\n\n	CREATE FUNCTION fn_GetHttpHelperInstanceId() \n	RETURNS uniqueidentifier   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpHelperInstanceId];   \n	GO\n\n	CREATE FUNCTION fn_GetClrVersion() \n	RETURNS nvarchar(50)   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetClrVersion];   \n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetHttpMethods]()  \n	RETURNS TABLE (\n		[Name] nvarchar(150)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpMethods];\n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetUserAgentExamples]()  \n	RETURNS TABLE (\n		[Browser] nvarchar(max),\n		[OperationSystem] nvarchar(max),\n		[UserAgent] nvarchar(max)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetUserAgentExamples];\n	GO\n                    ",className:"my-5",language:"sql"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Принцип регистрации сохранился, лишь добавились новые объекты. Интересное изменение здесь - это регистрация функций, возвращающих таблицы. Теперь нам приходится описывать структуру таблицы с типами возвращаемых полей в выражении ",(0,r.jsx)("b",{children:"RETURNS TABLE"}),":"]}),(0,r.jsx)(l.Z,{code:"\nCREATE FUNCTION [dbo].[fn_GetHttpMethods]()  \nRETURNS TABLE (\n	[Name] nvarchar(150)\n)\nAS   \nEXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpMethods];\nGO\n                    ",className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Использовать все новые функции в T-SQL достаточно просто:"}),(0,r.jsx)(l.Z,{code:"\nselect\n	[dbo].[fn_GetClrVersion](),\n	[dbo].[fn_GetHttpHelperInstanceCreateDateUTC](),\n	[dbo].[fn_GetHttpHelperInstanceId]()\n\nSELECT\n	*\nFROM [dbo].[fn_GetHttpMethods]()\n\nSELECT\n	*\nFROM [dbo].[fn_GetUserAgentExamples]()\n                    ",className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Результат их работы также предсказуем."}),(0,r.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-09/simple-and-fast-sql-clr/2. Результат работы функций.png",alt:"Результат работы функций",size:a.h2.MEDIUM}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Таким образом, у нас уже есть расширение со скалярными функциями и функциями возвращающими таблицы. Мы научились их регистрировать вместе со сборкой для дальнейшего использования через T-SQL скрипты. Но поставленную задачу по работе с HTTP-запросами мы так и не решили. Пора переходить на новый уровень разработки!"})]}),(0,r.jsxs)("section",{id:"section-http",children:[(0,r.jsx)(s.xv,{id:"http",title:!0,className:"mt-10 md:text",children:"Отправляем HTTP-запросы"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Пора усложнять примеры и перейти непосредственно к задаче по отправке HTTP-запросов. Для этого будем использовать скалярную функцию, принимающую параметры запроса. В качестве возвращаемого значения будет некоторое XML-значение с детальной информацией об HTTP-ответе на запрос."}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Стоит оговориться, что использовать мы будем ",(0,r.jsx)("b",{children:"HttpWebRequest"}),", а не ",(0,r.jsx)("b",{children:"HttpClient"}),". Последний просто так использовать для SQLCLR не получится, т.к. придется подгружать дополнительные сборки. Чтобы не усложнять пример и процесс установки, остановимся на первом варианте."]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Также при инициализации объекта расширения нужно установить используемые протоколы безопасности. Сделаем это в статическом конструкторе класса, чтобы настройка применилась единожды в самом начале работы с расширением."}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Ниже в листинге показан новый код, добавленный в класс расширения:"}),(0,r.jsx)(l.Z,{code:'\nusing Microsoft.SqlServer.Server;\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlTypes;\nusing HttpHelper.Models;\nusing System.Collections;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Xml.Linq;\n\nnamespace HttpHelper\n{\n    public class EntryHttpClient\n    {\n        static EntryHttpClient()\n        {\n            // Устанавливаем используемые протоколы безопасности при начале работы с расширением\n            try\n            {\n                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls |\n                                                       SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;\n            }\n            catch\n            {\n                ServicePointManager.SecurityProtocol = SecurityProtocolType.SystemDefault;\n            }\n        }\n\n        #region HttpQuery\n\n        [SqlFunction(DataAccess = DataAccessKind.Read)]\n        public static SqlXml HttpQuery(SqlChars url, SqlChars method, SqlXml headers, SqlChars body,\n            SqlInt32 timeoutMs, SqlBoolean ignoreCertificateValidation)\n        {\n            // Идентификатор запроса\n            Guid queryId = Guid.NewGuid();\n            XElement returnXml;\n\n            try\n            {\n                string urlAsString = new string(url.Value);\n                var queryUrl = new Uri(urlAsString);\n\n                // Создаем объект запроса\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(queryUrl);\n\n                #region ignoreCertificateValidation // Отключение проверки сертификата\n\n                if (ignoreCertificateValidation.Value)\n                {\n                    request.ServerCertificateValidationCallback +=\n                        (sender, certificate, chain, sslPolicyErrors) => true;\n                }\n\n                #endregion\n\n                #region method // Метод HTTP-запроса\n\n                if (method == null)\n                {\n                    method = new SqlChars("GET");\n                }\n\n                request.Method = new string(method.Value);\n\n                #endregion\n\n                #region headers // Заголовки HTTP-запроса\n\n                bool contentLengthSetFromHeaders = false;\n                bool contentTypeSetFromHeaders = false;\n                if (headers != null && !headers.IsNull)\n                {\n                    foreach (XElement headerElement in XElement.Parse(headers.Value).Descendants())\n                    {\n                        // Retrieve headers name and value\n                        var headerName = headerElement.Attribute("Name")?.Value ?? string.Empty;\n                        if (string.IsNullOrEmpty(headerName))\n                            continue;\n\n                        var headerValue = headerElement.Value;\n\n                        switch (headerName.ToUpperInvariant())\n                        {\n                            case "ACCEPT":\n                                request.Accept = headerValue;\n                                break;\n                            case "CONNECTION":\n                                request.Connection = headerValue;\n                                break;\n                            case "CONTENT-LENGTH":\n                                request.ContentLength = long.Parse(headerValue);\n                                contentLengthSetFromHeaders = true;\n                                break;\n                            case "CONTENT-TYPE":\n                                request.ContentType = headerValue;\n                                contentTypeSetFromHeaders = true;\n                                ;\n                                break;\n                            case "DATE":\n                                request.Date = DateTime.Parse(headerValue);\n                                break;\n                            case "EXPECT":\n                                request.Expect = headerValue;\n                                break;\n                            case "HOST":\n                                request.Host = headerValue;\n                                break;\n                            case "IF-MODIFIED-SINCE":\n                                request.IfModifiedSince = DateTime.Parse(headerValue);\n                                break;\n                            case "RANGE":\n                                var parts = headerValue.Split(\'-\');\n                                request.AddRange(int.Parse(parts[0]), int.Parse(parts[1]));\n                                break;\n                            case "REFERER":\n                                request.Referer = headerValue;\n                                break;\n                            case "TRANSFER-ENCODING":\n                                request.TransferEncoding = headerValue;\n                                break;\n                            case "USER-AGENT":\n                                request.UserAgent = headerValue;\n                                break;\n                            default:\n                                request.Headers.Add(headerName, headerValue);\n                                break;\n                        }\n                    }\n                }\n\n                #endregion\n\n                #region timeoutMs // Таймаут выполнения запроса\n\n                if (!timeoutMs.IsNull && timeoutMs.Value >= 0)\n                {\n                    request.Timeout = timeoutMs.Value;\n                }\n\n                #endregion\n\n                #region RequestBody // Тело запроса\n\n                if (body != null && !body.IsNull)\n                {\n                    string bodyAsString = new string(body.Value);\n                    if (!string.IsNullOrEmpty(bodyAsString))\n                    {\n                        var bodyAsBytes = Encoding.UTF8.GetBytes(bodyAsString);\n                        if (!contentLengthSetFromHeaders)\n                        {\n                            request.ContentLength = bodyAsBytes.Length;\n                        }\n                        if (!contentTypeSetFromHeaders)\n                        {\n                            request.ContentType = "application/x-www-form-urlencoded";\n                        }\n\n                        using (var requestStream = request.GetRequestStream())\n                        {\n                            requestStream.Write(bodyAsBytes, 0, bodyAsBytes.Length);\n                        }\n                    }\n                }\n\n                #endregion\n\n                try\n                {\n                    string responseBodyAsString;\n                    var response = (HttpWebResponse)request.GetResponse();\n                    using (Stream newStream = response.GetResponseStream())\n                    {\n                        using (var reader = new StreamReader(newStream))\n                        {\n                            responseBodyAsString = reader.ReadToEnd();\n                        }\n                    }\n\n                    var responseHeadersXml = new XElement("Headers");\n                    var responseHeaders = response.Headers;\n                    for (int i = 0; i < responseHeaders.Count; ++i)\n                    {\n                        // Get values for this header\n                        var valuesXml = new XElement("Values");\n                        foreach (string value in responseHeaders.GetValues(i))\n                        {\n                            valuesXml.Add(new XElement("Value", value));\n                        }\n\n                        // Add this header with its values to the headers xml\n                        responseHeadersXml.Add(\n                            new XElement("Header",\n                                new XElement("Name", responseHeaders.GetKey(i)),\n                                valuesXml\n                            )\n                        );\n                    }\n\n                    returnXml = new XElement("Response",\n                        new XElement("QueryId", queryId.ToString()),\n                        new XElement("CharacterSet", response.CharacterSet),\n                        new XElement("ContentEncoding", response.ContentEncoding),\n                        new XElement("ContentLength", response.ContentLength),\n                        new XElement("ContentType", response.ContentType),\n                        new XElement("CookiesCount", response.Cookies.Count),\n                        new XElement("HeadersCount", response.Headers.Count),\n                        responseHeadersXml,\n                        new XElement("IsFromCache", response.IsFromCache),\n                        new XElement("IsMutuallyAuthenticated", response.IsMutuallyAuthenticated),\n                        new XElement("LastModified", response.LastModified),\n                        new XElement("Method", response.Method),\n                        new XElement("ProtocolVersion", response.ProtocolVersion),\n                        new XElement("ResponseUri", response.ResponseUri),\n                        new XElement("Server", response.Server),\n                        new XElement("StatusCode", response.StatusCode),\n                        new XElement("StatusNumber", ((int)response.StatusCode)),\n                        new XElement("StatusDescription", response.StatusDescription),\n                        new XElement("SupportsHeaders", response.SupportsHeaders),\n                        new XElement("Body", responseBodyAsString)\n                    );\n\n                    SqlXml result;\n                    using (var responseAsStream = returnXml.CreateReader())\n                    {\n                        result = new SqlXml(responseAsStream);\n                    }\n\n                    return result;\n                }\n                catch (WebException we)\n                {\n                    if (we.Response != null)\n                    {\n                        // If we got a response, generate return XML with the HTTP status code \n                        HttpWebResponse errorResponse = we.Response as HttpWebResponse;\n                        returnXml =\n                            new XElement("Response",\n                                new XElement("QueryId", queryId.ToString()),\n                                new XElement("Server", errorResponse.Server),\n                                new XElement("StatusCode", errorResponse.StatusCode),\n                                new XElement("StatusNumber", ((int)errorResponse.StatusCode)),\n                                new XElement("StatusDescription", errorResponse.StatusDescription)\n                            );\n                    }\n                    else\n                    {\n                        // Если ошибка не содержит дополнительные сведения о сбойном запросе,\n                        // то обрабатываем исключение в другоим месте.\n                        throw;\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                returnXml = GetXmlFromException(ex, queryId);\n            }\n\n            return new SqlXml(returnXml.CreateReader());\n        }\n\n        #endregion\n\n        // Преобразование объекта исключения в XML\n        private static XElement GetXmlFromException(Exception ex, Guid queryId)\n        {\n            var returnXml =\n                new XElement("Exception",\n                    new XElement("QueryId", queryId.ToString()),\n                    new XElement("Message", ex.Message),\n                    new XElement("StackTrace", ex.StackTrace),\n                    new XElement("Source", ex.Source),\n                    new XElement("ToString", ex.ToString())\n                );\n\n            if (ex.InnerException != null)\n            {\n                returnXml.Add(new XElement("InnerException", GetXmlFromException(ex.InnerException, queryId)));\n            }\n\n            return returnXml;\n        }\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Мы добавили скалярную функцию ",(0,r.jsx)("b",{children:"HttpQuery"})," со следующими параметрами:",(0,r.jsxs)(s.aV,{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"url"})," - адрес для выполнения запроса."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"method"})," - имя метода HTTP-запроса (список можно получить функцией ",(0,r.jsx)("b",{children:"GetHttpMethods"}),")."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"headers"})," - XML с описанием заголовков запроса. Пример:",(0,r.jsx)(l.Z,{code:'\n<Headers>\n    <Header Name="Accept">application/json</Header>\n    <Header Name="Content-Type">application/json</Header>\n</Headers>\n                                ',className:"my-5",language:"xml"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"body"})," - тело запроса в виде строки."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"timeoutMs"})," - таймаут выполнения запроса в миллисекундах."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"ignoreCertificateValidation"})," - отключить проверку SSL-сертификатов."]})]})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Результат возвращается в виде XML с информацией о результате выполнения запроса (тело, заголовки и др.). Например:",(0,r.jsx)(l.Z,{code:'\n<Response>\n	<QueryId>d3aec9f5-a7c0-42a0-8300-6bdec8f89605</QueryId>\n	<CharacterSet>utf-8</CharacterSet>\n	<ContentEncoding />\n	<ContentLength>-1</ContentLength>\n	<ContentType>application/json; charset=utf-8</ContentType>\n	<CookiesCount>0</CookiesCount>\n	<HeadersCount>4</HeadersCount>\n	<Headers>\n		<Header>\n		<Name>Transfer-Encoding</Name>\n		<Values>\n			<Value>chunked</Value>\n		</Values>\n		</Header>\n		<Header>\n		<Name>Content-Type</Name>\n		<Values>\n			<Value>application/json; charset=utf-8</Value>\n		</Values>\n		</Header>\n		<Header>\n		<Name>Date</Name>\n		<Values>\n			<Value>Sun, 08 Sep 2024 08:49:58 GMT</Value>\n		</Values>\n		</Header>\n		<Header>\n		<Name>Server</Name>\n		<Values>\n			<Value>Kestrel</Value>\n		</Values>\n		</Header>\n	</Headers>\n	<IsFromCache>false</IsFromCache>\n	<IsMutuallyAuthenticated>false</IsMutuallyAuthenticated>\n	<LastModified>2024-09-08T13:49:58.7867246+05:00</LastModified>\n	<Method>GET</Method>\n	<ProtocolVersion>1.1</ProtocolVersion>\n	<ResponseUri>https://api.tinydevtools.ru/myip</ResponseUri>\n	<Server>Kestrel</Server>\n	<StatusCode>OK</StatusCode>\n	<StatusNumber>200</StatusNumber>\n	<StatusDescription>OK</StatusDescription>\n	<SupportsHeaders>true</SupportsHeaders>\n	<Body>{"IP":"8.8.8.8","UserAgent":null,"ClientRequestHeaders":[{"Key":"Connection","Value":"keep-alive"},{"Key":"Host","Value":"api.tinydevtools.ru"},{"Key":"X-Forwarded-Host","Value":"api.tinydevtools.ru"},{"Key":"X-Forwarded-Server","Value":"api.tinydevtools.ru"},{"Key":"X-Original-For","Value":"127.0.0.1:54876"}]}</Body>\n</Response>\n                                ',className:"my-5",language:"xml"}),"В случае возникновения ошибки выполнения будет возвращена информация об исключении:",(0,r.jsx)(l.Z,{code:"\n<Exception>\n    <QueryId>3b05bed5-7c71-4c7d-af63-0e0624d64fad</QueryId>\n    <Message>Время ожидания операции истекло</Message>\n    <StackTrace>   в System.Net.HttpWebRequest.GetResponse()\n		в YPermitin.SQLCLR.HttpHelper.EntryHttpClient.HttpQuery(SqlChars url, SqlChars method, SqlXml headers, SqlInt32 timeoutMs, SqlBoolean ignoreCertificateValidation)</StackTrace>\n    <Source>System</Source>\n    <ToString>System.Net.WebException: Время ожидания операции истекло\n		в System.Net.HttpWebRequest.GetResponse()\n		в YPermitin.SQLCLR.HttpHelper.EntryHttpClient.HttpQuery(SqlChars url, SqlChars method, SqlXml headers, SqlInt32 timeoutMs, SqlBoolean ignoreCertificateValidation)</ToString>\n</Exception>\n                                ",className:"my-5",language:"xml"})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"В алгоритме метода мы создаем объект запроса, применяем на него переданные параметры, а после выполняем и обрабатываем результат."}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Для корректной работы HTTP-запросов нам необходимо настроить протоколы безопасности запросов. Для этого добавлен статический конструктор класса со следующим кодом:",(0,r.jsx)(l.Z,{code:"\nstatic EntryHttpClient()\n{\n    // Устанавливаем используемые протоколы безопасности при начале работы с расширением\n    try\n    {\n        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls |\n                                               SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;\n    }\n    catch\n    {\n        ServicePointManager.SecurityProtocol = SecurityProtocolType.SystemDefault;\n    }\n}\n                                ",className:"my-5",language:"csharp"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["В случаях возникновения необработанного исключения, мы провалимся в блок ",(0,r.jsx)("b",{children:"catch"}),", где преобразуем объект класса ",(0,r.jsx)("b",{children:"Exception"})," в XML с помощью метода ",(0,r.jsx)("b",{children:"GetXmlFromException"}),":",(0,r.jsx)(l.Z,{code:'\nprivate static XElement GetXmlFromException(Exception ex, Guid queryId)\n{\n    var returnXml =\n        new XElement("Exception",\n            new XElement("QueryId", queryId.ToString()),\n            new XElement("Message", ex.Message),\n            new XElement("StackTrace", ex.StackTrace),\n            new XElement("Source", ex.Source),\n            new XElement("ToString", ex.ToString())\n        );\n\n    if (ex.InnerException != null)\n    {\n        returnXml.Add(new XElement("InnerException", GetXmlFromException(ex.InnerException, queryId)));\n    }\n\n    return returnXml;\n}\n                                ',className:"my-5",language:"csharp"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Но создать функцию это одно, теперь нужно ее зарегистрировать с учетом всех параметров. Добавим в скрипты два шага:",(0,r.jsx)(l.Z,{code:"\nIF(OBJECT_ID('dbo.fn_HttpQuery') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_HttpQuery];\nEND\n\n-- ...\nCREATE FUNCTION fn_HttpQuery (\n	@url nvarchar(max),\n	@method nvarchar(150) = 'GET',\n	@headers xml,\n	@body nvarchar(max),\n	@timeoutMs int = 0,\n	@ignoreCertificateValidation bit = 0	\n) \nRETURNS xml   \nAS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[HttpQuery];   \nGO\n                        ",className:"my-5",language:"sql"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Функцию создали, зарегистрировали. Давайте вызовем с ее помощью метод API для получения адреса в интернете:",(0,r.jsx)(l.Z,{code:"\nDECLARE @url nvarchar(max) = N'https://api.tinydevtools.ru/myip';\nDECLARE @method nvarchar(150) = 'GET';\nDECLARE @headers xml = null;\nDECLARE @timeoutMs int = 60000;\nDECLARE @body nvarchar(max) = null;\nDECLARE @ignoreCertificateValidation bit = 0;\nDECLARE @result xml;\n\nSELECT \n	[IP]\nFROM OPENJSON (\n	-- Выполняем HTTP-запрос к API\n	[dbo].[fn_HttpQuery](@url,@method,@headers,@body,@timeoutMs,@ignoreCertificateValidation)\n	-- Разбираем XML результата запроса и вытаскиваем тело в виде JSON\n	.value('(/Response/Body)[1]', 'nvarchar(max)')) WITH (\n		-- Разбираем JSON-тело ответа\n		IP nvarchar(max) '$.IP'\n	)\n                        ",className:"my-5",language:"sql"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Теперь мы без проблем можем выполнять HTTP-запросы с указанными параметрами. В примере выше нам пришлось указывать множество параметров. Чтобы облегчить себе жизнь, мы можем создать более простую функцию для отправки простых HTTP-запросов методом GET. Добавим в скрипты создание следующих функций:",(0,r.jsx)(l.Z,{code:"\nIF(OBJECT_ID('dbo.fn_HttpGet') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_HttpGet];\nEND\n\n-- ...\n\nCREATE FUNCTION fn_HttpGet \n(\n	@url nvarchar(max)\n)\nRETURNS nvarchar(max)\nAS\nBEGIN\n	DECLARE @response xml,\n		@bodyJson nvarchar(max);\n\n	SELECT @response = [dbo].[fn_HttpQuery] (\n		@url,\n		DEFAULT,\n		null,\n		null,\n		60000,\n		DEFAULT\n	);\n\n	SELECT @bodyJson = @response.value('(/Response/Body)[1]', 'nvarchar(max)');\n\n	RETURN @bodyJson;\nEND\nGO\n                        ",className:"my-5",language:"sql"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Пример отправки запроса теперь стал намного проще:",(0,r.jsx)(l.Z,{code:"\nSELECT \n	*\nFROM OPENJSON([dbo].[fn_HttpGet](N'https://api.tinydevtools.ru/myip')) WITH (\n	IP nvarchar(max) '$.IP'\n)\n                        ",className:"my-5",language:"sql"})]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Фактически мы уже решили задачу с отправкой HTTP-запросов из T-SQL. Чтобы окончательно в этом убедиться, давайте отправим POST-запрос в какой-нибудь открытый API для теста. Например, воспользуемся ",(0,r.jsx)(s.e9,{href:"https://petstore.swagger.io",newTab:!0,children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"petstore.swagger.io"})})}),", примером REST API сервиса. Нас интересует метод для ",(0,r.jsx)(s.e9,{href:"https://petstore.swagger.io/#/user/createUser",newTab:!0,children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"создания пользователей"})})}),". Т.к. этот запрос уже более сложный, чем простейший GET из примера выше, то придется задать все необходимые параметры вручную."]}),(0,r.jsx)(l.Z,{code:'\nDECLARE @url nvarchar(max) = N\'https://petstore.swagger.io/v2/user\';\nDECLARE @method nvarchar(150) = \'POST\';\n-- Настраиваем заголовки\nDECLARE @headers xml = N\'\n<Headers>\n    <Header Name="Content-Type">application/json</Header>\n</Headers>\n\';\nDECLARE @timeoutMs int = 60000;\n-- Тело для отправки\nDECLARE @body nvarchar(max) = N\'\n{  \n  "username": "Joe",\n  "firstName": "Joe",\n  "lastName": "Peshi",\n  "email": "joe.peshi@yandex.ru",\n  "password": "123456",\n  "phone": "+1111111111",\n  "userStatus": 1\n}\';\nDECLARE @ignoreCertificateValidation bit = 0;\nDECLARE @result xml;\n\nSELECT \n	*\nFROM OPENJSON(\n	-- Отправляем запрос\n	[dbo].[fn_HttpQuery](@url,@method,@headers,@body,@timeoutMs,@ignoreCertificateValidation)\n	-- Обрабатываем результат XML\n	.value(\'(/Response/Body)[1]\', \'nvarchar(max)\')) WITH (\n		-- Разбираем тело ответа JSON\n		Message nvarchar(max) \'$.message\',\n		Code nvarchar(max) \'$.code\'\n	)\n                        ',className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Ура! Мы можем отправлять HTTP-запросы из T-SQL практически любого типа, сложности и параметров. Мы сделали это!"})]}),(0,r.jsxs)("section",{id:"section-new",children:[(0,r.jsx)(s.xv,{id:"new",title:!0,className:"mt-10 md:text",children:"Новые фичи"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Сделаем финальный штрих и добавим логирование HTTP-запросов через расширение в базу данных, а также настройки протоколов безопасности. Для этого нужно:",(0,r.jsxs)(s.aV,{children:[(0,r.jsx)("li",{children:"Добавить процедуру для включения логирования. При включении должна создаваться таблица логов, если ее нет в базе. Таблица добавляется в ту же самую базу, где зарегистрировано расширение."}),(0,r.jsx)("li",{children:"Добавить процедуру выключения логирования."}),(0,r.jsx)("li",{children:"Функции (скалярные или табличные, в общем любые) не могут вносить изменения в базу данных. То есть операции DML им недоступны. Но эти операции доступны для хранимых процедур. Поэтому для доступности логирования запросов нужно добавить хранимую процедуру для отправки зарпосов. Фактически процедура будет выполнять те же самые функции, что и скалярная функция для отправки запросов, но появится возможность эти запросы логировать и сохранять в таблицу базы данных."}),(0,r.jsx)("li",{children:"Добавим функции и процедуру для просмотра и изменения настроек протоколов безопасности."})]})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Итак, вот такие изменения будут в нашем модуле:"}),(0,r.jsx)(l.Z,{code:'\nusing Microsoft.SqlServer.Server;\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlTypes;\nusing HttpHelper.Models;\nusing System.Collections;\nusing System.Net;\nusing System.IO;\nusing System.Text;\nusing System.Xml.Linq;\n\nnamespace HttpHelper\n{\n    public class EntryHttpClient\n    {\n        // ...\n        \n        /// <summary>\n        /// Строка подключения к SQL Server.\n        /// \n        /// По умолчанию используется контекстное соединение,\n        /// из-под которого выполнен вызов функции или процедуры со стороны SQL Server.\n        /// </summary>\n        public static string ConnectionString { get; set; }\n            = "context connection=true";\n        // Флаг включения логирования запросов\n        private static long _loggingToDatabase = 0;\n\n        // ...\n\n        #region SecurityProtocol\n\n        [SqlFunction(\n            FillRowMethodName = "GetAvailableSecurityProtocolsFillRow",\n            SystemDataAccess = SystemDataAccessKind.Read,\n            DataAccess = DataAccessKind.Read)]\n        public static IEnumerable GetAvailableSecurityProtocols()\n        {\n            List<string> securityProtocols = new List<string>();\n\n            var availableProtocols = Enum.GetValues(SecurityProtocolType.SystemDefault.GetType());\n            foreach (var availableProtocol in availableProtocols)\n            {\n                securityProtocols.Add(availableProtocol.ToString());\n            }\n\n            return securityProtocols;\n        }\n        public static void GetAvailableSecurityProtocolsFillRow(object securityProtocolAsString, out SqlChars securityProtocol)\n        {\n            securityProtocol = new SqlChars((string)securityProtocolAsString);\n        }\n\n        [SqlFunction(\n            FillRowMethodName = "GetCurrentSecurityProtocolsFillRow",\n            SystemDataAccess = SystemDataAccessKind.Read,\n            DataAccess = DataAccessKind.Read)]\n        public static IEnumerable GetCurrentSecurityProtocols()\n        {\n            List<string> securityProtocols = new List<string>();\n\n            var availableProtocols = Enum.GetValues(SecurityProtocolType.SystemDefault.GetType());\n            foreach (var availableProtocol in availableProtocols)\n            {\n                if (ServicePointManager.SecurityProtocol.HasFlag((Enum)availableProtocol))\n                {\n                    securityProtocols.Add(availableProtocol.ToString());\n                }\n            }\n\n            return securityProtocols;\n        }\n        public static void GetCurrentSecurityProtocolsFillRow(object securityProtocolAsString, out SqlChars securityProtocol)\n        {\n            securityProtocol = new SqlChars((string)securityProtocolAsString);\n        }\n\n        [SqlProcedure]\n        public static void SetupSecurityProtocol(SqlChars protocols)\n        {\n            string protocolsAsString = new string(protocols.Value);\n\n            SecurityProtocolType? securityProtocol = null;\n            foreach (var protocol in protocolsAsString.Split(\',\'))\n            {\n                if (securityProtocol == null)\n                {\n                    securityProtocol = (SecurityProtocolType)Enum.Parse(typeof(SecurityProtocolType), protocol);\n                }\n                else\n                {\n                    securityProtocol = securityProtocol | (SecurityProtocolType)Enum.Parse(typeof(SecurityProtocolType), protocol);\n                }\n\n            }\n\n            if (securityProtocol == null)\n            {\n                ServicePointManager.SecurityProtocol = SecurityProtocolType.SystemDefault;\n            }\n            else\n            {\n                ServicePointManager.SecurityProtocol = (SecurityProtocolType)securityProtocol;\n            }\n        }\n\n        #endregion\n\n        // ...\n\n        #region LoggingToDatabase\n\n        [SqlProcedure]\n        public static void EnableLoggingToDatabase()\n        {\n            var loggingEnabled = Interlocked.Read(ref _loggingToDatabase) == 1;\n\n            if (!loggingEnabled)\n            {\n                Interlocked.Exchange(ref _loggingToDatabase, 1);\n\n                using (SqlConnection connection = new SqlConnection(ConnectionString))\n                {\n                    connection.Open();\n\n                    var command = connection.CreateCommand();\n                    command.CommandText =\n@"IF(OBJECT_ID(\'dbo.HttpQueriesLog\') IS NULL)\nBEGIN\n	CREATE TABLE [dbo].[HttpQueriesLog](\n		[Id] [uniqueidentifier] NOT NULL,\n		[Period] [datetime2](7) NOT NULL,\n		[Response] [xml] NULL,\n		[Exception] [xml] NULL,\n	 CONSTRAINT [PK_HttpQueriesLog] PRIMARY KEY CLUSTERED \n	(\n		[Id] ASC\n	) ON [PRIMARY]\n	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nEND";\n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n\n        [SqlProcedure]\n        public static void DisableLoggingToDatabase()\n        {\n            Interlocked.Exchange(ref _loggingToDatabase, 0);\n        }\n\n        #endregion\n\n        // ...\n\n        [SqlProcedure]\n        public static void HttpQueryProc(SqlChars url, SqlChars method, SqlXml headers, SqlChars body,\n            SqlInt32 timeoutMs, SqlBoolean ignoreCertificateValidation, out SqlXml result)\n        {\n            result = HttpQuery(url, method, headers, body, timeoutMs, ignoreCertificateValidation);\n\n            var loggingEnabled = Interlocked.Read(ref _loggingToDatabase) == 1;\n            if (loggingEnabled)\n            {\n                using (SqlConnection connection = new SqlConnection(ConnectionString))\n                {\n                    connection.Open();\n\n                    var command = connection.CreateCommand();\n                    command.CommandText =\n                        @"\nINSERT INTO [dbo].[HttpQueriesLog]\n           ([Id]\n           ,[Period]\n           ,[Response]\n           ,[Exception])\n     VALUES\n           (@ID\n           ,GETDATE()\n           ,@RESPONSE\n           ,@EXCEPTION)";\n\n                    command.Parameters.AddWithValue("@ID", Guid.NewGuid());\n\n                    XmlDocument xmlDocument = new XmlDocument();\n                    xmlDocument.LoadXml(result.Value);\n                    XmlNodeList nodeException = xmlDocument.SelectNodes("//Exception");\n                    if (nodeException == null || nodeException.Count == 0)\n                    {\n                        command.Parameters.AddWithValue("@RESPONSE", result);\n                        command.Parameters.AddWithValue("@EXCEPTION", DBNull.Value);\n                    }\n                    else\n                    {\n                        command.Parameters.AddWithValue("@RESPONSE", DBNull.Value);\n                        command.Parameters.AddWithValue("@EXCEPTION", result);\n                    }\n                    \n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n\n        // ...\n    }\n}\n                    ',className:"my-5",language:"csharp"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Зарегистрируем новые процедуры и функции. Финальный скрипт со всеми объектами выглядит так:"}),(0,r.jsx)(l.Z,{code:"\nEXEC sp_configure 'clr enabled', 1;  \nRECONFIGURE;  \nGO  \nALTER DATABASE PowerCLR SET TRUSTWORTHY ON;\nGO\n\nIF(OBJECT_ID('dbo.fn_GetHttpMethods') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpMethods];\nEND\n\nIF(OBJECT_ID('dbo.fn_HttpQuery') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_HttpQuery];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetUserAgentExamples') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetUserAgentExamples];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetHttpHelperInstanceCreateDateUtc') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpHelperInstanceCreateDateUtc];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetHttpHelperInstanceId') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetHttpHelperInstanceId];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetClrVersion') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetClrVersion];\nEND\n\nIF(OBJECT_ID('dbo.sp_SetupSecurityProtocol') IS NOT NULL)\nBEGIN\n	DROP PROCEDURE [sp_SetupSecurityProtocol];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetAvailableSecurityProtocols') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetAvailableSecurityProtocols];\nEND\n\nIF(OBJECT_ID('dbo.fn_GetCurrentSecurityProtocols') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_GetCurrentSecurityProtocols];\nEND\n\nIF(OBJECT_ID('dbo.fn_HttpGet') IS NOT NULL)\nBEGIN\n	DROP FUNCTION [fn_HttpGet];\nEND\n\nIF(OBJECT_ID('dbo.sp_EnableLoggingToDatabase') IS NOT NULL)\nBEGIN\n	DROP PROCEDURE [sp_EnableLoggingToDatabase];\nEND\n\nIF(OBJECT_ID('dbo.sp_DisableLoggingToDatabase') IS NOT NULL)\nBEGIN\n	DROP PROCEDURE [sp_DisableLoggingToDatabase];\nEND\n\nIF(OBJECT_ID('dbo.sp_HttpQueryProc') IS NOT NULL)\nBEGIN\n	DROP PROCEDURE [sp_HttpQueryProc];\nEND\n\nif(EXISTS(select * from sys.assemblies WHERE [name] = 'HttpHelper'))\nBEGIN\n	DROP ASSEMBLY [HttpHelper];\nEND\n\nCREATE ASSEMBLY [HttpHelper]\n	FROM 'C:ShareSQLCLRHttpHelper.dll'\n	WITH PERMISSION_SET = UNSAFE;\nGO\n\n	CREATE PROCEDURE [dbo].[sp_SetupSecurityProtocol](\n		@protocols nvarchar(max)\n	)\n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[SetupSecurityProtocol];\n	GO\n\n	CREATE FUNCTION fn_GetHttpHelperInstanceCreateDateUTC() \n	RETURNS datetime   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpHelperInstanceCreateDateUtc];   \n	GO\n\n	CREATE FUNCTION fn_GetHttpHelperInstanceId() \n	RETURNS uniqueidentifier   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpHelperInstanceId];   \n	GO\n\n	CREATE FUNCTION fn_GetClrVersion() \n	RETURNS nvarchar(50)   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetClrVersion];   \n	GO\n\n	CREATE FUNCTION fn_HttpQuery (\n		@url nvarchar(max),\n		@method nvarchar(150) = 'GET',\n		@headers xml,\n		@body nvarchar(max),\n		@timeoutMs int = 0,\n		@ignoreCertificateValidation bit = 0	\n	) \n	RETURNS xml   \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[HttpQuery];   \n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetHttpMethods]()  \n	RETURNS TABLE (\n		[Name] nvarchar(150)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetHttpMethods];\n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetUserAgentExamples]()  \n	RETURNS TABLE (\n		[Browser] nvarchar(max),\n		[OperationSystem] nvarchar(max),\n		[UserAgent] nvarchar(max)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetUserAgentExamples];\n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetAvailableSecurityProtocols]()  \n	RETURNS TABLE (\n		[Name] nvarchar(150)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetAvailableSecurityProtocols];\n	GO\n\n	CREATE FUNCTION [dbo].[fn_GetCurrentSecurityProtocols]()  \n	RETURNS TABLE (\n		[Name] nvarchar(150)\n	)\n	AS   \n	EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[GetCurrentSecurityProtocols];\n	GO\n\n	CREATE FUNCTION fn_HttpGet \n	(\n		@url nvarchar(max)\n	)\n	RETURNS nvarchar(max)\n	AS\n	BEGIN\n		DECLARE @response xml,\n			@bodyJson nvarchar(max);\n\n		SELECT @response = [dbo].[fn_HttpQuery] (\n			@url,\n			DEFAULT,\n			null,\n			null,\n			60000,\n			DEFAULT\n		);\n\n		SELECT @bodyJson = @response.value('(/Response/Body)[1]', 'nvarchar(max)');\n\n		RETURN @bodyJson;\n	END\n	GO\n\n	CREATE PROCEDURE [dbo].[sp_EnableLoggingToDatabase]\n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[EnableLoggingToDatabase];\n	GO\n\n	CREATE PROCEDURE [dbo].[sp_DisableLoggingToDatabase]\n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[DisableLoggingToDatabase];\n	GO\n\n	CREATE PROCEDURE sp_HttpQueryProc (\n		@url nvarchar(max),\n		@method nvarchar(150) = 'GET',\n		@headers xml,\n		@body nvarchar(max),\n		@timeoutMs int = 0,\n		@ignoreCertificateValidation bit = 0,\n		@result xml out\n	)  \n	AS EXTERNAL NAME [HttpHelper].[HttpHelper.EntryHttpClient].[HttpQueryProc];   \n	GO\n                    ",className:"my-5",language:"sql"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Теперь мы можем включить логирование и выполнять HTTP-запрос с сохранением его в таблицу логов."}),(0,r.jsx)(l.Z,{code:"\n-- Включаем логирование запросов\nEXECUTE [dbo].[sp_EnableLoggingToDatabase] \nGO\n\n-- Выполняем запрос\nDECLARE @url nvarchar(max) = N'https://api.tinydevtools.ru/myip';\nDECLARE @method nvarchar(150) = 'GET';\nDECLARE @headers xml = null;\nDECLARE @timeoutMs int = 60000;\nDECLARE @body nvarchar(max) = null;\nDECLARE @ignoreCertificateValidation bit = 0;\nDECLARE @result xml;\n\nEXECUTE [dbo].[sp_HttpQueryProc] \n   @url\n  ,@method\n  ,@headers\n  ,@body\n  ,@timeoutMs\n  ,@ignoreCertificateValidation\n  ,@result OUTPUT;\n\nSELECT \n	[IP]\nFROM OPENJSON(@result.value('(/Response/Body)[1]', 'nvarchar(max)')) WITH (\n	IP nvarchar(max) '$.IP'\n)\nGO\n\n-- Отключаем логирование\nEXECUTE [dbo].[sp_DisableLoggingToDatabase] \nGO\n                    ",className:"my-5",language:"sql"}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Результат сохранения логов отправки запросов можно посмотреть так:",(0,r.jsx)(l.Z,{code:"\nSELECT TOP (1000) [Id]\n      ,[Period]\n      ,[Response]\n      ,[Exception]\n  FROM [PowerCLR].[dbo].[HttpQueriesLog]\n                    ",className:"my-5",language:"sql"})]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Таким образом, мы можем использовать хранимую процедуру для отправки HTTP-запросов, как мы это делали со скалярной функцией. При этом появляется возможность использования логирования запросов в отдельную таблицу."}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["Особенностью работы с базой данных здесь является использование контекстного соединения с базой данных. Это означает, что мы можем переиспользовать соединение со SQL Server той сессии, которая использует расширение SQLCLR. ",(0,r.jsx)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/relational-databases/clr-integration/data-access/context-connection?view=sql-server-ver16",children:(0,r.jsx)("b",{children:(0,r.jsx)("u",{children:"Подробнее смотрите в документации"})})}),"."]}),(0,r.jsxs)(s.xv,{textAlign:a.PH.JUSTIFY,children:["И финальный штрих - это настройка протоколов безопасности. Здесь мы видим все те же самые приемы, о которых говорили выше. Имеем три метода:",(0,r.jsxs)(s.aV,{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"fn_GetAvailableSecurityProtocols"})," - список протоколов, доступных для использования. Функция табличная."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"fn_GetCurrentSecurityProtocols"})," - список используемых протоколов в данный момент. Функция табличная."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("b",{children:"sp_SetupSecurityProtocol"})," - хранимая процедура для установки используемых протоколов безопаности. Пример использования:",(0,r.jsx)(l.Z,{code:"\nEXECUTE [dbo].[sp_SetupSecurityProtocol] \n   @protocols = 'Ssl3,Tls,Tls11,Tls12'\nGO\n                                ",className:"my-5",language:"sql"})]})]}),"Обычно данную настройку менять не нужно, т.к. по умолчанию все значения включены, но возможность лишней не будет. В технической реализации в части работы со SQLCLR здесь ничего нового нет."]}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"На этом активные доработки расширения закончены. Мы имеет базу данных со следующими объектами, созданными в рамках разработки расширения SQLCLR."}),(0,r.jsx)(s.Ee,{className:"my-4",src:"/public/imp_assets/.NET/2024-09/simple-and-fast-sql-clr/3. Объекты базы данных.png",alt:"Объекты базы данных",size:a.h2.MEDIUM}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Пора перейти к заключению!"})]}),(0,r.jsxs)("section",{id:"section-theend",children:[(0,r.jsx)(s.xv,{id:"theend",title:!0,className:"mt-10 md:text",children:"Конец или не конец?"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Иногда можно услышать, что если что-то нельзя просто так решить с помощью T-SQL, то нужно делать расширение SQLCLR, ведь мощь .NET (C#) огромна и позволяет решить любую задачу. Однако, здесь кроется хитрая ловушка!"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Если какую-то задачу нельзя решить с помощью T-SQL, то может эту задачу и не надо решать средствами T-SQL и SQLCLR в том числе. Возможно, это задача совсем для другого инструментария!"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:'Сегодня мы рассмотрели создание компоненты для работы с HTTP-запросами из T-SQL. Иногда это может быть полезным, но, возможно, есть архитектурные проблемы приложения, если к такого рода расширениям приходится прибегать. Возможно, запросы стоит отправлять из отдельного сервиса, который уже будет загружать данные в базу данных SQL Server. Но все это рассуждения "в вакууме" и всегда нужно смотреть на контекст задачи.'}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"В любом случае, теперь Вы можете создавать расширения SQLCLR. Главное делать это с умом!"}),(0,r.jsx)(s.xv,{textAlign:a.PH.JUSTIFY,children:"Спасибо, что дочитали! Удачи в делах!"})]}),(0,r.jsxs)("section",{id:"section-link",children:[(0,r.jsx)(s.xv,{id:"link",title:!0,className:"mt-10 md:text",children:"Полезные ссылки"}),(0,r.jsxs)(s.aV,{children:[(0,r.jsx)("li",{children:(0,r.jsxs)(s.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/sql/relational-databases/clr-integration/common-language-runtime-integration-overview?view=sql-server-ver16",children:[(0,r.jsx)("u",{children:(0,r.jsx)("b",{children:"Официальная документация"})})," - официальная документация с подробными сведениями всех аспектов использования SQLCLR."]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-SQLCLR",children:[(0,r.jsx)("u",{children:(0,r.jsx)("b",{children:"SQLCLR (SQLServerTools)"})})," - раздел по SQLCLR с полезными ссылками и проектами."]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-SQLCLR/Projects",children:[(0,r.jsx)("u",{children:(0,r.jsx)("b",{children:"Проекты по SQLCLR"})})," - раздел с проектами расширений SQLCLR (для задач администрирования, интеграции с платформой 1С, работы с HTTP-запросами и другое)."]})}),(0,r.jsx)("li",{children:(0,r.jsxs)(s.e9,{newTab:!0,href:"https://github.com/eilerth/sqlclr-http-request",children:[(0,r.jsx)("u",{children:(0,r.jsx)("b",{children:"sqlclr-http-request "})})," - еще один проект расширения SQLCLR для работы с HTTP-запросами."]})})]})]})]})},7855:function(e,n,t){"use strict";var r,s;t.d(n,{b:function(){return r}}),(s=r||(r={})).Min="350px",s.Standard="700px",s.Large="1000x",s.Unlimited=""},4313:function(e,n,t){"use strict";var r=t(7340),s=t(5893),l=t(7294),a=t(4965),i=t(1240),o=t(1686),c=t(7855);function d(){let e=(0,r._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return d=function(){return e},e}function u(){let e=(0,r._)(["\n        max-height: ","\n    "]);return u=function(){return e},e}n.Z=e=>{let{code:n,className:r,language:p,maxHeight:S=c.b.Standard}=e;(void 0!==t.g?t.g:window).Prism=a.p1,t(1354),t(9016),t(5266),t(2927),t(1315),t(7874),t(6862);let E=null!=S?S:c.b.Standard,m=o.ZP.pre(d()),h=(0,o.ZP)(m)(u(),E);return(0,s.jsx)("div",{className:(0,i.GF)("bg-blue-500 md:p-1 p-2",r),children:(0,s.jsx)("div",{className:"shadow-lg",children:(0,s.jsx)(a.y$,{theme:a.np.vsDark,code:n.trim(),language:null!=p?p:p="tsx",children:e=>{let{className:n,style:t,tokens:r,getLineProps:a,getTokenProps:i}=e;return(0,s.jsx)(h,{className:n,style:t,children:r.map((e,n)=>(0,l.createElement)("div",{...a({line:e,key:n}),key:Math.random()},e.map((e,n)=>(0,l.createElement)("span",{...i({token:e,key:n}),key:Math.random()}))))})}})})})}},4853:function(e,n,t){"use strict";t.d(n,{Ee:function(){return i},Xg:function(){return l},Y7:function(){return u},aV:function(){return c},e9:function(){return d},o_:function(){return p},tf:function(){return S},ty:function(){return o},xv:function(){return a}});var r=t(5152),s=t.n(r);let l=s()(()=>Promise.all([t.e(9686),t.e(4738),t.e(4838),t.e(1664),t.e(8765)]).then(t.bind(t,8765)),{loadableGenerated:{webpack:()=>[8765]}}),a=s()(()=>Promise.all([t.e(9511),t.e(935)]).then(t.bind(t,935)),{loadableGenerated:{webpack:()=>[935]}}),i=s()(()=>Promise.all([t.e(328),t.e(7651)]).then(t.bind(t,7651)),{loadableGenerated:{webpack:()=>[7651]}}),o=s()(()=>Promise.all([t.e(9686),t.e(6979)]).then(t.bind(t,6979)),{loadableGenerated:{webpack:()=>[6979]}}),c=s()(()=>Promise.all([t.e(4159),t.e(7355)]).then(t.bind(t,7355)),{loadableGenerated:{webpack:()=>[7355]}}),d=s()(()=>Promise.all([t.e(1664),t.e(3220)]).then(t.bind(t,3220)),{loadableGenerated:{webpack:()=>[3220]}});s()(()=>t.e(3140).then(t.bind(t,3140)),{loadableGenerated:{webpack:()=>[3140]}});let u=s()(()=>Promise.all([t.e(2004),t.e(736)]).then(t.bind(t,736)),{loadableGenerated:{webpack:()=>[736]}}),p=s()(()=>Promise.all([t.e(8331),t.e(2877),t.e(2660),t.e(9718),t.e(5090),t.e(9606)]).then(t.bind(t,9606)),{loadableGenerated:{webpack:()=>[9606]}}),S=s()(()=>Promise.all([t.e(8331),t.e(1664),t.e(2660),t.e(9718),t.e(8496)]).then(t.bind(t,8496)),{loadableGenerated:{webpack:()=>[8496]}})}},function(e){e.O(0,[6443,2888,9774,179],function(){return e(e.s=7143)}),_N_E=e.O()}]);