(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9473],{6232:function(n,e,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/SQLServer/2019-03/bulk-operations-faster-then-insert",function(){return r(7480)}])},7480:function(n,e,r){"use strict";r.r(e);var s=r(5893),a=r(4853);r(7294);var t=r(1667),l=r(3218),o=r(4877),c=r(2967),i=r(7168),d=r(8148),m=r(4313),x=r(9209);e.default=()=>(0,s.jsxs)(a.Xg,{blogcentered:!0,children:[(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Предисловие"}),(0,s.jsx)(a.xv,{p:!0,children:"Microsoft SQL Server поддерживает так называемые BULK-операции, используемые для быстрого изменения больших объемов данных в базе. В статье пойдет речь о практических примерах их использования. Все примеры сделаны в контексте платформы 1С (а как иначе)."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Суть проблемы"}),(0,s.jsx)(a.xv,{p:!0,children:"Чем больше база данных - тем больше и ответственность, потому что появляются такие проблемы, о которых раньше можно было даже не подозревать. Это и влияние неоптимальных запросов на работу всей системы, плохое обслуживание индексов и статистик, “чудеса” платформенных запросов, стратегии бэкапирования и многое многое другое. Но мы, конечно же, обо всем этом говорить сегодня не будем."}),(0,s.jsx)(a.xv,{p:!0,children:"Сегодня в центре внимания будет другая проблема - оптимизация операций массовой вставки / обновления данных в базе с помощью BULK-операций СУБД, а также как это можно использовать на практике. Все примеры ниже не являются простыми и не претендуют на универсальное решение. Основная цель публикации - демонстрация возможностей СУБД в контексте платформы 1С для решения подобных задач."}),(0,s.jsx)(a.xv,{p:!0,children:"Полезна ли будет для Вас эта информация? Если Вы когда-либо имели дело хотя бы с одной из следующих задач, то материал может пригодиться:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"Выгрузка большого массива данных из 1С во внешнюю базу данных (SQL Server, PostgreSQL и др. СУБД). Надеюсь, Вы не делали выгрузку большим количеством операций INSERT, а если делали, то читать обязательно."}),(0,s.jsx)("li",{children:"Загрузка очень больших массивов данных из внешнего источника в таблицы 1С (регистры сведений, справочники и т.д.). Конечно, чаще всего это делать лучше средствами платформы, но что если время выполнения категорически не устраивает?"}),(0,s.jsx)("li",{children:"Специфика работы с базой требует частого восстановления данных. Постоянно восстанавливать бэкап и не жалеть на это время?"})]}),(0,s.jsx)(a.xv,{p:!0,children:"Почему для платформы 1С это может быть проблемой? Вот несколько ситуаций:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"Нужно загрузить несколько миллионов записей в регистр сведений. Как это обычно делают? Правильно - записывают эти миллионы записей через набор регистров сведений, устанавливая необходимые отборы. На уровне СУБД это миллионы операций INSERT. Оптимально ли это?"}),(0,s.jsxs)("li",{children:["Есть внешняя база данных и нужно туда делать массовую выгрузку за предыдущий месяц после закрытия периода. Вроде все просто. Но 1Сный путь в этом случае обычно принимает один из возможных вариантов (но не обязательно):",(0,s.jsxs)(a.aV,{children:[(0,s.jsx)("li",{children:"Разработчик делает запрос на стороне 1С и выгружает во внешнюю базу с помощью отдельных операций INSERT через ADO. Думаете это быстро на больших массивах данных?"}),(0,s.jsx)("li",{children:"Делает то же самое, что и в предыдущем пункте, через внешние источники данных. В них вызывается хранимая процедура, которая фактически делает отдельные INSERT’ы. Но разработчик утверждает, что это быстрее чем работа с ADO. Улучшит ли это ситуацию?"})]})]}),(0,s.jsx)("li",{children:"Обмен данными между базами 1С, но требовательный к скорости передачи массивов данных. То есть операцию нужно выполнить как можно скорее. Вместо 6 часов нужно уменьшить время обмена до 10 минут. Средствами платформы это сделать либо очень трудно, либо еще труднее (заметьте, я не сказал невозможно!)."})]}),(0,s.jsx)(a.xv,{p:!0,children:"Тут то на помощь и могут прийти возможности BULK-операций. Большинство примеров будет в рамках Microsoft SQL Server, но и для PostgreSQL будет кое-что интересное."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Немного теории"}),(0,s.jsx)(a.xv,{p:!0,children:"С помощью операций BULK INSERT и BULK MERGE можно эффективно загружать большие массивы данных в базу. Эти способы имеют преимущества в производительности по сравнению с методами загрузки данных через множественные операции INSERT, в том числе и пакетный INSERT. Ниже мы не будем останавливаться на сравнении BULK и пакетного INSERT, но будут некоторые ссылки на сторонние публикации для сравнения."}),(0,s.jsx)(a.xv,{p:!0,children:"Почему BULK INSERT быстрее? Потому что это минимально логируемая операция, объем логов которой зависит от модели восстановления базы, наличия индексов и ограничений. Также с помощью некоторых параметров можно управлять размерами порций данных, которые будут записываться в таблицу в рамках одной транзакции, что также может привести к ускорению операции. Например, если у Вас установлена модель восстановления “Простая” или “C неполным протоколированием”, то использование BULK-операций может существенно ускорить операции загрузки данных. Но даже если у вас “Полная” модель восстановления, то и в этом случае они помогут ускорить операции массовой загрузки / изменения данных, особенно если это касается платформы 1С. Все это будет продемонстрировано ниже."}),(0,s.jsx)(a.xv,{p:!0,children:"Дополнительный прирост производительности можно достичь путем отключения индексов на время загрузки и их перестроение по завершению операции. Что касается ограничений на уровне SQL Server, то платформа 1С их явно не использует, поэтому далее рассматривать их не будем."}),(0,s.jsxs)(a.xv,{p:!0,children:["Подробную информацию по использованию BULK INSERT можно ",(0,s.jsx)("b",{children:(0,s.jsx)("u",{children:(0,s.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/en-us/sql/t-sql/statements/bulk-insert-transact-sql?view=sql-server-ver16",children:"найти на MSDN"})})}),". Там же есть информация по ",(0,s.jsx)("b",{children:(0,s.jsx)("u",{children:(0,s.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/tools/bcp-utility?view=sql-server-2017",children:"операциям массового импорта данных"})})}),". Далее мы не будем рассматривать все особенности BULK-операций, а лишь то, что будет относиться к практическим кейсам."]}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Когда использовать"}),(0,s.jsx)(a.xv,{p:!0,children:"Будем честными и признаем, что платформа 1С все же использует BULK-операции в особых случаях. Например, если Вы загружаете DT-выгрузку базы, то платформа использует операции BUKL INSERT для переноса данных в таблицы SQL Server. Вот пример SQL-команды при загрузке данных из DT-файла."}),(0,s.jsx)(m.Z,{code:"\ninsert bulk _AccRg786(\n    [_Period] datetime2(0),\n    [_RecorderTRef] binary(4),\n    [_RecorderRRef] binary(16),\n    [_LineNo] numeric(9,0),\n    [_Active] binary(1),\n    [_AccountDtRRef] binary(16),\n    [_AccountCtRRef] binary(16),\n    [_Fld787RRef] binary(16),\n    [_Fld788DtRRef] binary(16),\n    [_Fld788CtRRef] binary(16),\n    [_Fld789DtRRef] binary(16),\n    [_Fld789CtRRef] binary(16),\n    [_Fld790] numeric(15,2),\n    [_Fld791Dt] numeric(15,2),\n    [_Fld791Ct] numeric(15,2),\n    [_Fld792Dt] numeric(15,3),\n    [_Fld792Ct] numeric(15,3),\n    [_Fld793Dt] numeric(15,2),\n    [_Fld793Ct] numeric(15,2),\n    [_Fld794Dt] numeric(15,2),\n    [_Fld794Ct] numeric(15,2),\n    [_Fld795Dt] numeric(15,2),\n    [_Fld795Ct] numeric(15,2),\n    [_Fld796] nvarchar(150) collate Cyrillic_General_CI_AS,\n    [_Fld797] binary(1),\n    [_Fld774] numeric(7,0),\n    [_EDHashDt] numeric(10,0),\n    [_EDHashCt] numeric(10,0)\n) with (\n    TABLOCK, \n    ROWS_PER_BATCH=10000\n)\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"Также Bulk Insert используется в некоторых случаях при реструктуризации базы данных. К сожалению, при разработке мы ничего не можем сделать, чтобы платформа начала использовать BULK-операции в прикладных решениях, таких возможностей просто не предоставляется. Но есть обходные пути, с которыми Вы познакомитесь ниже."}),(0,s.jsx)(a.xv,{p:!0,children:"Запрос выше не содержит никакой информации об источнике загружаемых данных. Так происходит, потому что трассировка отслеживает только TDS-пакет, который анонсирует начало загрузки данных, а также таблицу назначения для загрузки. Данные же фактически передаются последующими пакетами."}),(0,s.jsx)(a.xv,{p:!0,children:"Поскольку платформа 1С не предоставляет штатные возможности использования операций массовой вставки / обновления данных, то использовать подобный подход работы повсеместно просто не имеет смысла. Эти решения обосновано применять для интеграций, массовых загрузок данных, построения внешнего хранилища данных, восстановления данных и др. То есть там, где штатные возможности не удовлетворяют потребностям бизнеса. Если Вы не видите для себя никаких преимуществ в их использовании, то скорее всего они и не пригодятся."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Примеры задач"}),(0,s.jsx)(a.xv,{p:!0,children:"Теперь рассмотрим несколько примеров. В качестве полигона будем использовать демобазу БСП. Мы сосредоточимся больше на BULK-операциях и не будем рассматривать такие вопросы как: отключение индексов и ограничений на время загрузки данных; или изменение модели восстановления базы и др. Просто помните, что отключение индексов на время загрузки данных может значительно ускорить операцию."}),(0,s.jsx)(a.xv,{p:!0,children:"Все примеры выдуманные! Любое сходство с реальными проектами и задачами случайно! Все примеры очень упрощенные."}),(0,s.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Архивирование замеров производительности"}),(0,s.jsx)(a.xv,{p:!0,children:"Во многих конфигурациях есть подсистема “Оценка производительности”, собирающая замеры времени выполнения операций. В зависимости от интенсивности работы в базе, регистр может наполняться большим количеством записей, что приводит к излишнему росту базы данных. В подсистеме уже есть механизмы экспорта и очистки исторических данных средствами платформы, но при больших объемах логов эти операции могут выполняться значительное время."}),(0,s.jsx)(a.xv,{p:!0,children:"В этом случае можно пойти другим путем и сделать выгрузку средствами SQL Server в другую внешнюю базу с логами, после чего удалять выгруженные данные в базе 1С."}),(0,s.jsx)(a.xv,{p:!0,children:"Как это сделать? Допустим у нас есть 1Сная база, в которой имеются такие таблицы."}),(0,s.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-03/bulk-operations-faster-then-insert/1. Метаданные замеров производительности.png",alt:"Метаданные замеров производительности",size:x.h2.SMALL}),(0,s.jsx)(a.xv,{p:!0,children:"Внешняя база хранит историю замеров в следующем виде."}),(0,s.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-03/bulk-operations-faster-then-insert/2. Структура внешней базы для замеров.png",alt:"Структура внешней базы для замеров",size:x.h2.SMALL}),(0,s.jsx)(m.Z,{code:"\nCREATE TABLE [dbo].[KeyOperations](\n	[ID] [binary](16) NOT NULL,\n	[Name] [nvarchar](150) NOT NULL,\n	[Description] [nvarchar](max) NULL,\n\n	CONSTRAINT [PK_KeyOperations] PRIMARY KEY CLUSTERED \n	(\n		[ID] ASC\n	)  ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n\nCREATE TABLE [dbo].[PerformanceMeasurements](\n	[KeyOperation] [binary](16) NOT NULL,\n	[BeginDate] [numeric](15, 0) NOT NULL,\n	[SessionID] [numeric](15, 0) NOT NULL,\n	[PeriodHour] [datetime2](7) NOT NULL,\n	[Duration] [numeric](15, 3) NOT NULL,\n	[UserName] [nvarchar](150) NOT NULL,\n	CONSTRAINT [PK_PerformanceMeasurements] PRIMARY KEY CLUSTERED \n	(\n		[KeyOperation] ASC,\n		[BeginDate] ASC,\n		[SessionID] ASC,\n		[PeriodHour] ASC\n	) ON [PRIMARY]\n) ON [PRIMARY]\nGO\n\nALTER TABLE [dbo].[PerformanceMeasurements]  WITH CHECK ADD	\n	CONSTRAINT [FK_PerformanceMeasurements_KeyOperation] FOREIGN KEY([KeyOperation])\nREFERENCES [dbo].[KeyOperations] ([ID])\nGO\n\nALTER TABLE [dbo].[PerformanceMeasurements] CHECK CONSTRAINT [FK_PerformanceMeasurements_KeyOperation]\nGO\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"Для наглядности и простоты будем считать, что обе базы находятся на одном инстансе. Вот такой скрипт позволяет выполнить все необходимые операции."}),(0,s.jsx)(m.Z,{code:"\n-- Дано:\n--	1. Базы [bsl] (исходная база) и [PerfMonitoring] (приемник данных)\n--	2. [_Reference2598] - таблица ключевых операций на стороне 1С\n--		_IDRRef		 - Идентификатор\n--		_Description - Имя операции\n--		_Fld4266	 - Служебное имя ключевой операции\n--	3. [_InfoRg5892] - таблица регистра замеров времени на стороне 1С\n--		_Fld5893RRef - Ключевая операция\n--		_Fld5894	 - Дата начала замера в миллисекундах\n--		_Fld5895	 - Номер сеанса 1С\n--		_Fld5896	 - Дата записи (начало часа)\n--		_Fld5897	 - Время выполнения\n--		_Fld5902	 - Имя пользователя\n\nSET NOCOUNT ON;\n\nDECLARE \n	@sourceDatabase SYSNAME = 'bsl',\n	@fileToUpload_KeyOperations nvarchar(max) = 'D:SQLExchangeKeyOperations.dat',\n	@fileToUpload_PerformanceMeasurements nvarchar(max) = 'D:SQLExchangePerformanceMeasurements.dat',\n	@bcpErrorLog nvarchar(max) = 'D:SQLExchangeErrorLog.txt',\n	@sqlServerInstance nvarchar(max) = 'localhost',\n	@sqlLoginName nvarchar(max) = '<Логни>',\n	@sqlLoginPassword nvarchar(max) = '<Пароль>',\n	@cmdKeyOperationUpload varchar(8000),\n	@cmdKeyOperationLoad varchar(8000),\n	@cmdPerformanceMeasurementsUpload varchar(8000),\n	@cmdPerformanceMeasurementsLoad varchar(8000);\n\n-- Этап №1: Синхронизируем ключевые операции\n\n-- Формируем команды вызова утилиты BCP и передаем ее на выполнение в 'xp_cmdshell'\nSET @cmdKeyOperationUpload = \n	'bcp ' +\n	'\"SELECT _IDRRef, _Description, _Fld4266 FROM [' + @sourceDatabase + '].[dbo].[_Reference2598]\" ' +\n	 'queryout ' + @fileToUpload_KeyOperations + ' -T -c ' +\n	 '-e \"' + @bcpErrorLog + '\" ' +\n	 '-U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmdKeyOperationUpload, no_output\n\n-- Подготоваливаем временную таблицу для последующей обработки данных\n-- Таблица выступает в качестве буфера\nIF OBJECT_ID('tempdb..##tt_KeyOperations') IS NOT NULL\n	DROP TABLE ##tt_KeyOperations;\nCREATE TABLE ##tt_KeyOperations\n(\n	[ID] [binary](16) NOT NULL,\n	[Name] [nvarchar](150) NOT NULL,\n	[Description] [nvarchar](max) NULL,\n)\n\n-- Загружаем данные во временную таблицу для последующей обработки\n-- с помощью утилиты BCP. Данные из временной таблицы будут использоваться\n-- для постобработки\nSET @cmdKeyOperationLoad = \n	'bcp ##tt_KeyOperations IN \"' + @fileToUpload_KeyOperations + '\" ' + \n	'-T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmdKeyOperationLoad, no_output\n\n-- Обновляем данные в таблице [KeyOperations] с помощью операции MERGE\n-- по следующей логике\n--	1. Если ключевая операция по ID найдена и есть изменения полей,\n--		то обновляем запись\n--	2. Если ключевая операция по ID НЕ найдена, то просто добавляем\n--		недостающую запись\nMERGE [dbo].[KeyOperations] AS target\n	USING (SELECT [ID], [Name], [Description] FROM ##tt_KeyOperations) AS source ([ID], [Name], [Description])   \n	ON (target.[ID] = source.[ID])  \n	WHEN MATCHED AND NOT target.[Name] = source.[Name] THEN\n		UPDATE SET [Name] = source.[Name]\n				  ,[Description] = source.[Description]		\n	WHEN NOT MATCHED THEN  \n		INSERT ([ID], [Name], [Description])  \n		VALUES (source.[ID], source.[Name], source.[Description]);  \n\n-- Удаляем временную таблицу\nIF OBJECT_ID('tempdb..##tt_KeyOperations') IS NOT NULL\n	DROP TABLE ##tt_KeyOperations;\n\n/*\nЭту синхронизацию следует запускать перед выгрузкой замеров времени, чтобы список ключевых операций во внешней базе всегда был актуальный на момент выгрузки замеров.\n*/\n\n-- Этап №2: Выгружаем порцию замеров \n\n-- Подготавливаем и выполняем команду выгрузки порции замеров времени с помощью утилиты BCP\nSET @cmdPerformanceMeasurementsUpload = \n	'bcp ' +\n	'\"SELECT TOP 10000 _Fld5893RRef, _Fld5894, _Fld5895, _Fld5896, _Fld5897, _Fld5902 FROM [' + @sourceDatabase + '].[dbo].[_InfoRg5892] ORDER BY _Fld5894\" ' +\n	 'queryout ' + @fileToUpload_PerformanceMeasurements + ' -T -c ' +\n	 '-e \"' + @bcpErrorLog + '\" ' +\n	 '-U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmdPerformanceMeasurementsUpload, no_output;\n\n-- Подготавливаем временную таблицу для сохранения промежуточных данных\n-- с целью постобработки\nIF OBJECT_ID('tempdb..##tt_PerformanceMeasurements') IS NOT NULL\n	DROP TABLE ##tt_PerformanceMeasurements;\nCREATE TABLE ##tt_PerformanceMeasurements\n(\n	[KeyOperation] [binary](16) NOT NULL,\n	[BeginDate] [numeric](15, 0) NOT NULL,\n	[SessionID] [numeric](15, 0) NOT NULL,\n	[PeriodHour] [datetime2](7) NOT NULL,\n	[Duration] [numeric](15, 3) NOT NULL,\n	[UserName] [nvarchar](150) NOT NULL,\n)\n\n-- Загружаем данные во временную таблицу для последующего использования\nSET @cmdPerformanceMeasurementsLoad = \n	'bcp ##tt_PerformanceMeasurements IN \"' + @fileToUpload_PerformanceMeasurements + '\" ' + \n	'-e \"' + @bcpErrorLog + '\" ' +\n	'-T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmdPerformanceMeasurementsLoad, no_output;\n\n-- Данные из временной таблицы добавляем в таблицу \"PerformanceMeasurements\" с помощью операции MERGE\n-- по следующей логике:\n--	1. Если запись не найдена, то просто добавляем ее в таблицу\n--	2. Если запись по основным измерениям уже существует, то пропускаем загрузку\nMERGE [dbo].[PerformanceMeasurements] AS target\n	USING (SELECT [KeyOperation], [BeginDate], [SessionID], [PeriodHour], [Duration], [UserName] FROM ##tt_PerformanceMeasurements) \n		AS source ([KeyOperation], [BeginDate], [SessionID], [PeriodHour], [Duration], [UserName])   \n	ON (target.[KeyOperation] = source.[KeyOperation]\n		AND target.[BeginDate] = source.[BeginDate]\n		AND target.[SessionID] = source.[SessionID]\n		AND target.[PeriodHour] = source.[PeriodHour])\n	WHEN NOT MATCHED THEN  \n		INSERT ([KeyOperation], [BeginDate], [SessionID], [PeriodHour], [Duration], [UserName])  \n		VALUES (source.[KeyOperation], source.[BeginDate], source.[SessionID], source.[PeriodHour], source.[Duration], source.[UserName]);  \n\n-- Удаляем ранее выгруженные данные из исходной таблицы\nDELETE FROM [bsl].[dbo].[_InfoRg5892]\nWHERE EXISTS (\n	SELECT * FROM ##tt_PerformanceMeasurements tb_tmp\n	WHERE [_Fld5893RRef] = tb_tmp.[KeyOperation]\n		AND [_Fld5894] = tb_tmp.[BeginDate]\n		AND [_Fld5895] = tb_tmp.[SessionID]\n		AND [_Fld5896] = tb_tmp.[PeriodHour]\n)\n\n-- Удаляем временную таблицу\nIF OBJECT_ID('tempdb..##tt_PerformanceMeasurements') IS NOT NULL\n	DROP TABLE ##tt_PerformanceMeasurements;\n\n/*\nНа 2 этапе выполняется выгрузка замеров времени порцией в 10000  записей. На практике этот этап можно запускать с некоторой периодичностью.\n*/\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"В комментариях дано описание основных этапов. Для выгрузки используется штатная для SQL Server утилита BCP, предназначенная для решения задач импорта и экспорта данных. Подробнее о BCP ( Bulk Copy Program) можно узнать здесь и вот здесь. Основное, что нужно сейчас понять, что BCP позволяет выгружать и загружать данные достаточно быстрым способом. Одним из главных предназначений BCP является перенос данных между отдельными серверами. У нас же простой пример, мы используем BCP в рамках одного сервера, поэтому подобный подход может показаться излишним."}),(0,s.jsx)(a.xv,{p:!0,children:"В реальности же, рабочая база находится на одном сервере, а база с логами на другом. В этом случае использование BCP будет полностью оправдано для быстрой и эффективной передачи данных."}),(0,s.jsx)(a.xv,{p:!0,children:"По умолчанию возможность использования `xp_cmdshell` ограничена параметрами инстанса SQL Server. Для включения этой фичи необходимо выполнить такой скрипт."}),(0,s.jsx)(m.Z,{code:"\n-- Включаем возможность изменения дополнительный настроек\nEXEC sp_configure 'show advanced options', 1\nGO\n-- Применяем сделанные изменения\nRECONFIGURE\nGO\n-- Включаем возможность использования команд\nEXEC sp_configure 'xp_cmdshell', 1\nGO\n-- Применяем сделанные изменения\nRECONFIGURE\nGO\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"Это требует дополнительных мер безопасности, чтобы злоумышленники не смогли использовать командную оболочку в SQL Server в корыстных целях. Подробнее читать здесь."}),(0,s.jsxs)(a.xv,{p:!0,children:["Вместо BCP можно сделать выгрузку, например, в CSV средствами 1С, но в этом случае пришлось бы позаботиться о проверках при передаче данных файла во внешнюю базу на случаи сбоев, чтобы не удалить в исходной базе еще не переданную информацию. Также есть такие утилиты как ",(0,s.jsx)("b",{children:(0,s.jsx)("u",{children:(0,s.jsx)(a.e9,{newTab:!0,href:"https://learn.microsoft.com/ru-ru/sql/tools/sqlcmd-utility?view=sql-server-ver16",children:"SQLCMD"})})}),", которая также позволяет делать выгрузки данных."]}),(0,s.jsx)(a.xv,{p:!0,children:"Этот пример должен был показать следующее:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"SQL Server имеет инструмент для быстрой и эффективной выгрузки / загрузки данных как в рамках одного сервера, так и между различными серверами и инстансами."}),(0,s.jsx)("li",{children:"BCP относительно прост в использовании, но требует понимания работы SQL Server и требований безопасности окружения."}),(0,s.jsx)("li",{children:"Также BCP может использоваться не только для загрузки и выгрузки, но и для подготовки данных и к последующей обработке, как это было сделано с помощью временных таблиц и операции MERGE."})]}),(0,s.jsx)(a.xv,{p:!0,children:"Основные недостатки:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"Оторванность от логики приложения на уровне платформы и конфигурации."}),(0,s.jsx)("li",{children:"Новое звено в цепочке передачи данных, а именно файл с выгрузкой данных."})]}),(0,s.jsx)(a.xv,{p:!0,children:"Задачи выгрузки данных из базы 1С сторонними инструментами встречаются не так часто и обычно носят разовый характер, но бывают и исключения."}),(0,s.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Обновление ФИАС во множестве баз"}),(0,s.jsx)(a.xv,{p:!0,children:"Еще один нетривиальный пример - это обновление ФИАС в большом количестве баз. Все знают, что полностью этот классификатор занимает большой объем данных в базе, а его обновление иногда может занимать достаточно много времени. Если у Вас таких баз много и актуальность классификатора адресов важна, то можно прибегнуть к актуализации его таблиц средствами SQL Server."}),(0,s.jsx)(a.xv,{p:!0,children:"Обновлять ФИАС в базах 1С необходимо штатными средствами! Это лишь пример и он не является заменой стандартного функционала БСП. Подходит он только для особых случаев."}),(0,s.jsx)(a.xv,{p:!0,children:"И так, у нас есть десятки баз, в которых используется подсистема БСП “Адресный классификатор”. Обычно весь классификатор хранится в нескольких регистрах сведений, который частично меняется от одной версии БСП к другой. Например, структура регистров может быть следующая."}),(0,s.jsxs)(t.b,{"aria-label":"Структура таблицы 1С",children:[(0,s.jsxs)(l.J,{children:[(0,s.jsx)(o.j,{children:"Метаданные"},"Metadata"),(0,s.jsx)(o.j,{children:"Таблица SQL"},"TableSQL")]}),(0,s.jsxs)(c.y,{children:[(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.АдресныеОбъекты"}),(0,s.jsx)(d.X,{children:"_InfoRg4627"})]},"1"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ДомаЗданияСтроения"}),(0,s.jsx)(d.X,{children:"_InfoRg4648"})]},"2"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ДополнительныеАдресныеСведения"}),(0,s.jsx)(d.X,{children:"_InfoRg4653"})]},"3"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ЗагруженныеВерсииАдресныхСведений"}),(0,s.jsx)(d.X,{children:"_InfoRg4662"})]},"4"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ИсторияАдресныхОбъектов"}),(0,s.jsx)(d.X,{children:"_InfoRg4683"})]},"5"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ОриентирыАдресныхОбъектов"}),(0,s.jsx)(d.X,{children:"_InfoRg4707"})]},"6"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.ПричиныИзмененияАдресныхСведений"}),(0,s.jsx)(d.X,{children:"_InfoRg4714"})]},"7"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.СлужебныеАдресныеСведения"}),(0,s.jsx)(d.X,{children:"_InfoRg4735"})]},"8"),(0,s.jsxs)(i.g,{children:[(0,s.jsx)(d.X,{children:"РегистрСведений.УровниСокращенийАдресныхСведений"}),(0,s.jsx)(d.X,{children:"_InfoRg4740"})]},"9")]})]}),(0,s.jsx)(a.xv,{p:!0,children:"В случае, если версия БСП или, на крайний случай, подсистемы “Адресный классификатор” между базами одинаковая, то у нас есть возможность обновить его средствами SQL Server. Точнее, в одной базе мы обновляем его стандартными средствами БСП, а в другие базы уже переносим хардкорным способом."}),(0,s.jsx)(a.xv,{p:!0,children:"Делается это следующим образом:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"Из базы, где уже обновили классификатор средствами БСП, выгружаем все перечисленные выше таблицы с помощью BCP."}),(0,s.jsxs)("li",{children:["Далее для каждой базы, в которой устаревший классификатор:",(0,s.jsxs)(a.aV,{children:[(0,s.jsx)("li",{children:"Очищаем существующие таблицы (DELETE для надежности, или TRUNCATE TABLE для быстрых и безбашенных разработчиков)"}),(0,s.jsx)("li",{children:"Загружаем данные в каждую таблицу с помощью BCP."})]})]})]}),(0,s.jsx)(a.xv,{p:!0,children:".к. версии БСП / подсистемы “Адресный классификатор” в базах одинаковые, то и структура регистров сведений тоже будет одинаковая. В этом случае загрузка данных должна выполниться корректно. Вот так будут выглядеть команды выгрузки и загрузки."}),(0,s.jsx)(a.xv,{p:!0,children:"Внимание, впереди хардкод и хардкор одновременно! Это только для примера. В идеале можно вынести алгоритм выгрузки таблицы в хранимую процедуру и вызывать ее, но тогда это усложнит пример."}),(0,s.jsx)(m.Z,{code:"\nDECLARE \n	@uploadPath nvarchar(max) = 'D:\\SQLExchange\\',\n	@sqlServerInstance nvarchar(max) = 'localhost',\n	@sqlLoginName nvarchar(max) = '<Логин>',\n	@sqlLoginPassword nvarchar(max) = '<Пароль>',\n	@cmd varchar(8000);\n\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4627 out ' + @uploadPath + '_InfoRg4627.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4648 out ' + @uploadPath + '_InfoRg4648.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4653 out ' + @uploadPath + '_InfoRg4653.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4662 out ' + @uploadPath + '_InfoRg4662.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4683 out ' + @uploadPath + '_InfoRg4683.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4707 out ' + @uploadPath + '_InfoRg4707.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4714 out ' + @uploadPath + '_InfoRg4714.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4735 out ' + @uploadPath + '_InfoRg4735.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl].[dbo]._InfoRg4740 out ' + @uploadPath + '_InfoRg4740.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\n                ",className:"my-5",language:"sql"}),(0,s.jsxs)(a.xv,{p:!0,children:["Главное, уловить суть ",":)"]}),(0,s.jsx)(a.xv,{p:!0,children:"Когда выгрузка готова, можно загружать данные уже в другую базу."}),(0,s.jsx)(a.xv,{p:!0,children:"Почти ничего нового по сравнению с предыдущим кодом. Ключевое слово “OUT” заменили на “IN”, а также поменяли имя базы приемника загрузки - вместо “bsl” указали “bsl_other”. Ну и, конечно же, добавили очистку данных от существующих записей. Все остальное оказалось без изменений."}),(0,s.jsx)(m.Z,{code:"\nDECLARE \n	@uploadPath nvarchar(max) = 'D:SQLExchange',\n	@sqlServerInstance nvarchar(max) = 'localhost',\n	@sqlLoginName nvarchar(max) = '<Логин>',\n	@sqlLoginPassword nvarchar(max) = '<Пароль>',\n	@cmd varchar(8000);\n\n-- Устанавливаем контекст базы, куда должны загрузиться\n-- данные\nUSE [bsl_other];\n\n-- Предварительно очищаем таблицы от всех данных\nTRUNCATE TABLE [dbo].[_InfoRg4627];\nTRUNCATE TABLE [dbo].[_InfoRg4648];\nTRUNCATE TABLE [dbo].[_InfoRg4653];\nTRUNCATE TABLE [dbo].[_InfoRg4662];\nTRUNCATE TABLE [dbo].[_InfoRg4683];\nTRUNCATE TABLE [dbo].[_InfoRg4707];\nTRUNCATE TABLE [dbo].[_InfoRg4714];\nTRUNCATE TABLE [dbo].[_InfoRg4735];\nTRUNCATE TABLE [dbo].[_InfoRg4740];\n\n-- И выполняем загрузку из ранее созданных файлов выгрузки\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4627] IN ' + @uploadPath + '_InfoRg4627.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4648] IN ' + @uploadPath + '_InfoRg4648.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4653] IN ' + @uploadPath + '_InfoRg4653.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4662] IN ' + @uploadPath + '_InfoRg4662.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4683] IN ' + @uploadPath + '_InfoRg4683.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4707] IN ' + @uploadPath + '_InfoRg4707.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4714] IN ' + @uploadPath + '_InfoRg4714.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4735] IN ' + @uploadPath + '_InfoRg4735.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\nSET @cmd = 'bcp [bsl_other].[dbo].[_InfoRg4740] IN ' + @uploadPath + '_InfoRg4740.dat -T -c -U' + @sqlLoginName + ' -P' + @sqlLoginPassword + ' -S' + @sqlServerInstance;\nEXEC master..xp_cmdshell @cmd, no_output\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"Таким образом, выложив файлы выгрузки в общую папку и запустив подобный скрипт для всех баз, где нужно обновить адресный классификатор, мы актуализируем информацию в таблицах и решим поставленную задачу."}),(0,s.jsx)(a.xv,{p:!0,children:"Пример чем-то похож на предыдущий, где мы передавали замеры времени ключевых операций. Но здесь мы делали выгрузку всех данных таблицы без указания запросов. Сам по себе этот пример проще."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Выгрузка данных во внешнюю базу"}),(0,s.jsx)(a.xv,{p:!0,children:"Самой распространенной задачей, где в мире “1С” можно встретить BULK-операции, является выгрузка данных во внешнее хранилище. Цели могут быть разные: создание отдельной базы для отчетов; выгрузка информации для стороннего приложения (интеграция); просто архивирование данных и многое другое."}),(0,s.jsx)(a.xv,{p:!0,children:"Чаще всего при разработке в такой ситуации используют либо старый добрый ADODB, либо штатные внешние источники данных. Рассмотрим небольшие примеры для обоих вариантов."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"ADO наше все"}),(0,s.jsx)(a.xv,{p:!0,children:"Об ADO и его использовании написано очень много. Он позволяет выполнять работу с другими источниками данных и поддерживает самых разных поставщиков - SQL Server, PostgreSQL, Excel, Access и многое другое. Сейчас продемонстрируем простой прием выгрузки данных средствами 1С и последующую загрузку в таблицу выражением BULK INSERT через ADO. Для выгрузки будем использовать регистр сведений “Замеры времени”, как это делали выше с помощью утилиты BCP. И так, по порядку."}),(0,s.jsx)(m.Z,{code:'\nКаталогВыгрузки = "F:\\SQLExchange\\";\nФайлВыгрузкиЗамеров = КаталогВыгрузки + "PerformanceMeasurements.csv";\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Этап №1: Формируем файл CSV"}),(0,s.jsx)(a.xv,{p:!0,children:"В выгрузке данных в файл CSV нет ничего особенного. Просто выполняем запрос и последовательно записывает данные в файл через класс “ЗаписьТекста”, разбивая значениями точкой с запятой. Порция для выгрузки всего 1000 записей."}),(0,s.jsx)(m.Z,{code:'\nЗапрос = Новый Запрос;\nЗапрос.Текст =\n	"ВЫБРАТЬ ПЕРВЫЕ 1000\n	|	ЗамерыВремени.КлючеваяОперация КАК KeyOperation,\n	|	ЗамерыВремени.ДатаНачалаЗамера КАК BeginDate,\n	|	ЗамерыВремени.НомерСеанса КАК SessionID,\n	|	ЗамерыВремени.ДатаЗаписиНачалоЧаса КАК PeriodHour,\n	|	ЗамерыВремени.ВремяВыполнения КАК Duration,\n	|	ЗамерыВремени.Пользователь КАК UserName\n	|ИЗ\n	|	РегистрСведений.ЗамерыВремени КАК ЗамерыВремени";\nРезультатЗапроса = Запрос.Выполнить();\nВыборка = РезультатЗапроса.Выбрать();\n\nЗаписьТекста = Новый ЗаписьТекста(ФайлВыгрузкиЗамеров, КодировкаТекста.ANSI);\n\nПока Выборка.Следующий() Цикл\n	\n	ИдентификаторSQL = КонвертироватьВИдентификаторSQL(Выборка.KeyOperation.УникальныйИдентификатор());\n	ЗаписьТекста.Записать(ИдентификаторSQL);\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(XMLСтрока(Выборка.BeginDate));\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(XMLСтрока(Выборка.SessionID));\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(Формат(Выборка.PeriodHour, "ДФ=\'yyyy-MM-dd hh:mm:ss.000\'"));\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(XMLСтрока(Выборка.Duration));\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(Выборка.UserName);\n	ЗаписьТекста.Записать(";");\n	ЗаписьТекста.Записать(Символы.ПС);\n	\nКонецЦикла;\n\nЗаписьТекста.Закрыть();\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"По завершению выгрузки имеем сформированный файл, который можно загрузить с помощью BULK INSERT."}),(0,s.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-03/bulk-operations-faster-then-insert/3. Содержимое файла выгрузки для BULK INSERT.png",alt:"Содержимое файла выгрузки для BULK INSERT",size:x.h2.MEDIUM}),(0,s.jsx)(a.xv,{p:!0,children:"Для того, чтобы выгружать уникальные идентификаторы ссылочных типов в том же виде, в котором они хранятся на стороне SQL Server, используется такая функция."}),(0,s.jsx)(m.Z,{code:'\nФункция КонвертироватьВИдентификаторSQL(УникальныйИдентификатор) Экспорт\n	\n	ИдентификаторСтрокой = Строка(УникальныйИдентификатор);\n	ЧастиИдентификатора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторСтрокой, "-", Истина);\n	\n	МассивЧастейИдентификатора = Новый Массив;\n	МассивЧастейИдентификатора.Добавить("0x");\n	МассивЧастейИдентификатора.Добавить(ВРег(ЧастиИдентификатора[3]));\n	МассивЧастейИдентификатора.Добавить(ВРег(ЧастиИдентификатора[4]));\n	МассивЧастейИдентификатора.Добавить(ВРег(ЧастиИдентификатора[2]));\n	МассивЧастейИдентификатора.Добавить(ВРег(ЧастиИдентификатора[1]));\n	МассивЧастейИдентификатора.Добавить(ВРег(ЧастиИдентификатора[0]));\n	\n	Возврат СтрСоединить(МассивЧастейИдентификатора);\n	\nКонецФункции\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"Далее необходимо загрузить данные файла в таблицу."}),(0,s.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Этап №2: Загружаем данные через BULK INSERT"}),(0,s.jsx)(a.xv,{p:!0,children:"Для загрузки используется скрипт примерно такого содержания:"}),(0,s.jsx)(m.Z,{code:"\n-- Указываем таблицу приемника загрузки\nBULK INSERT [dbo].[PerformanceMeasurements]\n-- Путь к файлу с загружаемыми данными (В нашем случае CSV)\nFROM '<путь к файлу с данными>'\nWITH (FIRSTROW = 1, -- с какой строки начинается загрузка\n	  MAXERRORS = 0, -- количество допустимых ошибок\n	  CODEPAGE = '1251', -- кодировка файла с данными\n	  FIELDTERMINATOR = ';') -- разделитель значений в строках\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"Ранее мы уже загружали данные замеров с помощью утилиты BCP, но если мы попытаемся сделать то же самое с помощью скрипта выше, то получим ошибку преобразования данных для столбца “KeyOperaiton”. Все дело в том, что инструкция BULK INSERT не умеет загружать двоичные данные, а идентификатор ключевой операции как-раз хранятся с таким типом на стороне базы данных."}),(0,s.jsx)(a.xv,{p:!0,children:"Чтобы пример все же был рабочим, я просто взял и изменил тип колонки с “varbinary(16)” на “varchar(34)”. В этом случае загрузка происходит без проблем. Таким образом, сразу можно зафиксировать, что инструкция BULK INSERT не всегда может подойти для загрузки, особенно в контексте платформы 1С, где ссылки и некоторые другие поля хранятся в виде “varbinary”. Но для выгрузки данных во внешнюю базу этот подход может оказаться самым эффективным."}),(0,s.jsx)(a.xv,{p:!0,children:"Обратите внимание, что с помощью параметра “CODEPAGE” можно явно указать кодировку файла с данными. Это может быть важно, если в нем есть текстовые данные."}),(0,s.jsx)(a.xv,{p:!0,children:"Вот так выглядит код загрузки данных из CSV в таблицу базы с помощью BULK INSERT:"}),(0,s.jsx)(m.Z,{code:'\nСтрокаСоединения = "driver={SQL Server};Persist Security Info=False;"\n	+ "User ID=<Логин>;Password=<Пароль>;"\n	+ "Initial Catalog=<БазаДанных>;Server=<ИмяИнстансаСУБД>";\n\nConnection = Новый COMОбъект("ADODB.Connection");\nConnection.ConnectionTimeOut = 0;\nConnection.CommandTimeOut = 0;\nConnection.CursorLocation = 3;\nConnection.ConnectionString = СокрЛП(СтрокаСоединения);\nConnection.IsolationLevel = 1048576;\nConnection.Open();\n\nТекстКоманды = "\n	|BULK INSERT [dbo].[PerformanceMeasurements]\n	|FROM \'" + ФайлВыгрузкиЗамеров + "\'\n	|WITH (FIRSTROW = 1,\n	|	  CODEPAGE = \'1251\',\n	|	  FIELDTERMINATOR = \';\'); 	\n	|";\n\nCommand = Новый COMОбъект("ADODB.Command");\nCommand.CommandTimeout = 100;\nCommand.ActiveConnection = Connection;\nCommand.CommandText = ТекстКоманды;\nCommand.Execute();\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"После этого в таблице “[dbo].[PerformanceMeasurements]” появятся записи, которые мы ранее выгрузили в CSV. Остался последний шаг - удалить выгруженные записи из исходной базы."}),(0,s.jsx)(a.xv,{subtitle:!0,className:"mt-10 md:text",children:"Этап №3: Удаляем выгруженные данные из базы 1С"}),(0,s.jsx)(a.xv,{p:!0,children:"Для удаления уже выгруженных данных достаточно заново обойти выборку запроса и записать пустые наборы данных в разрезе измерений выгруженных записей."}),(0,s.jsx)(m.Z,{code:"\nВыборка.Сбросить();\nПока Выборка.Следующий() Цикл\n	\n	Набор = РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей();\n	Набор.Отбор.КлючеваяОперация.Установить(Выборка.KeyOperation);\n	Набор.Отбор.ДатаНачалаЗамера.Установить(Выборка.BeginDate);\n	Набор.Отбор.НомерСеанса.Установить(Выборка.SessionID);\n	Набор.Отбор.ДатаЗаписиНачалоЧаса.Установить(Выборка.PeriodHour);\n	Набор.Записать();\n	\nКонецЦикла;\n                ",className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"Дело сделано, замеры времени теперь во внешней базе!"}),(0,s.jsx)(a.xv,{p:!0,children:"Теперь вы знаете как выгружать из базы 1С CSV-файлы с последующей их загрузкой во внешнюю базу с помощью BULK INSERT. Также мы ознакомились с некоторыми ограничениями этой инструкции."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Внешние источники данных и боль"}),(0,s.jsx)(a.xv,{p:!0,children:"С некоторых пор считается, что использовать внешние источники данных - это путь истинного разработчика 1С, а ADO уже устарел и никому не нужен. Раз такое дело, то сделаем пример с использованием этого механизма платформы. Заодно прочувствуем некоторую боль от его использования."}),(0,s.jsx)(a.xv,{p:!0,children:"Выгрузку сделаем как и в прошлом примере в файл CSV."}),(0,s.jsx)(m.Z,{code:'\n                // Выгрузка аналогична предыдущему примеру!!!\n\n                Запрос = Новый Запрос;\n                Запрос.Текст =\n                    "ВЫБРАТЬ ПЕРВЫЕ 1000\n                    |	ЗамерыВремени.КлючеваяОперация КАК KeyOperation,\n                    |	ЗамерыВремени.ДатаНачалаЗамера КАК BeginDate,\n                    |	ЗамерыВремени.НомерСеанса КАК SessionID,\n                    |	ЗамерыВремени.ДатаЗаписиНачалоЧаса КАК PeriodHour,\n                    |	ЗамерыВремени.ВремяВыполнения КАК Duration,\n                    |	ЗамерыВремени.Пользователь КАК UserName\n                    |ИЗ\n                    |	РегистрСведений.ЗамерыВремени КАК ЗамерыВремени";\n                РезультатЗапроса = Запрос.Выполнить();\n                Выборка = РезультатЗапроса.Выбрать();\n                \n                ЗаписьТекста = Новый ЗаписьТекста(ФайлВыгрузкиЗамеров, КодировкаТекста.ANSI);\n                \n                Пока Выборка.Следующий() Цикл\n                    \n                    ИдентификаторSQL = КонвертироватьВИдентификаторSQL(Выборка.KeyOperation.УникальныйИдентификатор());\n                    ЗаписьТекста.Записать(ИдентификаторSQL);\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(XMLСтрока(Выборка.BeginDate));\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(XMLСтрока(Выборка.SessionID));\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(Формат(Выборка.PeriodHour, "ДФ=\'yyyy-MM-dd hh:mm:ss.000\'"));\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(XMLСтрока(Выборка.Duration));\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(Выборка.UserName);\n                    ЗаписьТекста.Записать(";");\n                    ЗаписьТекста.Записать(Символы.ПС);\n                    \n                КонецЦикла;\n                \n                ЗаписьТекста.Закрыть();\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"Загрузку же сделаем через вызов хранимой процедуры на стороне внешней базы. Вот “внутренности” этой процедуры:"}),(0,s.jsx)(m.Z,{code:"\nCREATE PROCEDURE LoadPerformanceMeasurement\n	@FileCSV nvarchar(max),\n	@Success int = null OUTPUT\nAS\nBEGIN\n	DECLARE @cmd nvarchar(max) =\n	'BULK INSERT [dbo].[PerformanceMeasurements] '\n	+ 'FROM ''' + @FileCSV + ''''\n	+ 'WITH (FIRSTROW = 1,'\n	+ '	  MAXERRORS = 0,'\n	+ '	  CODEPAGE = ''1251'','\n	+ '	  FIELDTERMINATOR = '';'')';\n	\n	BEGIN TRY\n	 EXEC sp_executesql @cmd;\n	 SET @Success = 1;\n	END TRY\n	BEGIN CATCH\n	 SET @Success = 0;	\n	END CATCH\nEND\nGO\n                ",className:"my-5",language:"sql"}),(0,s.jsx)(a.xv,{p:!0,children:"В процедуре формируется конструкция BULK INSERT по переданному параметру пути к файлу данных CSV. Далее выполняется попытка выполнения команды. Если все прошло без ошибок, то в переменную @Success устанавливается значение 1. Если были ошибки, то устанавливается значение 0. Параметр @Success является выходным (ключевое слово OUTPUT), то есть процедура предоставляет значение параметра вызывающему коду. Теперь перейдем непосредственно к внешнему источнику данных. В конфигурации добавили в источник данных новую хранимую процедуру."}),(0,s.jsx)(a.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-03/bulk-operations-faster-then-insert/4. Функция внешнего источника данных.png",alt:"Функция внешнего источника данных",size:x.h2.MEDIUM}),(0,s.jsx)(a.xv,{p:!0,children:"Для вызова используем следующий код."}),(0,s.jsx)(m.Z,{code:'\nВнешниеИсточникиДанных.ПримерРаботыСВнешнимИсточникомДанных\n	.LoadPerformanceMeasurement("D:\\SQLExchange\\PerformanceMeasurements.csv");\n                ',className:"my-5",language:"bsl"}),(0,s.jsx)(a.xv,{p:!0,children:"Это даже работает! Вроде все в порядке, в чем же проблема? Все дело в том, что внешние источники данных налагают некоторые ограничения на работу с базой данных. Например:"}),(0,s.jsxs)(a.aV,{type:x.RH.number,children:[(0,s.jsx)("li",{children:"Нельзя использовать Внешние источники данных?выходные параметры с ключевым словом OUTPUT. Выше в процедуре мы сделали такой параметр, через внешний источник мы его не сможем использовать! Давным-давно вопрос по этому поводу поднимался на ИС, вот тут. Судя по количеству ответов, проблема так и не решена нормальным образом."}),(0,s.jsx)("li",{children:"Нет возможности получить результат из хранимой процедуры. Речь идет не только о параметрах OUTPUT, но и о возвращаемых наборах данных. Если хранимая процедура возвращает 1 или более наборов данных, то мы просто не сможем их прочитать."}),(0,s.jsx)("li",{children:"Не все типы параметров можно использовать при вызове хранимых процедур и функций."}),(0,s.jsx)("li",{children:"Нет возможности создавать полностью кастомные SQL-скрипты во внешнем источнике данных со сложной логикой. Все равно придется обернуть их или в хранимую процедуру, или отказаться в пользу других решений."})]}),(0,s.jsx)(a.xv,{p:!0,children:"Это не совсем относится к теме статьи, поэтому подробнее останавливаться не буду. Рекомендую для работы с базой данных использовать ADO, в том числе и при работе с BULK-операциями, т.к. избавитесь от множества ограничений при разработке и других проблем эксплуатации. А если внешнюю базу данных дорабатывает профессиональный разработчик, то ADO для Вас единственный вариант. Попробуйте убедить разработчика не использовать параметры вывода (OUTPUT)."}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Восстановление отдельной таблицы на тестовом стенде"}),(0,s.jsx)(a.xv,{p:!0,children:"Часто экспериментируете с данными на тестовой базе? Запустили обработку, но уже поняли, что допустили ошибку? Хотите восстановить бэкап базы и попробовать заново? Стойте!"}),(0,s.jsx)(a.xv,{p:!0,children:"Есть способ, который сэкономит Вам много времени! Достаточно сделать бэкап всей таблицы или ее части с помощью BCP в файл. Если что-то пойдет не так, то Вам достаточно восстановить эти данные, а остальную базу не трогать. Согласитесь, это же намного быстрее!"}),(0,s.jsxs)(a.xv,{p:!0,children:["Подробнее останавливаться на этом кейсе не будем, т.к. команды выгрузки и загрузки будут аналогичными первому примеру. Если нужны примеры работы с BCP, то ",(0,s.jsx)("b",{children:(0,s.jsx)("u",{children:(0,s.jsx)(a.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-BCP",children:"добро пожаловать"})})}),"."]}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"А как же PostgreSQL"}),(0,s.jsx)(a.xv,{p:!0,children:"PG хорошая СУБД, которая также имеет инструменты для быстрой работы с массивами данных. Аналогично SQL Server, основными рекомендациями к ускорению операции вставки данных будут:"}),(0,s.jsxs)(a.aV,{children:[(0,s.jsx)("li",{children:"Отключение индексов на время загрузки"}),(0,s.jsx)("li",{children:"Отключение ограничений также на время операции"}),(0,s.jsx)("li",{children:"Использование COPY, которая в какой-то мере является аналогом инструкции “BULK INSERT” в SQL Server."})]}),(0,s.jsxs)(a.xv,{p:!0,children:[(0,s.jsx)("b",{children:(0,s.jsx)("u",{children:(0,s.jsx)(a.e9,{newTab:!0,href:"https://www.enterprisedb.com/blog/7-best-practice-tips-postgresql-bulk-data-loading",children:"Вот тут отличное руководство"})})})," по ускорению вставки данных и некоторым другим оптимизациям."]}),(0,s.jsx)(a.xv,{title:!0,className:"mt-10 md:text",children:"Удачи!"}),(0,s.jsx)(a.xv,{p:!0,children:"Мы рассмотрели несколько примеров применения BULK-операций, используя как BULK INSERT для вставки данных, так и операцию MERGE для обновления уже существующих данных. В контексте SQL Server для этих целей используется утилита BCP, которая выгружает данные в свой собственный формат и имеет обширные возможности по настройке выгрузки, форматирования и оптимизации. Также с помощью BCP можно выполнять загрузку. Кроме этого SQL Server поддерживает оператор BULK INSERT в SQL-скриптах, что также было продемонстрировано."}),(0,s.jsx)(a.xv,{p:!0,children:"Касательно PostgreSQL стоит отметить, что подобные возможности у него также присутствуют в виде инструкции COPY, которая позволяет выполнять выгрузку и загрузку данных и имеет большое количество параметров."}),(0,s.jsx)(a.xv,{p:!0,children:"Публикация не является подробной инструкцией и не содержит всеобъемлющей информации. Главная цель была создать обзор и показать основы, а дальше уже только мануалы, мануалы, мануалы."}),(0,s.jsx)(a.xv,{p:!0,children:"Не нашли для себя применения BULK-операций? Значит, время еще не пришло и возможности платформы Вас полностью устраивают. И это хорошо."}),(0,s.jsx)(a.xv,{p:!0,children:"На практике, особенно в “кровавом энтерпрайзе”, возникают задачи, которые решить стандартными средствами уже не получается. Для оптимизации массовой модификации данных есть даже сторонние решения корпоративного уровня, которые позволяют оптимизировать множественные операции INSERT, которые генерирует платформа, в единую операцию BULK INSERT. Не буду заниматься рекламой, скажу лишь что решения эти очень эффективные и не дешевые (не для малого бизнеса точно)."}),(0,s.jsx)(a.xv,{p:!0,children:"Спасибо, что дочитали до конца! :)"})]})},7855:function(n,e,r){"use strict";var s,a;r.d(e,{b:function(){return s}}),(a=s||(s={})).Min="350px",a.Standard="700px",a.Large="1000x",a.Unlimited=""},4313:function(n,e,r){"use strict";var s=r(7340),a=r(5893),t=r(7294),l=r(4965),o=r(1240),c=r(1686),i=r(7855);function d(){let n=(0,s._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return d=function(){return n},n}function m(){let n=(0,s._)(["\n        max-height: ","\n    "]);return m=function(){return n},n}e.Z=n=>{let{code:e,className:s,language:x,maxHeight:h=i.b.Standard}=n;(void 0!==r.g?r.g:window).Prism=l.p1,r(1354),r(9016),r(5266),r(2927),r(1315),r(7874),r(6862);let p=null!=h?h:i.b.Standard,u=c.ZP.pre(d()),E=(0,c.ZP)(u)(m(),p);return(0,a.jsx)("div",{className:(0,o.GF)("bg-blue-500 md:p-1 p-2",s),children:(0,a.jsx)("div",{className:"shadow-lg",children:(0,a.jsx)(l.y$,{theme:l.np.vsDark,code:e.trim(),language:null!=x?x:x="tsx",children:n=>{let{className:e,style:r,tokens:s,getLineProps:l,getTokenProps:o}=n;return(0,a.jsx)(E,{className:e,style:r,children:s.map((n,e)=>(0,t.createElement)("div",{...l({line:n,key:e}),key:Math.random()},n.map((n,e)=>(0,t.createElement)("span",{...o({token:n,key:e}),key:Math.random()}))))})}})})})}},4853:function(n,e,r){"use strict";r.d(e,{Ee:function(){return o},Xg:function(){return t},Y7:function(){return m},aV:function(){return i},e9:function(){return d},o_:function(){return x},ty:function(){return c},xv:function(){return l}});var s=r(5152),a=r.n(s);let t=a()(()=>Promise.all([r.e(9686),r.e(4838),r.e(4738),r.e(1664),r.e(8765)]).then(r.bind(r,8765)),{loadableGenerated:{webpack:()=>[8765]}}),l=a()(()=>Promise.all([r.e(9511),r.e(935)]).then(r.bind(r,935)),{loadableGenerated:{webpack:()=>[935]}}),o=a()(()=>Promise.all([r.e(328),r.e(7651)]).then(r.bind(r,7651)),{loadableGenerated:{webpack:()=>[7651]}}),c=a()(()=>Promise.all([r.e(9686),r.e(6979)]).then(r.bind(r,6979)),{loadableGenerated:{webpack:()=>[6979]}}),i=a()(()=>Promise.all([r.e(4159),r.e(7355)]).then(r.bind(r,7355)),{loadableGenerated:{webpack:()=>[7355]}}),d=a()(()=>Promise.all([r.e(1664),r.e(3220)]).then(r.bind(r,3220)),{loadableGenerated:{webpack:()=>[3220]}});a()(()=>r.e(3140).then(r.bind(r,3140)),{loadableGenerated:{webpack:()=>[3140]}});let m=a()(()=>Promise.all([r.e(2004),r.e(736)]).then(r.bind(r,736)),{loadableGenerated:{webpack:()=>[736]}}),x=a()(()=>Promise.all([r.e(8331),r.e(9996),r.e(2660),r.e(9718),r.e(5826),r.e(9606)]).then(r.bind(r,9606)),{loadableGenerated:{webpack:()=>[9606]}})}},function(n){n.O(0,[6443,8331,9996,2726,5187,2888,9774,179],function(){return n(n.s=6232)}),_N_E=n.O()}]);