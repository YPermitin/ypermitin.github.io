(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4217],{1466:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c",function(){return s(9655)}])},9655:function(e,n,s){"use strict";s.r(n);var l=s(5893),d=s(9305);s(7294);var i=s(850),c=s(7105);n.default=()=>(0,l.jsxs)(d.Xg,{blogcentered:!0,children:[(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Ну, Вы знаете"}),(0,l.jsx)(d.xv,{p:!0,children:"Не сомневаюсь, что Вы знаете о назначении индексов и уже использовали их в повседневной работе. Разбираетесь в какой-то мере в принципе их работы, на уровне, достаточном для оптимизации запросов и создания оптимальной структуры базы данных. Прочитали множество материала по этой теме. В общем, говорите с ними на “ты”."}),(0,l.jsx)(d.xv,{p:!0,children:"Или, возможно, нет? Вероятно, что за потоком проблем из области разработки и решения прикладных задач эта тема просто выпала из Вашего поля зрения. Приоритеты могут быть таковы, что нужно помочь закрыть месяц, сдать отчётность, исправить ошибки в отчетах, починить обмены, сходить в отпуск в конце концов! Список можно бесконечно продолжать. И это абсолютно нормально!"}),(0,l.jsx)(d.xv,{p:!0,children:"Тема индексов относится больше к теме администрирования базы данных и поддержания стабильности и производительности ее работы. В обычном представлении, разработчик 1С не имеет к их созданию и поддержке прямого отношения. В идеальном мире эта задача ложится на плечи администратора базы данных, но его не часто встретишь в штате. Скорее всего этим занят сисадмин, по крайней мере так многие считают. А у него своих проблем хватает, поэтому он просто копипастом настраивает обслуживание и забывает про 1С."}),(0,l.jsx)(d.xv,{p:!0,children:"Когда совсем приспичит, разработчики 1С начинают добавлять индексы через настройки метаданных в конфигураторе. И Вам очень повезет, если индекс будет создан корректно, т.к. часто используется инновационный метод “тыка” при их настройке."}),(0,l.jsx)(d.xv,{p:!0,children:"Все это к тому, что часто эта тема проходит мимо разработчиков и администраторов. В проблемах разбираются быстро, принимая “странные” решения и советуя их другим. После этого устоявшиеся подходы становятся “правильными” и “неоспоримыми”."}),(0,l.jsx)(d.xv,{p:!0,children:"Сегодня мы рассмотрим несколько самых распространённых заблуждений об индексах в контексте 1С, рожденных такими устоявшимися подходами, а также постараемся их объяснить и развеять."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Почему это важно"}),(0,l.jsx)(d.xv,{p:!0,children:"Ты! Да, ты! Ты разработчик 1С, который в ответе за эффективность работы написанных запросов и всей информационной системы, которую ты обслуживаешь. Сколько угодно можно “клеймить” администраторов, разработчиков платформы 1С и просто жизнь, что база “тормозит”, а твой код идеален. Но реальность такова, что чаще всего ты чуть ли не единственный человек, который в силах исправить ситуацию с производительностью, ведь администраторы не в контексте работы БД или не ведают “магию” индексов. А руководство вообще не в курсе дела и считает ответственным именно тебя, 1Сника!"}),(0,l.jsx)(d.xv,{p:!0,children:"Придется стать героем! Изучить работу СУБД, в частности индексов, и встать на светлую сторону! Жизнь информационной базы в твоих руках! Расширь горизонты познания!"}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"От простого к невероятному"}),(0,l.jsx)(d.xv,{p:!0,children:"Немного пафосно было сказано, но и правда кто, если не мы?! Вся эта ситуация и создает множество заблуждений про индексы, а в последствии и ошибки при работе с ними. Давайте по порядку рассмотрим самые распространенные из них, передвигаясь от простого к сложному."}),(0,l.jsx)(d.xv,{p:!0,children:"Изучение работы индексов, если Вы с ними еще не сталкивались, можно начать с помощью материалов, ссылки на которые добавлены в конце публикации. Сейчас же принципы их работы и что это вообще такое мы рассматривать не будем, тема другая."}),(0,l.jsx)(d.xv,{p:!0,children:"И так, поехали!"}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Индексы не нужны"}),(0,l.jsx)(d.xv,{p:!0,children:"Часто приходилось слышать, что об индексах в базе можно не заботиться, т.к. это специфичная тема и мы так уже 15 лет живем. То есть проблем никогда не было, так зачем об этом беспокоиться? Да, у нас система жутко тормозит в периоды закрытия месяца и формирования тяжелых отчетов, но это же 1С! Просто нужно смириться или купить сервер получше. Да и вообще, нет времени с этим копаться."}),(0,l.jsx)(d.xv,{p:!0,children:"Слышал такое настолько часто, что удивляюсь до сих пор. Самое обидное, что все аргументы проходят всегда мимо и не воспринимаются всерьез. Вот он, дух 1С! То что явно не сказано в инструкциях к платформе и не проверяется на сдаче экзамена “1С:Специалист по платформе”, то не должно удостаиваться внимания. К счастью, такое не везде, но удручающе часто. Даже в больших компаниях."}),(0,l.jsx)(d.xv,{p:!0,children:"Но индексы конечно же нужны! Это одно из самых эффективных средств повышения скорости поиска данных в базе. Без них большинство запросов выполнялось бы неприемлемое количество времени. Чем больше база, тем больше было бы это время. Если бы индексы были не нужны совсем, то, думаю, разработчики платформы не добавляли штатные кластерные индексы на большинство таблиц, не было бы настроек индексирования в объектах метаданных и многого другого. Нужно ли еще что-то говорить по этому поводу."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Индексы - это сложно"}),(0,l.jsxs)(d.xv,{p:!0,children:["Даже если индексы и нужны, то тема эта настолько сложная, что и браться за нее не стоит! Да, это еще один миф, который довольно часто встречается на просторах разработчиков 1С и системных администраторов. И это тоже заблуждение, т.к. достаточно один раз изучить основы работы и все встанет на свои места. В большинстве случаев, индекс представляет собой некоторый эффективно организованный указатель на значения, с помощью которого поиск осуществляется значительно быстрее по сравнению с полным перебором записей в таблице. Описывать подробно принцип работы индексов здесь смысла нет, да и вся информация находится в официальной документации и в Google ",":)","."]}),(0,l.jsx)(d.xv,{p:!0,children:"Вы навсегда поймете, что индексы - это просто. Когда знаешь - все становится просто. Знание - сила!"}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"СУБД создает индексы автоматически"}),(0,l.jsx)(d.xv,{p:!0,children:"Помню не одну беседу, когда мне пытались доказать, что СУБД, в т.ч. Microsoft SQL Server, создает все необходимые индексы автоматически и полностью самостоятельно на основе собранной статистики. То есть если мы много много много раз выполним какой-либо запрос и SQL Server поймет, что для его эффективной работы нужен индекс, то она создаст его!"}),(0,l.jsx)(d.xv,{p:!0,children:"Это, конечно же, полностью не так! Создание, изменение и удаление индексов - это обязанность разработчика баз данных или администратора БД. Автоматически СУБД ничего не создает и не удаляет, и это очень хорошо. Вы только представьте ситуацию, когда SQL Server решит создать индекс автоматически во время рабочего дня, породив блокировку данных. Или автоматически создаст пару индексов и полностью займет свободное дисковое пространство, ведь индексы имеют накладные затраты в виде занимаемого места на диске и времени на их поддержание."}),(0,l.jsx)(d.xv,{p:!0,children:"Но от части это все же правда. Но не в плане, что СУБД создает индексы автоматически, а в том, что она может подсказать каких индексов сейчас не хватает."}),(0,l.jsx)(i.Z,{code:"\n-- Список отсутствующих индексов по результатам собранной статистики SQL Server.\n-- Не стоит перезапускать службу SQL Server каждую ночь, иначе полезной статистики Вы не соберете, \n-- не говоря уже об остальных недостатках такого подхода.\nSELECT \n	@@ServerName AS ServerName, -- Имя сервера\n	DB_NAME() AS DBName, -- Имя базы\n	t.name AS 'Affected_table',	-- Имя таблицы\n	(LEN(ISNULL(ddmid.equality_columns, N'')\n              + CASE WHEN ddmid.equality_columns IS NOT NULL\n    AND ddmid.inequality_columns IS NOT NULL THEN ','\n                     ELSE ''\n                END) - LEN(REPLACE(ISNULL(ddmid.equality_columns, N'')\n                                   + CASE WHEN ddmid.equality_columns\n                                                             IS NOT NULL\n    AND ddmid.inequality_columns\n                                                             IS NOT NULL\n                                          THEN ','\n                                          ELSE ''\n                                     END, ',', '')) ) + 1 AS K, -- Количество ключей в индексе\n  COALESCE(ddmid.equality_columns, '')\n        + CASE WHEN ddmid.equality_columns IS NOT NULL\n    AND ddmid.inequality_columns IS NOT NULL THEN ','\n               ELSE ''\n          END + COALESCE(ddmid.inequality_columns, '') AS Keys, -- Ключевые столбцы индекса\n  COALESCE(ddmid.included_columns, '') AS [include], -- Неключевые столбцы индекса\n  'Create NonClustered Index IX_' + t.name + '_missing_'\n        + CAST(ddmid.index_handle AS VARCHAR(20)) \n        + ' On ' + ddmid.[statement] COLLATE database_default\n        + ' (' + ISNULL(ddmid.equality_columns, '')\n        + CASE WHEN ddmid.equality_columns IS NOT NULL\n    AND ddmid.inequality_columns IS NOT NULL THEN ','\n               ELSE ''\n          END + ISNULL(ddmid.inequality_columns, '') + ')'\n        + ISNULL(' Include (' + ddmid.included_columns + ');', ';')\n                                                  AS sql_statement, -- Команда для создания индекса\n  ddmigs.user_seeks, -- Количество операций поиска\n  ddmigs.user_scans, -- Количество операций сканирования\n  CAST(( ddmigs.user_seeks + ddmigs.user_scans)\n        * ddmigs.avg_user_impact AS BIGINT) AS 'est_impact', \n  avg_user_impact, -- Средний процент выигрыша\n  ddmigs.last_user_seek, -- Последняя операция поиска\n  ( SELECT DATEDIFF(Second, create_date, GETDATE()) Seconds\n  FROM sys.databases\n  WHERE     name = 'tempdb'\n        ) SecondsUptime\nFROM sys.dm_db_missing_index_groups ddmig\n  INNER JOIN sys.dm_db_missing_index_group_stats ddmigs\n  ON ddmigs.group_handle = ddmig.index_group_handle\n  INNER JOIN sys.dm_db_missing_index_details ddmid\n  ON ddmig.index_handle = ddmid.index_handle\n  INNER JOIN sys.tables t ON ddmid.OBJECT_ID = t.OBJECT_ID\nWHERE   ddmid.database_id = DB_ID()\nORDER BY est_impact DESC;\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(i.Z,{code:"\n-- Отсутствующие индексы PostgreSQL\n-- Для PostgreSQL также можно посмотреть отсутствующие индексы, но информация не такая точная и полная как для SQL Server.\n-- Для анализа недостающих индексов в этом случае стоит собирать информацию о тяжелых запросах и планах их выполнения, \n-- чтобы по результатам изменить структуру БД.\nSELECT\n  relname,\n  seq_scan - idx_scan AS too_much_seq,\n  CASE\n    WHEN\n      seq_scan - coalesce(idx_scan, 0) > 0\n    THEN\n      'Missing Index?'\n    ELSE\n      'OK'\n  END,\n  pg_relation_size(relname::regclass) AS rel_size, seq_scan, idx_scan\nFROM\n  pg_stat_all_tables\nWHERE\n  schemaname = 'public'\n  AND pg_relation_size(relname::regclass) > 80000\nORDER BY\n  too_much_seq DESC;\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"Не стоит уповать на СУБД в части создания индексов в автоматическом режиме. Все же думать над этим придется, а SQL Server / PostgreSQL / др. СУБД дадут эффективные инструменты анализа недостающих индексов и средства их создания и поддержки."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Платформа 1С создает все индексы сама"}),(0,l.jsx)(d.xv,{p:!0,children:"Как Вы уже поняли, СУБД не создает индексы автоматически, адаптируясь под выполняемые запросы. НО! Значит платформа 1С сама создает недостающие индексы для оптимизации производительности!"}),(0,l.jsxs)(d.xv,{p:!0,children:["На самом деле, конечно же, нет. Услышав такое, можно очень удивиться и пойти пить крепкий чай. Но столкнуться с таким до сих пор можно. Тут, на самом деле, возможно, появляется путаница, ведь платформа все же создает индексы в зависимости от типа объекта метаданных и его настроек. Это действительно так и по этой ссылке Вы можете изучить ",(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:(0,l.jsx)(d.e9,{newTab:!0,href:"https://its.1c.ru/db/metod8dev/content/1590/hdoc",children:"все возможные платформенные индексы."})})})]}),(0,l.jsx)(d.xv,{p:!0,children:"В остальных же случаях разработчику приходится самостоятельно настраивать индексирование полей, чтобы добиться нужного результата. К сожалению, искусственный интеллект в платформу еще не завезли."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Чем больше индексов, тем лучше"}),(0,l.jsx)(d.xv,{p:!0,children:"Для быстрого поиска нужен индекс. Так почему же не добавить индекс на каждое поле. Например, есть справочник “Номенклатура” в конфигурации “Управление торговлей” ред. 11. В нем имеется несколько индексов, большинство из которых создается платформой 1С без каких-либо особых настроек. Есть и индексы, созданные специально для тех реквизитов, в которых свойство “Индексировать” установлено в “Индексировать” (извините за тавтологию, но такие уж названия):"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"Артикул"}),(0,l.jsx)("li",{children:"Вид номенклатуры"}),(0,l.jsx)("li",{children:"Код для поиска"})]}),(0,l.jsx)(d.xv,{p:!0,children:"Но что, если нужно выполнить поиск по реквизиту “Код ОКВЭД” или “Код ОКП”? Или любому другому полю? Почему бы не добавить индексы на каждое поле?"}),(0,l.jsx)(d.xv,{p:!0,children:"Да, тут сразу можно понять, что что-то не так и добавление индексов на все поля таблицы дело не самое правильное. Как уже говорилось выше, индексы имеют свои накладные расходы для обслуживания. Кроме дополнительного дискового пространства, для их поддержки СУБД тратит дополнительное время при выполнении операций модификации данных. Когда Вы изменяете запись в таблице, СУБД обновляет данные индекса, что требует дополнительного времени и ресурсов. Чем больше индексов на таблице, тем больше времени на поддержку индекса тратится. Это время может быть незначительным относительно общего времени выполнения операции записи, но чем больше индексов, тем сильнее это время будет увеличиваться."}),(0,l.jsx)(d.xv,{p:!0,children:"С помощью простого запроса можно проанализировать список индексов, на поддержание которых СУБД тратит значительные ресурсы в части операций ввода / вывода."}),(0,l.jsx)(i.Z,{code:"\n-- Индексы с высокими издержками для SQL Server\n-- Не обязательно, что найденные индексы нужно удалять или изменять. Иногда такие индексы могут быть нормой.\n-- Но задуматься все же стоит. Возможно, есть необходимость переписать запросы \n-- и оптимизировать структуру используемых индексов или даже таблиц.\nSELECT TOP 1\n    [Maintenance cost]  = (user_updates + system_updates)\n       , [Retrieval usage] = (user_seeks + user_scans + user_lookups)\n       , DatabaseName = DB_NAME()\n       , TableName = OBJECT_NAME(s.[object_id])\n       , IndexName = i.name\nINTO #TempMaintenanceCost\nFROM sys.dm_db_index_usage_stats s\n    INNER JOIN sys.indexes i ON  s.[object_id] = i.[object_id]\n        AND s.index_id = i.index_id\nWHERE s.database_id = DB_ID()\n    AND OBJECTPROPERTY(s.[object_id], 'IsMsShipped') = 0\n    AND (user_updates + system_updates) > 0 -- Only report on active rows.\n    AND s.[object_id] = -999\n-- Dummy value to get table structure.\n;\n\n-- Loop around all the databases on the server.\nEXEC sp_MSForEachDB    'USE [?];\n-- Table already exists.\nINSERT INTO #TempMaintenanceCost\nSELECT TOP 10\n       [Maintenance cost]  = (user_updates + system_updates)\n       ,[Retrieval usage] = (user_seeks + user_scans + user_lookups)\n       ,DatabaseName = DB_NAME()\n       ,TableName = OBJECT_NAME(s.[object_id])\n       ,IndexName = i.name\nFROM   sys.dm_db_index_usage_stats s\nINNER JOIN sys.indexes i ON  s.[object_id] = i.[object_id]\n   AND s.index_id = i.index_id\nWHERE s.database_id = DB_ID()\n   AND i.name IS NOT NULL    -- Ignore HEAP indexes.\n   AND OBJECTPROPERTY(s.[object_id], ''IsMsShipped'') = 0\n   AND (user_updates + system_updates) > 0 -- Only report on active rows.\nORDER BY [Maintenance cost]  DESC\n;\n'\n-- Select records.\nSELECT TOP 10\n    *\nFROM #TempMaintenanceCost\nORDER BY [Maintenance cost]  DESC\n-- Tidy up.\nDROP TABLE #TempMaintenanceCost\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"К сожалению, такого простого запроса для PostgreSQL нет. Там требуется другой подход."}),(0,l.jsx)(d.xv,{p:!0,children:"Плюс ко всему, неизвестно какие индексы для всех полей добавлять, ведь они могут быть составными, покрывающими, а еще для использования индексов значение отбора должно быть селективным. Какой смысл искать в индексе по полю “Пометка удаления” со значением Ложь, если 99% записей в таблице не помечены на удаление? Индекс не будет использоваться, т.к. смысла искать по неселективному значению нет."}),(0,l.jsx)(d.xv,{p:!0,children:"Таким образом, смысла создавать индексы для всех полей просто нет, да и для большого числа полей тоже. При создании индекса нужно точно знать для каких целей он создается, иначе он будет висеть мертвым грузом и просто “съедать” ресурсы сервера. Если уж и стоит задача поиска по всем возможным полям, то скорее всего нужен другой подход в виде полнотекстового поиска и т.д."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Главное, чтобы поле входило в индекс"}),(0,l.jsx)(d.xv,{p:!0,children:"Перейдем к более практическим кейсам. Еще одним частым “фейлом” можно считать ситуацию, когда разработчики считают, что для эффективной работы индекса главное наличие в нем нужно поля. Например, в типовой конфигурации “Управление торговлей” ред. 11 имеется регистр сведений “Календарные графики” со следующей структурой."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/0. Объект календарного графика.png",alt:"Объект календарного графика",size:c.h2.SMALL}),(0,l.jsx)(d.xv,{p:!0,children:"У регистра один единственный кластерный индекс."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/1. Информация об объекте.png",alt:"Объект календарного графика",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Например, нам понадобилось узнать для определенной даты включена ли она в график. Делаем простейший запрос."}),(0,l.jsx)(i.Z,{code:"\nВЫБРАТЬ\n	КалендарныеГрафики.Календарь КАК Календарь,\n	КалендарныеГрафики.Год КАК Год,\n	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,\n	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик,\n	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода\nИЗ\n	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики\nГДЕ\n	КалендарныеГрафики.ДатаГрафика = &ДатаГрафика\n                ",className:"my-5",language:"bsl"}),(0,l.jsx)(d.xv,{p:!0,children:"В качестве параметров передаем конкретную дату (например, “01.11.2017 0:00:00”). Вроде бы хороший запрос и это поле есть в индексе (см. изображение выше). Но на самом деле, запрос этот написан не самым оптимальным образом, а существующий индекс в запросе практически не используется. Посмотрите, что происходит на стороне СУБД."}),(0,l.jsx)(d.xv,{p:!0,children:"Вот такой запрос формирует платформа 1С."}),(0,l.jsx)(i.Z,{code:"\nexec sp_executesql N'\nSELECT\n    T1._Fld32138RRef, -- Календарь\n    T1._Fld32139, -- Год\n    T1._Fld32140, -- Дата графика\n    T1._Fld32141, -- День включен в график\n    T1._Fld32142 -- Количество дней в графике с начала года\nFROM dbo._InfoRg32137 T1\nWHERE ((T1._Fld1551 = @P1)) -- Фильтр по разделителю данных\n    AND ((T1._Fld32140 = @P2)) -- Фильтр по дате графика\n',N'@P1 numeric(10),@P2 datetime2(3)',0,'4017-11-01 00:00:00'\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"А вот и план запроса."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/2. Часть плана запроса.png",alt:"Часть плана запроса",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"План запроса вроде бы не плохой, но есть несколько НО:"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"Прочитано строк всего 24107, а это общее количество записей в самом регистре."}),(0,l.jsx)("li",{children:"Возвращено всего 9 записей в качестве результата."}),(0,l.jsx)("li",{children:"Для выполнения запроса потребовалось выполнить 143 логических операций чтения."})]}),(0,l.jsx)(d.xv,{p:!0,children:"Итого: для получения 9 записей пришлось просканировать всю таблицу. Значит индекс не использовался."}),(0,l.jsx)(d.xv,{p:!0,children:"По этой информации видно, что индекс не использовался от слова совсем. Но как же так? Индекс же содержит поле “Дата графика”, почему бы его не использовать? И да, такие вопросы до сих пор приходится слышать. Узнав ответ, обычно начинают либо отрицать такое поведение, ибо уже по этой логике написали много запросов (да здравствует тех. долг!). Либо начинают возмущаться, что SQL Server не работает корректно и почему Microsoft не создала нормальный механизм индексирования."}),(0,l.jsx)(d.xv,{p:!0,children:"Ответ, конечно же, простой - потому что индекс так не работает. Чтобы его использование стало возможным, необходимо накладывать условия в соответствии со структурой индекса, а именно в соответствии с порядком полей индекса. Да, можно не делать отбор по всем полям из состава индекса, но накладывать фильтр нужно от первого поля и так далее по порядку. Иначе его эффективное использование невозможно. Выше были даны ссылки на материалы по работе индексов, изучив их вопросов почему так это работает не останется."}),(0,l.jsx)(d.xv,{p:!0,children:"Исправим запрос и установим фильтры на все поля, входящие в индекс."}),(0,l.jsx)(i.Z,{code:"\nВЫБРАТЬ\n	КалендарныеГрафики.Календарь КАК Календарь,\n	КалендарныеГрафики.Год КАК Год,\n	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,\n	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик,\n	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода\nИЗ\n	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики\nГДЕ\n	КалендарныеГрафики.ДатаГрафика = &ДатаГрафика\n	И КалендарныеГрафики.Год = &Год\n	И КалендарныеГрафики.Календарь = &Календарь\n                ",className:"my-5",language:"bsl"}),(0,l.jsx)(d.xv,{p:!0,children:"В этот раз мы установили фильтры на дату графика (01.11.2017 0:00:00), год (2017) И график (Рабочий календарь - пятидневка). Выполним запрос."}),(0,l.jsx)(i.Z,{code:"\nexec sp_executesql N'\nSELECT\n    T1._Fld32138RRef, -- Календарь\n    T1._Fld32139, -- Год\n    T1._Fld32140, -- Дата графика\n    T1._Fld32141, -- День включен в график\n    T1._Fld32142 -- Количество дней в графике с начала года\nFROM dbo._InfoRg32137 T1\nWHERE ((T1._Fld1551 = @P1))  -- Фильтр по разделителю данных\n    AND ((T1._Fld32140 = @P2) -- Фильтр по дате графика\n    AND (T1._Fld32139 = @P3) -- Фильтр по году\n    AND (T1._Fld32138RRef = @P4)) -- Фильр по календарю\n',N'@P1 numeric(10),@P2 datetime2(3),@P3 numeric(10),@P4 varbinary(16)',0,'4017-11-01 00:00:00',2017,0xB4360015E92F280211DF720F9C556D39\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"План запроса также изменился."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/3. Часть плана запроса - 2.png",alt:"Часть плана запроса",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"План запроса стал значительно лучше:"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"Количество прочитанных строк стало равняться всего лишь 1!"}),(0,l.jsx)("li",{children:"Количество строк в результате запроса также равно 1, т.к. мы поставили отбор по графику. В прошлый раз было возвращено 9 записей, по одной на каждый график."}),(0,l.jsx)("li",{children:"Количество логических чтений теперь равно 2."})]}),(0,l.jsx)(d.xv,{p:!0,children:"Запрос стал работать за счет индекса во много раз эффективнее."}),(0,l.jsx)(d.xv,{p:!0,children:"Итого: структура индекса состоит из полей, по которым будет выполняться поиск, но их порядок в не менее важен, чем их наличие."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Платформа 1С позволяет создавать произвольные составные индексы"}),(0,l.jsxs)(d.xv,{p:!0,children:["Еще одна забавная путаница связана с составными индексами. Вот есть у Вас справочник “Номенклатура” и для какой-то задачи понадобилось делать поиск номенклатуры по трем полям: “Качество”, “Марка”, “Складская группа”. Не важно зачем, есть задача и все ",":)"]}),(0,l.jsx)(d.xv,{p:!0,children:"Что в первую очередь делает разработчик? Вариант, что с индексами ничего не делает - рассматривать не будем. Правильно - устанавливает свойство “Индексирование” у реквизитов в “Индексировать”. Установил у всех реквизитов, обновил информационную базу и радуется. А на самом деле среди множества индексов на каждое поле был добавлен собственный индекс."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/4. Нет составного индекса.png",alt:"Нет составного индекса",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"То есть составного индекса с полями “Качество”, “Марка” и “Складская группа” платформа 1С не создала. На самом деле это нормально, т.к. настройки индексирования такого сейчас не позволяют. Тем более как платформа по этим настройкам может определить порядок полей в индексе, а без этого делать их настройку бессмысленно."}),(0,l.jsx)(d.xv,{p:!0,children:"Любопытные разработчики могли пойти дальше и поставить индексирование с доп. упорядочиванием. Но это не изменит проблему - составного индекса с нужными полями создано не будет. Но мы получим монструозные индексы, которые платформа создает при включенном доп. упорядочивании, которые могут решить только задачу создания покрывающего индекса, но не как не эффективного при поиске данных."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/5. Индексирование с доп. упорядочиванием.png",alt:"Индексирование с доп. упорядочиванием",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Все это поведение описано в официальной документации и ничего удивительного здесь нет. Но все ли ее читают?"}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"В регистрах всегда есть индекс по измерениям"}),(0,l.jsx)(d.xv,{p:!0,children:"По этому поводу где-то даже была ветка на Инфостарт или Мисте, где разработчики спорили так, аж “сопли из замочной скважины летели”. Рассмотрим пример. Есть в УТ 11 регистр накопления “Товары на складах”. Думаю, что многие с ним знакомы. Так вот, в некоторых ситуациях необходимо делать запрос к основной физической таблице регистра, не используя виртуальную таблицу остатков. Зачем и когда это нужно сейчас обсуждать не будем, просто продолжим. Вот структура этого регистра."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/6. Объект метаданных.png",alt:"Объект метаданных",size:c.h2.XS}),(0,l.jsx)(d.xv,{p:!0,children:"Как часто пишут в мануалах, отбор в регистре нужно делать в том порядке по измерениям, как они размещены в структуре метаданных регистра. То есть, если нужно получить информацию по конкретному складу в таблице остатков, то обязательно нужно установить фильтр по номенклатуре, характеристике, назначению и непосредственно складу. Объясняется это тем, что порядок полей в основном индексе регистра определяется порядком в объекте метаданных. А как мы уже Выше смотрели, порядок полей в индексе очень важен."}),(0,l.jsx)(d.xv,{p:!0,children:"Так вот, очень часто разработчики считают, что в таблице движений регистра всегда есть индекс по измерениям. В нашем случае он должен идеально подойти для выполнения фильтрации по номенклатуре. То есть, если нам нужно получить все записи движений по номенклатуре, то нужно сделать вот так."}),(0,l.jsx)(i.Z,{code:"\nВЫБРАТЬ\n	ТоварыНаСкладах.Период КАК Период,\n	ТоварыНаСкладах.ВидДвижения КАК ВидДвижения,\n	ТоварыНаСкладах.Номенклатура КАК Номенклатура,\n	ТоварыНаСкладах.Характеристика КАК Характеристика,\n	ТоварыНаСкладах.Назначение КАК Назначение,\n	ТоварыНаСкладах.Склад КАК Склад,\n	ТоварыНаСкладах.Помещение КАК Помещение,\n	ТоварыНаСкладах.Серия КАК Серия,\n	ТоварыНаСкладах.ВНаличии КАК ВНаличии,\n	ТоварыНаСкладах.КОтгрузке КАК КОтгрузке\nИЗ\n	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах\nГДЕ\n	ТоварыНаСкладах.Номенклатура = &Номенклатура\n\nУПОРЯДОЧИТЬ ПО\n	Период\n                ",className:"my-5",language:"bsl"}),(0,l.jsx)(d.xv,{p:!0,children:"Так как измерение “Номенклатура” первое в предполагаемом индексе по измерениям, то все должно работать отлично. Но, вот так сюрприз! На стороне СУБД с нами не согласны."}),(0,l.jsx)(i.Z,{code:"\n-- Вот такой запрос выполнила платформа.\nexec sp_executesql N'\nSELECT\n    T1._Period,\n    T1._RecordKind,\n    T1._Fld38239RRef,\n    T1._Fld38240RRef,\n    T1._Fld38241RRef,\n    T1._Fld38242RRef,\n    T1._Fld38243RRef,\n    T1._Fld38244RRef,\n    T1._Fld38245,\n    T1._Fld38246\nFROM dbo._AccumRg38238 T1\nWHERE ((T1._Fld1551 = @P1)) -- Фильтр по разделителю\n    AND ((T1._Fld38239RRef = @P2)) -- Фильтр по номенклатуре\nORDER BY (T1._Period)',N'@P1 numeric(10),@P2 varbinary(16)',0,0x848A00112F43529A11D955BCDEE6E19A\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"А план у него “шикарный”."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/7. Часть плана запроса - 3.png",alt:"Часть плана запроса",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Что мы видим:"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"Количество прочитанных строк = 1101."}),(0,l.jsx)("li",{children:"Запрос в качестве результата вернул всего 10 строк."})]}),(0,l.jsx)(d.xv,{p:!0,children:"Основная таблица регистра содержит 1101 запись, то есть фактически было выполнено полное сканирование кластерного индекса таблицы. Индекс просто не использовался! Но почему?"}),(0,l.jsx)(d.xv,{p:!0,children:"Да, индекс по измерениям в основной таблице регистра не использовался. Почему? Да потому что там нет такого индекса по измерениям, которого мы так ждали. Основная таблица регистра накопления по умолчанию содержит такие индексы:"}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/8. Штатные индексы.png",alt:"Штатные индексы",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Нет ни одного подходящего, который бы позволил эффективно отобрать записи по первому измерению, то есть по номенклатуре. Для исправления ситуации Вы можете включить индексирование для первого измерения и получите вот такой индекс."}),(0,l.jsx)(d.xv,{p:!0,children:"Идем в конфигуратор и включаем индексирование для отдельного измерения регистра."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/8. Настройка в самой 1С.png",alt:"Штатные индексы",size:c.h2.SMALL}),(0,l.jsx)(d.xv,{p:!0,children:"А после обновления информационной базы получаем то что ожидали."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/9. Доп информация.png",alt:"Доп информация",size:c.h2.SMALL}),(0,l.jsx)(d.xv,{p:!0,children:"Профит!"}),(0,l.jsx)(d.xv,{p:!0,children:"Теперь ситуация на стороне СУБД будет иной."}),(0,l.jsx)(i.Z,{code:"\n-- Тот же запрос.\nexec sp_executesql N'\nSELECT\n    T1._Period,\n    T1._RecordKind,\n    T1._Fld38239RRef,\n    T1._Fld38240RRef,\n    T1._Fld38241RRef,\n    T1._Fld38242RRef,\n    T1._Fld38243RRef,\n    T1._Fld38244RRef,\n    T1._Fld38245,\n    T1._Fld38246\nFROM dbo._AccumRg38238 T1\nWHERE ((T1._Fld1551 = @P1)) -- Фильтр по разделителю\n    AND ((T1._Fld38239RRef = @P2)) -- Фильтр по номенклатуре\nORDER BY (T1._Period)',N'@P1 numeric(10),@P2 varbinary(16)',0,0x848A00112F43529A11D955BCDEE6E19A\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"И совсем другой план."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/10. На стороне СУБД после добавления индекса.png",alt:"На стороне СУБД после добавления индекса",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Количество фактически прочитанных строк теперь равно 10, то есть полного сканирования таблицы теперь нет. Все работает быстро и эффективно, не смотря на появление Lookup’ов в плане, но это другая история."}),(0,l.jsx)(d.xv,{p:!0,children:"Но как же так, где же изначально был индекс? На самом деле индекс по измерениям есть, но он находится в таблице итогов регистра. Именно поэтому существуют рекомендации от фирмы “1С” выполнять получение данных из регистра с помощью виртуальным таблиц. Вот какой есть индекс в таблице итогов регистра, где хранятся данные по остаткам."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/11. Индекс по итогам регистра.png",alt:"Индекс по итогам регистра",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Но и тут есть нюанс - первым измерением идет период. Без указания периода индекс также работал бы неэффективно, то есть вообще бы не использовался."}),(0,l.jsx)(d.xv,{p:!0,children:"Но, конечно, не все так однозначно. Бывают ситуации, когда нужны индекс по измерениям уже есть. Например, регистр сведений “Цены номенклатуры”, в котором есть множество индексов на основной таблице. Три основных из них создались платформой 1С изначально, т.к. они есть для всех регистров подобного вида (основной кластерный индекс по периоду, индекс по регистратору и индекс по измерениям)."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/12. Штатные индексы регистра сведений.png",alt:"Штатные индексы регистра сведений",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Как мы видим, есть индекс по измерениям у регистра сведений подходящий для запросов, где ставился бы отбор по первому измерению. Ситуация еще может быть изменена тем, что разработчики поставили флаг “Ведущее” у измерения регистра в настройках метаданных."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/13. Настройка поля.png",alt:"Настройка поля",size:c.h2.SMALL}),(0,l.jsx)(d.xv,{p:!0,children:"При такой настройке платформа создает индекс по измерению как дополнительный. В регистре “Цены номенклатуры” в УТ 11 для всех измерений установлена эта настройка, поэтому платформа была очень щедрой на создание индексов для этих измерений."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/14. Индексы для ведущих измерений.png",alt:"Индексы для ведущих измерений",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Будут ли два индекса, у которых первое поле “Номенклатура” избыточными? Стоило ли создавать индекс для измерения “Номенклатура”, если оно уже было в другом индексе? Сложный вопрос, ведь конечная структура индексов все же отличается. Нужно смотреть по ситуации."}),(0,l.jsxs)(d.xv,{p:!0,children:["Что же можно сказать в итоге? Не всегда одной только логикой и предположениями можно понять, какие все-таки индексы создает платформа 1С. Как говорится: “доверяй, но проверяй”. Если есть хоть малейшие сомнения в том, создала ли платформа необходимый для наших запросов индекс - вперед смотреть что творится на стороне базы данных. Анализировать можно с помощью стандартных средств платформы, вызывая метод “ПолучитьСтруктуруХраненияБазыДанных” или использовать более удобные инструменты. Например, отчет ",(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:(0,l.jsx)(d.e9,{newTab:!0,href:"https://github.com/YPermitin/YPermitin.YellowCollection/tree/main/%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80%D0%98%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B%D0%91%D0%B0%D0%B7%D1%8B%D0%94%D0%B0%D0%BD%D0%BD%D1%8B%D1%85",children:"Просмотр и анализ структуры базы данных (отчет на СКД)"})})}),", с помощью которого и были сделаны изображения и другой материал по структуре индексов в этой публикации."]}),(0,l.jsx)(d.xv,{p:!0,children:"Оставьте стереотипы позади и проверяйте работу платформы, ведь с каждой новой версией поведение может измениться."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Во все временные таблицы нужно добавлять индекс"}),(0,l.jsx)(d.xv,{p:!0,children:"При подготовке к экзамену 1С:Специалист по платформе очень часто можно услышать, что при создании временных таблиц обязательно нужно задавать для них индекс. Да и не только для экзамена, просто такая информация не редко проскальзывает в сообществе. Да, да, тот самый индекс в запросе. Например, помещая табличную часть документа во временную таблицу, добавляя для него индекс и в дальнейшем используя для соединения с другими таблицами (виртуальные таблицы регистров и др.)."}),(0,l.jsx)(d.xv,{p:!0,children:"Вот простой пример использования временной таблицы для помещения в нее данных текущего документа “Приобретение товаров и услуг”, а после использование ее для получения текущих остатков на складе."}),(0,l.jsx)(i.Z,{code:"\nВЫБРАТЬ\n	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,\n	ПриобретениеТоваровУслугТовары.Характеристика КАК Характеристика,\n	ПриобретениеТоваровУслугТовары.Назначение КАК Назначение,\n	ПриобретениеТоваровУслугТовары.Склад КАК Склад,\n	ПриобретениеТоваровУслугТовары.Количество КАК Количество\nПОМЕСТИТЬ ВТ_Товары\nИЗ\n	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары\nГДЕ\n	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка\n\nИНДЕКСИРОВАТЬ ПО\n	Номенклатура,\n	Характеристика,\n	Назначение,\n	Склад\n;\n\n////////////////////////////////////////////////////////////////////////////////\nВЫБРАТЬ\n	ВТ_Товары.Номенклатура КАК Номенклатура,\n	ВТ_Товары.Характеристика КАК Характеристика,\n	ВТ_Товары.Назначение КАК Назначение,\n	ВТ_Товары.Склад КАК Склад,\n	ВТ_Товары.Количество КАК Количество,\n	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток\nИЗ\n	ВТ_Товары КАК ВТ_Товары\n		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(\n				,\n				(Номенклатура, Характеристика, Назначение, Склад)\n				В\n				(Выбрать Т.Номенклатура, Т.Характеристика, Т.Назначение, Т.Склад ИЗ ВТ_Товары КАК Т)) КАК ТоварыНаСкладахОстатки\n		ПО (ВТ_Товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура)\n			И (ВТ_Товары.Характеристика = ТоварыНаСкладахОстатки.Характеристика)\n			И (ВТ_Товары.Назначение = ТоварыНаСкладахОстатки.Назначение)\n			И (ВТ_Товары.Склад = ТоварыНаСкладахОстатки.Склад)\n                ",className:"my-5",language:"bsl"}),(0,l.jsx)(d.xv,{p:!0,children:"Что-то подобное можно встретить и в задачах по оперативному учету экзамена 1С:Специалист по платформе, или даже в готовых типовых / отраслевых решениях."}),(0,l.jsx)(d.xv,{p:!0,children:"Тут же в запросе во временную таблицу добавляется индекс по основным полям, чтобы эффективнее работал поиск, но это мы сейчас проверим."}),(0,l.jsx)(d.xv,{p:!0,children:"Но давайте посмотрим, как индекс во временной таблице влияет на производительность. Первым делом проанализируем как платформа выполняет запрос выше."}),(0,l.jsx)(d.xv,{p:!0,children:"Если исключить различные запросы, связанные с проверкой конфигурации платформы 1С, СУБД и др., то получим 6 шагов выполнения запроса из примера выше."}),(0,l.jsx)(i.Z,{code:"\n-- 1. Проверка наличия временной таблицы\nSELECT 1 WHERE OBJECT_ID('tempdb..#tt52') IS NOT NULL\n\n-- 2. Создание временной таблицы\nCREATE TABLE #tt52 (\n    _Q_000_F_000RRef BINARY(16), \n    _Q_000_F_001RRef BINARY(16), \n    _Q_000_F_002RRef BINARY(16), \n    _Q_000_F_003RRef BINARY(16), \n    _Q_000_F_004 NUMERIC(15, 3))\n\n-- 3. Создание индекса для временной таблицы\nCREATE CLUSTERED INDEX idx52 ON #tt52 (_Q_000_F_000RRef, _Q_000_F_001RRef, _Q_000_F_002RRef, _Q_000_F_003RRef)\n\n-- 4. Заполняем временную таблицу данными из табличной части документа\nexec sp_executesql N'\nINSERT INTO #tt52 WITH(TABLOCK) (_Q_000_F_000RRef, _Q_000_F_001RRef, _Q_000_F_002RRef, _Q_000_F_003RRef, _Q_000_F_004) \nSELECT\n    T1._Fld24363RRef,\n    T1._Fld24365RRef,\n    T1._Fld24393RRef,\n    T1._Fld24381RRef,\n    T1._Fld24368\nFROM dbo._Document732_VT24361 T1\nWHERE ((T1._Fld1551 = @P1)) AND ((T1._Document732_IDRRef = @P2))\n',N'@P1 numeric(10),@P2 varbinary(16)',0,0x92F10050568B35AC11E4F89380448A25\n\n-- 5. Выполняем запрос, использующий временную таблицу (2 запрос в пакете)\nexec sp_executesql N'\nSELECT\n    T1._Q_000_F_000RRef,\n    T1._Q_000_F_001RRef,\n    T1._Q_000_F_002RRef,\n    T1._Q_000_F_003RRef,\n    T1._Q_000_F_004,\n    ISNULL(CAST(T2.Fld38245Balance_ AS NUMERIC(27, 3)),0.0)\nFROM #tt52 T1 WITH(NOLOCK)\n    LEFT OUTER JOIN (\n        SELECT\n            T3._Fld38242RRef AS Fld38242RRef,\n            T3._Fld38241RRef AS Fld38241RRef,\n            T3._Fld38239RRef AS Fld38239RRef,\n            T3._Fld38240RRef AS Fld38240RRef,\n            CAST(SUM(T3._Fld38245) AS NUMERIC(27, 3)) AS Fld38245Balance_\n        FROM dbo._AccumRgT38248 T3\n        WHERE ((T3._Fld1551 = @P1)) AND (T3._Period = @P2 \n        AND (EXISTS(\n            SELECT\n                1\n            FROM #tt52 T4 WITH(NOLOCK)\n            WHERE (T3._Fld38239RRef = T4._Q_000_F_000RRef) \n                AND (T3._Fld38240RRef = T4._Q_000_F_001RRef) \n                AND (T3._Fld38241RRef = T4._Q_000_F_002RRef) \n                AND (T3._Fld38242RRef = T4._Q_000_F_003RRef))) \n                AND (T3._Fld38245 <> @P3) AND (T3._Fld38245 <> @P4))\n            GROUP BY \n                T3._Fld38242RRef,\n                T3._Fld38241RRef,\n                T3._Fld38239RRef,\n                T3._Fld38240RRef\n            HAVING (CAST(SUM(T3._Fld38245) AS NUMERIC(27, 3))) <> 0.0) T2\n    ON ((((T1._Q_000_F_000RRef = T2.Fld38239RRef) \n        AND (T1._Q_000_F_001RRef = T2.Fld38240RRef)) \n        AND (T1._Q_000_F_002RRef = T2.Fld38241RRef)) \n        AND (T1._Q_000_F_003RRef = T2.Fld38242RRef))\n',N'@P1 numeric(10),@P2 datetime2(3),@P3 numeric(10),@P4 numeric(10)',0,'5999-11-01 00:00:00',0,0\n\n-- 6. Очищаем временную таблицу\nTRUNCATE TABLE #tt47\n                ",className:"my-5",language:"sql"}),(0,l.jsx)(d.xv,{p:!0,children:"Стоимость создания индекса для временной таблицы следующая:"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"96 логических чтений."}),(0,l.jsx)("li",{children:"0,001 секунда."}),(0,l.jsx)("li",{children:"1 операция записи."})]}),(0,l.jsx)(d.xv,{p:!0,children:"Вроде бы затраты на столько велики, что и обсуждать смысла нет. Но давайте посмотрим дальше. Индекс мы создавали для того, чтобы оптимизировать второй запрос из пакета, где получаем остатки из регистра к записям в табличной части (тот что в 5 пункте запроса). Обратимся к плану выполнения этого запроса."}),(0,l.jsx)(d.Ee,{className:"my-4",src:"/public/imp_assets/SQLServer/2019-11/popular-misconceptions-about-indexes-at-world-1c/15. План запроса для временной таблицы с индексом.png",alt:"План запроса для временной таблицы с индексом",size:c.h2.MEDIUM}),(0,l.jsx)(d.xv,{p:!0,children:"Обратите внимание на обращения к временной таблице. В обоих случаях (условие в параметрах временной таблицы и условия соединения) выполняется сканирование кластерного индекса, то есть фактически этот индекс не используется, он бесполезен!"}),(0,l.jsx)(d.xv,{p:!0,children:"С одной стороны, затраты на создание индекса во временной таблице небольшие, но это только в нашем примере. Если же Вы пишите “тяжелый” отчет с десятками тысяч записей во временной таблице или даже миллионами, то такой индекс тоже может помочь, но это нужно проверить, собрав план запроса. На временной таблице с большим объемом данных затраты на создание индекса будут значительно выше, поэтому если он в итоге не будет использоваться, то можно смело говорить об ошибке в написании запроса (или техническом долге, если так удобнее)."}),(0,l.jsx)(d.xv,{p:!0,children:"Как говориться: “Если не видно разницы, то зачем создавать индекс?”."}),(0,l.jsx)(d.xv,{p:!0,children:"В случае, если не создавать индекс для временной таблицы, то изменения от прошлого варианта будут такими:"}),(0,l.jsxs)(d.aV,{type:c.RH.number,children:[(0,l.jsx)("li",{children:"Операция создания индекса на временной таблице полностью отсутствует, соответственно и затрат на ее создания тоже нет."}),(0,l.jsx)("li",{children:"Так как индекса нет, то вместо сканирования индекса временной таблицы будет операция сканирования таблицы (Table Scan). Структура плана запроса практически такая же, как и раньше."})]}),(0,l.jsx)(d.xv,{p:!0,children:"В остальном все как и в прошлом примере, только бесполезного индекса нет."}),(0,l.jsx)(d.xv,{p:!0,children:"Таким образом, добавлять индексы во временную таблицу не всегда целесообразно. Да, они могут пригодиться на больших объемах данных при выполнении операций соединения и фильтрации. Но бездумно вставлять их в тех случаях, когда во временной таблице не может быть большого количества записей или сложных соединений вообще не предвидится все же неправильно. Это как преждевременная оптимизация, которая может сделать только хуже."}),(0,l.jsx)(d.xv,{p:!0,children:"Тут лишь можно посоветовать - проверять работу своих запросов, смотреть планы запроса и изучить контекст работы Вашего кода. Универсального решения нет."}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Неплатформенные индексы - зло"}),(0,l.jsxs)(d.xv,{p:!0,children:["Они лишь зло в неумелых руках. Да, они относятся к нестандартным решениям и входят в противоречие с лицензионным соглашением фирмы “1С”. Но прежде чем их отбрасывать, то ",(0,l.jsx)("b",{children:(0,l.jsx)("u",{children:(0,l.jsx)(d.e9,{newTab:!0,href:"/pages/blog/DevOps/2018-11/custom-index-for-1C.tsx",children:" рекомендую все же посмотреть этот материал"})})}),", т.к. иногда такой подход остается единственным для решения задач производительности и стабильности."]}),(0,l.jsx)(d.xv,{title:!0,className:"mt-10 md:text",children:"Все в Ваших руках"}),(0,l.jsx)(d.xv,{p:!0,children:"В рамках одной публикации не раскрыть всех нюансов работы с индексами, но и цель была другой. Надеюсь, что это будет отличным стартом для всех, кто только погружается в тему работы СУБД и индексов в частности. Кто знает, может и опытные разработчики найдут что-то новое здесь для себя."}),(0,l.jsx)(d.xv,{p:!0,children:"Краткий итог всего выше сказанного можно подвести такой:"}),(0,l.jsxs)(d.aV,{children:[(0,l.jsx)("li",{children:"Индексы в базе нужны и важны."}),(0,l.jsx)("li",{children:"Понять работу индексов просто, а вот нюансы уже сложнее и требует усилий для изучения."}),(0,l.jsx)("li",{children:"Индексы требуют пристального внимания как со стороны разработчика, так и со стороны администратора базы данных."}),(0,l.jsx)("li",{children:"При написании запросов важно понимать принцип работы индексов, чтобы эффективно их использовать."}),(0,l.jsx)("li",{children:"Платформенные индексы не всегда работают так, как предполагается. Проверяйте с помощью документации и профилирования запросов."}),(0,l.jsx)("li",{children:"Рекомендации 1С для общих ситуаций, иногда все же нужно думать в контексте задачи."}),(0,l.jsx)("li",{children:"Выходить за рамки возможностей платформы можно, но нужно четко понимать, что и для чего Вы делаете."})]}),(0,l.jsx)(d.xv,{p:!0,children:"Всем добра!"})]})},850:function(e,n,s){"use strict";s.d(n,{Z:function(){return x}});var l=s(5893),d=s(7294),i=s(4965),c=s(4275),a=s(7340);function r(){let e=(0,a._)(["\n  text-align: left;\n  overflow: hidden;\n  font-size: 14px;\n  border-radius: 6px;\n  overflow: auto;\n  max-height: 350px;\n\n  & .token-line {\n    line-height: 1.3em;\n    height: 1.3em;\n  }\n"]);return r=function(){return e},e}let t=s(964).ZP.pre(r());var x=e=>{let{code:n,className:a,language:r}=e;return(void 0!==s.g?s.g:window).Prism=i.p1,s(1354),s(9016),s(5266),s(2927),s(1315),s(7874),s(6862),(0,l.jsx)("div",{className:(0,c.GF)("bg-blue-500 md:p-5 p-2",a),children:(0,l.jsx)("div",{className:"shadow-lg",children:(0,l.jsx)(i.y$,{theme:i.np.vsDark,code:n,language:null!=r?r:r="tsx",children:e=>{let{className:n,style:s,tokens:i,getLineProps:c,getTokenProps:a}=e;return(0,l.jsx)(t,{className:n,style:s,children:i.map((e,n)=>(0,d.createElement)("div",{...c({line:e,key:n}),key:Math.random()},e.map((e,n)=>(0,d.createElement)("span",{...a({token:e,key:n}),key:Math.random()}))))})}})})})}},9305:function(e,n,s){"use strict";s.d(n,{Ee:function(){return a},Xg:function(){return i},aV:function(){return t},e9:function(){return x},o_:function(){return _},ty:function(){return r},xv:function(){return c}});var l=s(5152),d=s.n(l);let i=d()(()=>Promise.all([s.e(4838),s.e(4738),s.e(1664),s.e(7167)]).then(s.bind(s,7167)),{loadableGenerated:{webpack:()=>[7167]}}),c=d()(()=>s.e(9179).then(s.bind(s,9179)),{loadableGenerated:{webpack:()=>[9179]}}),a=d()(()=>s.e(1974).then(s.bind(s,1974)),{loadableGenerated:{webpack:()=>[1974]}}),r=d()(()=>s.e(8547).then(s.bind(s,8547)),{loadableGenerated:{webpack:()=>[8547]}}),t=d()(()=>s.e(6806).then(s.bind(s,6806)),{loadableGenerated:{webpack:()=>[6806]}}),x=d()(()=>Promise.all([s.e(1664),s.e(1465)]).then(s.bind(s,1465)),{loadableGenerated:{webpack:()=>[1465]}});d()(()=>s.e(567).then(s.bind(s,567)),{loadableGenerated:{webpack:()=>[567]}}),d()(()=>Promise.all([s.e(2004),s.e(4139)]).then(s.bind(s,4139)),{loadableGenerated:{webpack:()=>[4139]}});let _=d()(()=>Promise.all([s.e(3811),s.e(7472),s.e(584),s.e(7870)]).then(s.bind(s,7870)),{loadableGenerated:{webpack:()=>[7870]}})}},function(e){e.O(0,[1102,2888,9774,179],function(){return e(e.s=1466)}),_N_E=e.O()}]);