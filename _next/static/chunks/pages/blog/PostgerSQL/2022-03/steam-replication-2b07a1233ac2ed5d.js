(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7333],{85655:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/PostgerSQL/2022-03/steam-replication",function(){return s(96035)}])},96035:function(e,n,s){"use strict";s.r(n);var t=s(85893),r=s(44853);s(67294);var l=s(74313),a=s(29209);n.default=()=>(0,t.jsxs)(r.Xg,{blogcentered:!0,children:[(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Общая информация"}),(0,t.jsxs)(r.xv,{p:!0,children:[(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://wiki.postgresql.org/wiki/Streaming_Replication",children:"Потоковая репликация (Streaming Replication)"})})})," - это репликация, при которой от основного сервера PostgreSQL на реплики передается WAL (Write Ahead Log). И каждая реплика затем по этому журналу изменяет свои данные. Для настройки такой репликации все серверы должны быть одной версии, работать на одной ОС и архитектуре."]}),(0,t.jsx)(r.xv,{p:!0,children:"Шаги настройки:"}),(0,t.jsxs)(r.aV,{type:a.RH.number,children:[(0,t.jsx)("li",{children:"Настройка master-сервера"}),(0,t.jsx)("li",{children:"Настройка доп. сервера (slave)"}),(0,t.jsx)("li",{children:"Тестирование репликации"})]}),(0,t.jsx)(r.xv,{p:!0,children:"Все действия в инструкции выполняются на PostgreSQL 14 и Ubuntu 20.04, но в целом инструкция актуальная для предыдущих (и возможно будущих) версий. Есть некоторые отличия версия PostgreSQL до 12 версии, о них смотрите в документации."}),(0,t.jsx)(r.xv,{children:"В нашем примере у нас будут два сервера:"}),(0,t.jsxs)(r.aV,{children:[(0,t.jsx)("li",{children:"Основной (master) с адресом 192.168.233.140"}),(0,t.jsx)("li",{children:"Дополнительный (slave) с адресом 192.168.233.141"})]}),(0,t.jsx)(r.xv,{p:!0,children:"Поехали!"}),(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Настройка master-сервера"}),(0,t.jsx)(r.xv,{p:!0,children:"Первым делом открываем “postgresql.conf” и изменяем в нем параметры."}),(0,t.jsx)(l.Z,{code:"\n# Определяет как много информации записывать в WAL. \n# Со значением replica в журнал записываются данные для поддержки архивирования WAL и репликации.\n# В т.ч. для запросов только на чтение.\n# wal_level = hot_standby - для версий до 9.6\n# https://www.postgresql.org/docs/9.6/runtime-config-wal.html\nwal_level = replica\n\n# Число одновременных подключений для резервных серверов. Жалательно установить на 1 подключение\n# больше, чем фактическое количество резервных серверов, т.к. в случае неожиданного отключения\n# старое соединение будет некоторое время использоваться.\n# https://www.postgresql.org/docs/9.4/runtime-config-replication.html\nmax_wal_senders = 10\n\n# Задает минимальный размер в мегабайтах сегментов файлов журнала, хранящихся в каталоге pg_wal, на случай,\n# если резервному серверу потребуется извлечь их для потоковой репликации.\n# В ранних версиях параметр назывался wal_keep_segments и указывал количество файлов, а не их размер.\n# https://www.postgresql.org/docs/13/runtime-config-replication.html\nwal_keep_size = 1024\n\n                ",className:"my-5",language:"text"}),(0,t.jsxs)(r.xv,{p:!0,children:["Создадим пользователя ",(0,t.jsx)("b",{children:"replication"}),", чтобы через него дополнительный сервер мог подключаться к основному."]}),(0,t.jsx)(l.Z,{code:"\nsudo -u postgres psql\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(l.Z,{code:"\nCREATE ROLE replication WITH REPLICATION PASSWORD '<superpassrowd>' LOGIN;\n                ",className:"my-5",language:"sql"}),(0,t.jsx)(r.xv,{p:!0,children:"В файле pg_hba.conf разрешаем подключение этому пользователю."}),(0,t.jsx)(l.Z,{code:"\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    replication     replication     192.168.233.0/24         md5\n                ",className:"my-5",language:"text"}),(0,t.jsx)(r.xv,{p:!0,children:"И перезапускаем PostgreSQL."}),(0,t.jsx)(l.Z,{code:"\nsystemctl restart postgresql\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Настройка доп. сервера (slave)"}),(0,t.jsx)(r.xv,{p:!0,children:"Останавливаем PostgreSQL."}),(0,t.jsx)(l.Z,{code:"\nsystemctl stop postgresql\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{p:!0,children:"Очищаем всё, что внутри data_directory, т.к. мы скопируем эти файлы с основного сервера."}),(0,t.jsx)(l.Z,{code:"\nrm -Rf /var/lib/pgsql/data/*\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{p:!0,children:"Копируем текущее состояние с основного сервера на дополнительный."}),(0,t.jsx)(l.Z,{code:'\n# В предыдущих версиях параметр wal-method=stream назывался xlog-method=stream,\n# поэтому смотрите документацию для вашей версии PostgreSQL.\nsu postgres -c "pg_basebackup -h 192.168.233.140 -D /var/lib/pgsql/data -P -U replication --wal-method=stream"\n                ',className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{p:!0,children:"Далее вносим изменения в файл postgresql.conf."}),(0,t.jsx)(l.Z,{code:"\n# Создает возможность выполнять запросы в момент восстановления транзакций.\n# https://www.postgresql.org/docs/9.0/hot-standby.html\nhot_standby = on\n\n# Строка подключения к основному серверу\n# https://www.postgresql.org/docs/12/runtime-config-replication.html\nprimary_conninfo = 'user=replication password=<superpassrowd> host=192.168.233.140 port=5432 sslmode=prefer sslcompression=1 krbsrvname=postgres'\n                ",className:"my-5",language:"text"}),(0,t.jsx)(r.xv,{p:!0,children:"Чтобы репликация заработала, также в каталоге с данными (обычно где файл конфигурации сервера) нужно создать файл standby.signal."}),(0,t.jsx)(l.Z,{code:"\ntouch standby.signal\nchown postgres:postgres standby.signal\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{p:!0,children:"Теперь все готово для запуска службы!"}),(0,t.jsx)(l.Z,{code:"\nsystemctl start postgresql\n\n                ",className:"my-5",language:"bash"}),(0,t.jsx)(r.xv,{p:!0,children:"Профит!"}),(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Тестирование репликации"}),(0,t.jsx)(r.xv,{p:!0,children:"Создадим на основном сервере базу AmazingReplication, а в ней таблицу “TestReplication”."}),(0,t.jsx)(l.Z,{code:'\nCREATE TABLE "TestReplication" ("SomveValue" varchar(100));\nINSERT INTO "TestReplication" VALUES (\'test 1\');\nINSERT INTO "TestReplication" VALUES (\'test 2\');\nINSERT INTO "TestReplication" VALUES (\'test 3\');\n                ',className:"my-5",language:"sql"}),(0,t.jsx)(r.xv,{p:!0,children:"Практически сразу на дополнительном сервере появится эта база данных и можно выполнить запрос."}),(0,t.jsx)(l.Z,{code:'\nselect\n    *\nfrom "TestReplication"\n                ',className:"my-5",language:"sql"}),(0,t.jsx)(r.xv,{p:!0,children:"В результате мы должны получить три записи, которые мы добавили выше. Если так - то дело сделано. А если нет, то Вам путь в логи сервера PostgreSQL для поиска проблем."}),(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Вместо заключения"}),(0,t.jsxs)(r.xv,{p:!0,children:["PostgreSQL имеет множество ",(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://www.postgresql.org/docs/9.1/high-availability.html",children:"механизмов репликации данных"})})}),", которые позволяют организовать горизонтальное масштабирование, повысить уровень отказоустойчивости и так далее. Мы рассмотрели простую настройку ",(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://www.postgresql.org/docs/9.1/warm-standby.html#STREAMING-REPLICATION",children:"потоковой репликации"})})}),", которая чем-то похожа на ",(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://github.com/YPermitin/SQLServerTools/tree/master/SQL-Server-AlwaysOn",children:"механизм групп высокой доступности AlwaysOn в SQL Server"})})}),". Различний, конечно, очень много. Как и нюансов работы, но принцип тот же - передача записей лога транзакций на реплики."]}),(0,t.jsxs)(r.xv,{p:!0,children:["Другая информация по PostgreSQL ",(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://github.com/YPermitin/PGTools",children:"может быть найдена в этом репозитории"})})}),"."]}),(0,t.jsx)(r.xv,{title:!0,className:"mt-10 md:text",children:"Полезные материалы"}),(0,t.jsxs)(r.aV,{children:[(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://postgrespro.ru/docs/postgrespro/10/warm-standby",children:"Трансляция журналов на резервные серверы"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://www.postgresql.org/docs/9.5/protocol-replication.html",children:"Streaming Replication Protocol"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://girders.org/postgresql/2021/11/05/setup-postgresql14-replication/",children:"Setup PostgreSQL 14 Streaming Replication"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://itproffi.ru/potokovaya-replikatsiya-v-postgresql/",children:"Потоковая репликация в PostgreSQL"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://selectel.ru/blog/tutorials/how-to-set-up-replication-in-postgresql/",children:"Как настроить репликацию в PostgreSQL"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://eax.me/postgresql-replication/",children:"Потоковая репликация в PostgreSQL и пример фейловера"})})})}),(0,t.jsx)("li",{children:(0,t.jsx)("b",{children:(0,t.jsx)("u",{children:(0,t.jsx)(r.e9,{newTab:!0,href:"https://adminguide.ru/2019/04/07/postgresql-10-%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F-%D1%80%D0%B5%D0%BF%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F-%D1%81-%D0%BE%D1%82%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%BE%D0%B9/",children:"PostgreSQL 10 — Потоковая репликация с отработкой фейловера"})})})})]})]})},87855:function(e,n,s){"use strict";var t,r;s.d(n,{b:function(){return t}}),(r=t||(t={})).Min="350px",r.Standard="700px",r.Large="1000x",r.Unlimited=""},74313:function(e,n,s){"use strict";var t=s(37340),r=s(85893),l=s(67294),a=s(14965),i=s(41240),c=s(41686),o=s(87855);function d(){let e=(0,t._)(["\n        text-align: left;\n        overflow: hidden;\n        font-size: 14px;\n        border-radius: 6px;\n        overflow: auto;\n\n        & .token-line {\n            line-height: 1.3em;\n            height: 1.3em;\n        }\n    "]);return d=function(){return e},e}function h(){let e=(0,t._)(["\n        max-height: ","\n    "]);return h=function(){return e},e}n.Z=e=>{let{code:n,className:t,language:p,maxHeight:x=o.b.Standard}=e;(void 0!==s.g?s.g:window).Prism=a.p1,s(61354),s(79016),s(35266),s(92927),s(51315),s(57874),s(86862);let m=null!=x?x:o.b.Standard,g=c.ZP.pre(d()),u=(0,c.ZP)(g)(h(),m);return(0,r.jsx)("div",{className:(0,i.GF)("bg-blue-500 md:p-1 p-2",t),children:(0,r.jsx)("div",{className:"shadow-lg",children:(0,r.jsx)(a.y$,{theme:a.np.vsDark,code:n.trim(),language:null!=p?p:p="tsx",children:e=>{let{className:n,style:s,tokens:t,getLineProps:a,getTokenProps:i}=e;return(0,r.jsx)(u,{className:n,style:s,children:t.map((e,n)=>(0,l.createElement)("div",{...a({line:e,key:n}),key:Math.random()},e.map((e,n)=>(0,l.createElement)("span",{...i({token:e,key:n}),key:Math.random()}))))})}})})})}},44853:function(e,n,s){"use strict";s.d(n,{Ee:function(){return i},Xg:function(){return l},Y7:function(){return h},aV:function(){return o},e9:function(){return d},o_:function(){return p},tf:function(){return x},ty:function(){return c},xv:function(){return a}});var t=s(5152),r=s.n(t);let l=r()(()=>Promise.all([s.e(9686),s.e(4738),s.e(4838),s.e(1664),s.e(8765)]).then(s.bind(s,28765)),{loadableGenerated:{webpack:()=>[28765]}}),a=r()(()=>Promise.all([s.e(9511),s.e(935)]).then(s.bind(s,30935)),{loadableGenerated:{webpack:()=>[30935]}}),i=r()(()=>Promise.all([s.e(328),s.e(7651)]).then(s.bind(s,47651)),{loadableGenerated:{webpack:()=>[47651]}}),c=r()(()=>Promise.all([s.e(9686),s.e(6979)]).then(s.bind(s,16979)),{loadableGenerated:{webpack:()=>[16979]}}),o=r()(()=>Promise.all([s.e(4159),s.e(7355)]).then(s.bind(s,87355)),{loadableGenerated:{webpack:()=>[87355]}}),d=r()(()=>Promise.all([s.e(1664),s.e(3220)]).then(s.bind(s,53220)),{loadableGenerated:{webpack:()=>[53220]}});r()(()=>s.e(3140).then(s.bind(s,43140)),{loadableGenerated:{webpack:()=>[43140]}});let h=r()(()=>Promise.all([s.e(2004),s.e(736)]).then(s.bind(s,50736)),{loadableGenerated:{webpack:()=>[50736]}}),p=r()(()=>Promise.all([s.e(8331),s.e(8876),s.e(7354),s.e(839),s.e(5394),s.e(5533)]).then(s.bind(s,48641)),{loadableGenerated:{webpack:()=>[48641]}}),x=r()(()=>Promise.all([s.e(8331),s.e(1664),s.e(7354),s.e(839),s.e(8496)]).then(s.bind(s,48496)),{loadableGenerated:{webpack:()=>[48496]}})}},function(e){e.O(0,[6443,2888,9774,179],function(){return e(e.s=85655)}),_N_E=e.O()}]);